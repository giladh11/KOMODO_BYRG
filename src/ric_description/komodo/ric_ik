/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-09-07 12:35:11.228263
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54;
x0=IKsin(j[0]);
x1=IKsin(j[2]);
x2=IKcos(j[0]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[1]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((1.0)*x7);
x13=((0.224)*x4);
x14=((0.0137)*x2);
x15=((0.00025)*x2);
x16=((0.287)*x4);
x17=((1.0)*x1);
x18=((0.00025)*x6);
x19=((1.0)*x6);
x20=((0.0137)*x3);
x21=((1.0)*x9);
x22=((1.0)*x3);
x23=((1.0)*x8);
x24=((1.0)*x4);
x25=((0.021)*x4);
x26=((0.287)*x3);
x27=(x2*x3);
x28=(x0*x1);
x29=(x0*x4);
x30=((-1.0)*x6);
x31=((-0.021)*x6);
x32=(x5*x7);
x33=(x0*x3);
x34=(x5*x9);
x35=(x5*x6);
x36=(x4*x7);
x37=(x1*x2);
x38=(x5*x8);
x39=(x3*x5);
x40=((-1.0)*x7);
x41=(x2*x4);
x42=(x19*x2*x5);
x43=(x0*x19*x5);
x44=(x17*x38);
x45=((((-1.0)*x22*x41))+x28);
x46=((((-1.0)*x17*x29))+x27);
x47=((((-1.0)*x19*x4))+((x12*x39)));
x48=((((-1.0)*x0*x22))+(((-1.0)*x17*x41)));
x49=((((-1.0)*x17*x2))+(((-1.0)*x22*x29)));
x50=(((x19*x39))+((x12*x4)));
x51=(x45*x6);
x52=((-1.0)*x45);
x53=(x46*x8);
x54=((1.0)*x49);
eerot[0]=(((x8*((((x2*x32))+x51))))+((x48*x9)));
eerot[1]=(((x10*((((x9*(((((-1.0)*x2*x32))+((x30*x45))))))+((x48*x8))))))+((x11*(((((-1.0)*x12*x45))+x42)))));
eerot[2]=(((x10*((((x40*x45))+x42))))+(((-1.0)*x11*((((x21*(((((-1.0)*x12*x2*x5))+(((-1.0)*x19*x45))))))+((x23*x48)))))));
eetrans[0]=((-0.096278)+((x9*(((((-0.021)*x2*x32))+((x31*x45))))))+((x9*((((x1*x15*x4))+(((0.00025)*x33))))))+(((0.26630543)*x41))+((x8*(((((-1.0)*x18*x45))+(((-1.0)*x15*x32))))))+((x8*(((((-1.0)*x25*x37))+(((-0.021)*x33))))))+(((0.287)*x2*x35))+(((-0.224)*x28))+((x14*x32))+(((0.00025116)*x0))+((x7*((((x16*x27))+(((-0.287)*x28))))))+((x13*x27))+((x6*(((((-1.0)*x14*x3*x4))+(((0.0137)*x28)))))));
eerot[3]=(((x46*x9))+((x8*((((x49*x6))+((x0*x32)))))));
eerot[4]=(((x11*(((((-1.0)*x12*x49))+x43))))+((x10*((((x9*(((((-1.0)*x0*x32))+((x30*x49))))))+x53)))));
eerot[5]=((((-1.0)*x11*((((x21*(((((-1.0)*x19*x49))+(((-1.0)*x0*x12*x5))))))+((x23*x46))))))+((x10*((((x40*x49))+x43)))));
IkReal x55=(x0*x32);
eetrans[1]=((((-0.00025116)*x2))+((x8*(((((-1.0)*x25*x28))+(((0.021)*x27))))))+((x9*(((((-0.021)*x55))+((x31*x49))))))+((x7*(((((0.287)*x37))+((x16*x33))))))+((x8*(((((-1.0)*x18*x49))+(((-0.00025)*x55))))))+(((0.0137)*x55))+((x13*x33))+(((0.224)*x37))+((x6*(((((-1.0)*x1*x14))+(((-1.0)*x20*x29))))))+((x9*(((((0.00025)*x28*x4))+(((-1.0)*x15*x3))))))+(((0.287)*x0*x35))+(((0.26630543)*x29)));
eerot[6]=((((-1.0)*x17*x34))+(((-1.0)*x50*x8)));
eerot[7]=(((x10*(((((-1.0)*x44))+((x50*x9))))))+((x11*x47)));
eerot[8]=(((x11*((x44+(((-1.0)*x21*x50))))))+((x10*x47)));
eetrans[2]=((0.1384)+(((-1.0)*x20*x35))+(((-0.0137)*x36))+((x26*x32))+(((-1.0)*x16*x6))+((x8*((((x18*x39))+(((0.00025)*x36))))))+(((-0.021)*x1*x38))+(((0.00025)*x1*x34))+(((0.224)*x39))+(((0.26630543)*x5))+((x9*(((((0.021)*x3*x35))+((x25*x7)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r02);
new_r01=r01;
new_r02=r00;
new_px=((0.096278)+px+(((0.00025)*r00)));
new_r10=((-1.0)*r12);
new_r11=r11;
new_r12=r10;
new_py=(py+(((0.00025)*r10)));
new_r20=((-1.0)*r22);
new_r21=r21;
new_r22=r20;
new_pz=((-0.1384)+(((0.00025)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x56=((1.0)*px);
IkReal x57=((1.0)*pz);
IkReal x58=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x58))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x57)));
rxp0_2=((((-1.0)*r10*x56))+((py*r00)));
rxp1_0=((((-1.0)*r21*x58))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x57)));
rxp1_2=((((-1.0)*r11*x56))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x58)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x57)));
rxp2_2=((((-1.0)*r12*x56))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x59=((3.48432055749129)*npx);
IkReal x60=((713.47231167127)*r10);
IkReal x61=((291.331150291914)*rxp2_1);
IkReal x62=((3981.52572065616)*py);
IkReal x63=((83.6120401337793)*r11);
IkReal x64=((17336.3233487131)*r21);
IkReal x65=((223.45498783455)*r10);
IkReal x66=((3981.52572065616)*rxp2_0);
IkReal x67=((825539.207081575)*pz);
IkReal x68=((889691.781472169)*npx);
IkReal x69=((54414.1848489675)*px);
IkReal x70=((1.0)*r22);
IkReal x71=((16.3503649635037)*r11);
IkReal x72=((3695.13600975573)*r00);
IkReal x73=((1549985.68200726)*pp);
IkReal x74=((65099.398644305)*npy);
IkReal x75=((50490.5675759713)*rxp0_1);
IkReal x76=((1060.3019190954)*r12);
IkReal x77=((47.6190476190476)*rxp0_2);
IkReal x78=((236929.752432412)*r20);
IkReal x79=((778.588807785888)*py);
IkReal x80=((1142.69788182832)*r01);
IkReal x81=((54414.1848489675)*pz);
IkReal x82=((3695.13600975573)*r20);
IkReal x83=((17336.3233487131)*r01);
IkReal x84=((825539.207081575)*px);
IkReal x85=((1142.69788182832)*r21);
IkReal x86=((1.0)*r02);
IkReal x87=((236929.752432412)*r00);
IkReal x88=((3981.52572065616)*rxp2_2);
IkReal x89=((47.6190476190476)*rxp0_0);
IkReal x90=((1779383.56294434)*npy);
IkReal x91=((34672.6466974261)*r20);
IkReal x92=((130198.79728861)*npx);
IkReal x93=((446.9099756691)*r11);
IkReal x94=((7390.27201951147)*r01);
IkReal x95=((473859.504864824)*r21);
IkReal x96=((32.7007299270073)*r10);
IkReal x97=((95.2380952380952)*rxp1_2);
IkReal x98=((100981.135151943)*rxp1_1);
IkReal x99=((2285.39576365663)*r00);
IkReal x100=((7963.05144131231)*px);
IkReal x101=((167.224080267559)*r01);
IkReal x102=((1426.94462334254)*r00);
IkReal x103=((582.662300583828)*rxp2_0);
IkReal x104=((100981.135151943)*rxp0_0);
IkReal x105=((32.7007299270073)*r01);
IkReal x106=((1557.17761557178)*px);
IkReal x107=((2120.60383819079)*r02);
IkReal x108=((7963.05144131231)*rxp2_1);
IkReal x109=((446.9099756691)*r00);
IkReal x110=((7390.27201951147)*r10);
IkReal x111=((2285.39576365663)*r11);
IkReal x112=((108828.369697935)*py);
IkReal x113=((34672.6466974261)*r11);
IkReal x114=((1651078.41416315)*py);
IkReal x115=((95.2380952380952)*rxp0_1);
IkReal x116=((473859.504864824)*r10);
IkReal x117=((2.0)*r12);
IkReal x118=((14780.5440390229)*r11);
IkReal x119=((201962.270303885)*rxp1_0);
IkReal x120=((893.8199513382)*r01);
IkReal x121=((65.4014598540146)*r00);
IkReal x122=((4570.79152731327)*r10);
IkReal x123=((6.96864111498258)*npy);
IkReal x124=((167.224080267559)*r10);
IkReal x125=((1426.94462334254)*r11);
IkReal x126=((34672.6466974261)*r00);
IkReal x127=((473859.504864824)*r01);
IkReal x128=((7390.27201951147)*r21);
IkReal x129=((95.2380952380952)*rxp1_0);
IkReal x130=((2285.39576365663)*r20);
IkReal x131=((379192.925776777)*npy);
IkReal x132=(pp*r01);
IkReal x133=((189596.462888388)*pp);
IkReal x134=(pp*r11);
IkReal x135=((189596.462888388)*npx);
IkReal x136=(npy*py);
IkReal x137=((94798.2314441942)*pp);
IkReal x138=(npx*py);
IkReal x139=((13872.9119186626)*x138);
IkReal x140=((6936.45595933128)*pp*r10);
IkReal x141=(px*x135);
IkReal x142=(r00*x137);
IkReal x143=(r20*x137);
IkReal x144=(pz*x135);
IkReal x145=((189596.462888388)*x132);
IkReal x146=(px*x131);
IkReal x147=((13872.9119186626)*pp*r00);
IkReal x148=((27745.8238373251)*npx*px);
IkReal x149=((379192.925776777)*x138);
IkReal x150=(r10*x133);
IkReal x151=((379192.925776777)*x134);
IkReal x152=((758385.851553553)*x136);
IkReal x153=((13872.9119186626)*x134);
IkReal x154=((27745.8238373251)*x136);
IkReal x155=(r21*x133);
IkReal x156=(pz*x131);
IkReal x157=((-160796.034096322)+x65);
IkReal x158=((-1.0)+x61);
IkReal x159=(x93+x96);
IkReal x160=(x64+x66);
IkReal x161=(x108+x109);
IkReal x162=(x104+x105);
IkReal x163=(x106+x107);
IkReal x164=(x83+x81);
IkReal x165=(x120+x121);
IkReal x166=(x89+x87);
IkReal x167=(x90+x92);
IkReal x168=(x116+x115);
IkReal x169=(x64+x69);
IkReal x170=(x74+x70);
IkReal x171=(x59+x62);
IkReal x172=(x88+x83);
IkReal x173=(x147+x101);
IkReal x174=(x140+x63);
IkReal x175=(x156+x130);
IkReal x176=(x145+x94);
IkReal x177=(x155+x128);
IkReal x178=(x149+x112);
IkReal x179=(x151+x118);
IkReal x180=(x148+x102);
IkReal x181=(x146+x99);
IkReal x182=(x139+x60);
IkReal x183=(x152+x122);
IkReal x184=(x144+x84);
IkReal x185=((((-947719.009729648)*r11))+(((-190.47619047619)*rxp1_1))+(((-69345.2933948523)*r10)));
IkReal x186=(x77+x78+x69);
IkReal x187=(x75+x73+x71);
IkReal x188=(x91+x95+x97);
IkReal x189=(x77+x78+x66);
IkReal x190=(x126+x127+x129);
IkReal x191=(x76+x79+x68);
IkReal x192=(x141+x67+x68);
IkReal x193=(x150+x111+x110);
IkReal x194=(x154+x124+x125);
IkReal x195=(x143+x82+x85);
IkReal x196=(x141+x73+x65);
IkReal x197=((((-2853.88924668508)*r01))+(((-334.448160535117)*r00))+(((-55491.6476746503)*npy*px))+(((27745.8238373251)*x132)));
IkReal x198=((((-1.0)*x113))+(((-1.0)*x117))+x168+x114);
IkReal x199=((((-1.0)*x168))+(((-1.0)*x117))+x113+x114);
IkReal x200=(x167+x181);
IkReal x201=(x195+x84);
IkReal x202=((-160796.034096322)+x141+x75+x71+r22);
IkReal x203=(x142+x72+x68+x80);
IkReal x204=((((-1.0)*x153))+x123+x194);
IkReal x205=((((-1.0)*x194))+x153+x123);
IkReal x206=(x141+x76+x74+x79+x67);
IkReal x207=(x142+x76+x72+x79+x80);
IkReal x208=((((-1.0)*x173))+(((-1.0)*x103))+x100+x180);
IkReal x209=((((-1.0)*x180))+(((-1.0)*x103))+x173+x100);
IkReal x210=(x142+x73+x72+x65+x67+x80);
IkReal x211=((-160796.034096322)+x142+x75+x72+x71+x67+x80);
IkReal x212=((((-1.0)*x175))+(((-1.0)*x190))+x177);
IkReal x213=((((-1.0)*x175))+x177+x190);
IkReal x214=((((-1.0)*x171))+(((-1.0)*x182))+x174+x158);
IkReal x215=((((-1.0)*x174))+x158+x182+x59+(((-1.0)*x62)));
IkReal x216=((-1.0)+(((-1.0)*x174))+x182+x62+(((-1.0)*x61))+(((-1.0)*x59)));
IkReal x217=((-1.0)+(((-1.0)*x182))+x171+x174+(((-1.0)*x61)));
IkReal x218=((((-1.0)*x166))+x164+x144+(((-1.0)*x201))+r02+(((-1.0)*x88)));
IkReal x219=((((-1.0)*x172))+(((-1.0)*x184))+x166+x195+x81+r02);
IkReal x220=((((-1.0)*x172))+(((-1.0)*x195))+x166+x184+x81+(((-1.0)*x86)));
IkReal x221=((((-1.0)*x144))+(((-1.0)*x166))+x164+x201+(((-1.0)*x88))+(((-1.0)*x86)));
op[0]=x214;
op[1]=0;
op[2]=x204;
op[3]=0;
op[4]=x215;
op[5]=0;
op[6]=0;
op[7]=x214;
op[8]=0;
op[9]=x204;
op[10]=0;
op[11]=x215;
op[12]=((((-1.0)*x169))+(((-1.0)*x70))+(((-1.0)*x196))+(((-1.0)*x191))+x189+x211+x74);
op[13]=x220;
op[14]=((((-1.0)*x176))+(((-1.0)*x188))+x159+x200+(((-1.0)*x98)));
op[15]=x212;
op[16]=((((-1.0)*x170))+(((-1.0)*x187))+(((-1.0)*x186))+x160+x157+x192+(((-1.0)*x207)));
op[17]=x221;
op[18]=x220;
op[19]=((((-1.0)*x189))+(((-1.0)*x191))+x169+x202+x74+(((-1.0)*x210)));
op[20]=x212;
op[21]=((((-1.0)*x181))+x176+x167+x159+x188+(((-1.0)*x98)));
op[22]=x221;
op[23]=((((-1.0)*x160))+(((-1.0)*x187))+x157+x186+(((-1.0)*x206))+x203+r22);
op[24]=x208;
op[25]=0;
op[26]=x197;
op[27]=0;
op[28]=x209;
op[29]=0;
op[30]=0;
op[31]=x208;
op[32]=0;
op[33]=x197;
op[34]=0;
op[35]=x209;
op[36]=((((-1.0)*x162))+(((-1.0)*x178))+x163+x161+x193);
op[37]=x198;
op[38]=((((-1.0)*x165))+(((-1.0)*x179))+x119+x183);
op[39]=x185;
op[40]=((((-1.0)*x109))+(((-1.0)*x193))+(((-1.0)*x112))+x162+x163+x149+x108);
op[41]=x199;
op[42]=x198;
op[43]=((((-1.0)*x162))+(((-1.0)*x108))+(((-1.0)*x193))+x178+x163+x109);
op[44]=x185;
op[45]=((((-1.0)*x165))+(((-1.0)*x183))+x179+x119);
op[46]=x199;
op[47]=((((-1.0)*x149))+(((-1.0)*x161))+x162+x163+x112+x193);
op[48]=x216;
op[49]=0;
op[50]=x205;
op[51]=0;
op[52]=x217;
op[53]=0;
op[54]=0;
op[55]=x216;
op[56]=0;
op[57]=x205;
op[58]=0;
op[59]=x217;
op[60]=((((-1.0)*x160))+(((-1.0)*x70))+(((-1.0)*x187))+x157+x186+(((-1.0)*x203))+x206);
op[61]=x218;
op[62]=((((-1.0)*x159))+(((-1.0)*x181))+(((-1.0)*x188))+x176+x167+x98);
op[63]=x213;
op[64]=((((-1.0)*x170))+(((-1.0)*x189))+(((-1.0)*x196))+x169+x191+x211);
op[65]=x219;
op[66]=x218;
op[67]=((((-1.0)*x187))+(((-1.0)*x186))+(((-1.0)*x192))+x160+x157+x207+x74+r22);
op[68]=x213;
op[69]=((((-1.0)*x159))+(((-1.0)*x176))+x188+x200+x98);
op[70]=x219;
op[71]=((((-1.0)*x169))+(((-1.0)*x74))+x191+x189+x202+(((-1.0)*x210)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj5)||isnan(htj1)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x222=htj0*htj0;
CheckValue<IkReal> x223=IKPowWithIntegerCheck(((1.0)+x222),-1);
if(!x223.valid){
continue;
}
cj0array[numsolutions]=((x223.value)*(((1.0)+(((-1.0)*x222)))));
CheckValue<IkReal> x224=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x224.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x224.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x225=htj5*htj5;
CheckValue<IkReal> x226=IKPowWithIntegerCheck(((1.0)+x225),-1);
if(!x226.valid){
continue;
}
cj5array[numsolutions]=((x226.value)*(((1.0)+(((-1.0)*x225)))));
CheckValue<IkReal> x227=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x227.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x227.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x228=htj1*htj1;
CheckValue<IkReal> x229=IKPowWithIntegerCheck(((1.0)+x228),-1);
if(!x229.valid){
continue;
}
cj1array[numsolutions]=((x229.value)*(((1.0)+(((-1.0)*x228)))));
CheckValue<IkReal> x230=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x230.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x230.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j4eval[1];
IkReal x231=(r22*sj1);
IkReal x232=(cj1*sj0);
IkReal x233=((4.0)*cj5);
IkReal x234=(cj0*cj1);
IkReal x235=((4.0)*sj5);
IkReal x236=(r02*x234);
IkReal x237=(((r21*sj1*x233))+((r20*sj1*x235)));
IkReal x238=(((r10*x232*x235))+((r11*x232*x233))+((r00*x234*x235))+((r01*x233*x234)));
j4eval[0]=((((0.5)*(IKabs(((((16.0)*x236))+(((16.0)*r12*x232))+(((-16.0)*x231)))))))+(IKabs(((((-1.0)*x238))+x237)))+(IKabs(((((8.0)*x236))+(((-8.0)*x231))+(((8.0)*r12*x232)))))+(((0.5)*(IKabs(((((-1.0)*x237))+x238))))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j2, j3, j4]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x239=(r22*sj1);
IkReal x240=((8.0)*cj1);
IkReal x241=(r12*sj0);
IkReal x242=(cj0*cj1);
IkReal x243=((4.0)*cj5);
IkReal x244=((4.0)*cj1*sj5);
IkReal x245=((((4.0)*r20*sj1*sj5))+((r21*sj1*x243)));
IkReal x246=(((cj0*r02*x240))+((x240*x241))+(((-8.0)*x239)));
IkReal x247=(((r01*x242*x243))+((cj1*r11*sj0*x243))+(((4.0)*r00*sj5*x242))+((r10*sj0*x244)));
IkReal x248=(x245+(((-1.0)*x247)));
IkReal x249=(x247+(((-1.0)*x245)));
op[0]=x248;
op[1]=x246;
op[2]=x248;
op[3]=((((16.0)*r02*x242))+(((16.0)*cj1*x241))+(((-16.0)*x239)));
op[4]=x249;
op[5]=x246;
op[6]=x249;
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j2eval[1];
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
IkReal x250=((1.0)*sj0);
IkReal x251=((1.0)*cj0*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj4*cj5*r11*x250))+(((-1.0)*r12*sj4*x250))+(((-1.0)*r00*sj5*x251))+(((-1.0)*cj0*r02*sj4))+(((-1.0)*cj5*r01*x251))+(((-1.0)*cj4*r10*sj5*x250)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x252=(cj4*sj5);
IkReal x253=(cj4*cj5);
IkReal x254=((1.0)*sj0);
if( IKabs(((((-1.0)*r21*x253))+(((-1.0)*r22*sj4))+(((-1.0)*r20*x252)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r11*x253))+(((-1.0)*r01*x253*x254))+(((-1.0)*r00*x252*x254))+((cj0*r12*sj4))+((cj0*r10*x252))+(((-1.0)*r02*sj4*x254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x253))+(((-1.0)*r22*sj4))+(((-1.0)*r20*x252))))+IKsqr((((cj0*r11*x253))+(((-1.0)*r01*x253*x254))+(((-1.0)*r00*x252*x254))+((cj0*r12*sj4))+((cj0*r10*x252))+(((-1.0)*r02*sj4*x254))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x253))+(((-1.0)*r22*sj4))+(((-1.0)*r20*x252))), (((cj0*r11*x253))+(((-1.0)*r01*x253*x254))+(((-1.0)*r00*x252*x254))+((cj0*r12*sj4))+((cj0*r10*x252))+(((-1.0)*r02*sj4*x254))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x255=(cj4*cj5);
IkReal x256=(cj4*sj5);
IkReal x257=((1.0)*cj0);
evalcond[0]=(((r21*x255))+((r20*x256))+((r22*sj4))+(IKsin(j2)));
evalcond[1]=(((r02*sj0*sj4))+(((-1.0)*r12*sj4*x257))+((r00*sj0*x256))+(IKcos(j2))+(((-1.0)*r11*x255*x257))+(((-1.0)*r10*x256*x257))+((r01*sj0*x255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
j3eval[2]=((IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*r20))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x258=((1.0)*cj0);
IkReal x259=(r21*sj5);
IkReal x260=(sj0*sj4);
IkReal x261=(cj4*cj5);
IkReal x262=((1.0)*sj5);
IkReal x263=(cj4*sj0);
IkReal x264=(cj5*r21);
IkReal x265=(r00*sj5);
IkReal x266=(cj5*r20);
IkReal x267=(cj4*sj5);
IkReal x268=(r01*x261);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r22*sj4))+((r21*x261))+((r20*x267)));
evalcond[2]=((((-1.0)*x266))+x259);
evalcond[3]=((((-1.0)*r20*sj4*x262))+((cj4*r22))+(((-1.0)*sj4*x264)));
evalcond[4]=((((-1.0)*r12*sj4*x258))+((r02*x260))+((x263*x265))+(((-1.0)*r11*x258*x261))+((sj0*x268))+(((-1.0)*r10*x258*x267)));
evalcond[5]=((((-1.0)*cj4*x258*x265))+(((-1.0)*x258*x268))+(((-1.0)*r11*sj0*x261))+(((-1.0)*r12*x260))+(((-1.0)*r10*x262*x263))+(((-1.0)*r02*sj4*x258)));
evalcond[6]=((-0.26630543)+(((-0.04225)*x259))+(((0.04225)*x266))+(((-0.021)*r20*sj5))+(((-0.021)*x264))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x269=(cj5*r00);
IkReal x270=((1.0)*cj0);
IkReal x271=(cj0*sj5);
IkReal x272=(cj5*r10);
IkReal x273=(sj0*sj5);
if( IKabs(((((-1.0)*sj0*x272))+(((-1.0)*x269*x270))+((r01*x271))+((r11*x273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x270*x272))+((r11*x271))+(((-1.0)*r01*x273))+((sj0*x269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x272))+(((-1.0)*x269*x270))+((r01*x271))+((r11*x273))))+IKsqr(((((-1.0)*x270*x272))+((r11*x271))+(((-1.0)*r01*x273))+((sj0*x269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj0*x272))+(((-1.0)*x269*x270))+((r01*x271))+((r11*x273))), ((((-1.0)*x270*x272))+((r11*x271))+(((-1.0)*r01*x273))+((sj0*x269))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x274=IKcos(j3);
IkReal x275=IKsin(j3);
IkReal x276=(cj5*r01);
IkReal x277=(cj0*sj4);
IkReal x278=(cj0*sj5);
IkReal x279=((0.04225)*r11);
IkReal x280=((0.021)*r10);
IkReal x281=(r00*sj0);
IkReal x282=((0.04225)*cj5);
IkReal x283=((0.021)*sj0);
IkReal x284=(sj0*sj5);
IkReal x285=((0.04225)*r01);
IkReal x286=((1.0)*sj4);
IkReal x287=((1.0)*r11);
IkReal x288=(cj0*r00);
IkReal x289=(cj4*sj0);
IkReal x290=(cj5*r11);
IkReal x291=((1.0)*py);
IkReal x292=((0.021)*cj0);
IkReal x293=(cj0*r10);
IkReal x294=(r10*sj0);
IkReal x295=((1.0)*cj0*cj4);
evalcond[0]=(((r01*x284))+((cj5*x293))+x274+(((-1.0)*cj5*x281))+(((-1.0)*x278*x287)));
evalcond[1]=(((cj5*x294))+x275+(((-1.0)*x284*x287))+(((-1.0)*r01*x278))+((cj5*x288)));
evalcond[2]=((((-1.0)*r12*x289))+((sj0*sj4*x290))+((r00*sj5*x277))+(((-1.0)*r02*x295))+x274+((x276*x277))+((r10*sj4*x284)));
evalcond[3]=((((-1.0)*sj5*x281*x286))+(((-1.0)*x275))+((x277*x290))+((r02*x289))+(((-1.0)*sj0*x276*x286))+((r10*sj5*x277))+(((-1.0)*r12*x295)));
evalcond[4]=((0.22374884)+((x290*x292))+((x278*x280))+(((0.24475)*x274))+(((-1.0)*x276*x283))+(((-1.0)*cj0*x291))+(((-0.021)*sj5*x281))+(((-0.0137)*x275))+(((-1.0)*x284*x285))+((px*sj0))+((x278*x279))+((x281*x282))+(((-1.0)*x282*x293)));
evalcond[5]=((((-1.0)*sj0*x291))+(((0.0137)*x274))+((x279*x284))+((x278*x285))+(((0.24475)*x275))+((x276*x292))+((x283*x290))+(((-1.0)*x282*x288))+((x280*x284))+(((0.021)*r00*x278))+(((-1.0)*cj0*px))+(((-1.0)*x282*x294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x296=((1.0)*cj0);
IkReal x297=(r21*sj5);
IkReal x298=(sj0*sj4);
IkReal x299=(cj4*cj5);
IkReal x300=((1.0)*sj5);
IkReal x301=(cj4*sj0);
IkReal x302=(cj5*r21);
IkReal x303=(r00*sj5);
IkReal x304=(cj5*r20);
IkReal x305=(cj4*sj5);
IkReal x306=(r01*x299);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r22*sj4))+((r20*x305))+((r21*x299)));
evalcond[2]=((((-1.0)*x304))+x297);
evalcond[3]=(((cj4*r22))+(((-1.0)*sj4*x302))+(((-1.0)*r20*sj4*x300)));
evalcond[4]=(((x301*x303))+(((-1.0)*r11*x296*x299))+(((-1.0)*r10*x296*x305))+((sj0*x306))+((r02*x298))+(((-1.0)*r12*sj4*x296)));
evalcond[5]=((((-1.0)*x296*x306))+(((-1.0)*cj4*x296*x303))+(((-1.0)*r11*sj0*x299))+(((-1.0)*r10*x300*x301))+(((-1.0)*r12*x298))+(((-1.0)*r02*sj4*x296)));
evalcond[6]=((-0.26630543)+(((-0.04225)*x297))+(((-0.021)*x302))+(((-0.021)*r20*sj5))+pz+(((0.04225)*x304)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x307=(r01*sj5);
IkReal x308=(cj5*r10);
IkReal x309=(r11*sj5);
IkReal x310=((1.0)*cj5*r00);
if( IKabs(((((-1.0)*cj0*x310))+((cj0*x307))+((sj0*x309))+(((-1.0)*sj0*x308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x309))+((cj0*x308))+((sj0*x307))+(((-1.0)*sj0*x310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x310))+((cj0*x307))+((sj0*x309))+(((-1.0)*sj0*x308))))+IKsqr(((((-1.0)*cj0*x309))+((cj0*x308))+((sj0*x307))+(((-1.0)*sj0*x310))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*x310))+((cj0*x307))+((sj0*x309))+(((-1.0)*sj0*x308))), ((((-1.0)*cj0*x309))+((cj0*x308))+((sj0*x307))+(((-1.0)*sj0*x310))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x311=IKcos(j3);
IkReal x312=IKsin(j3);
IkReal x313=(cj5*r01);
IkReal x314=(cj0*sj4);
IkReal x315=(cj0*sj5);
IkReal x316=((0.04225)*r11);
IkReal x317=((0.021)*r10);
IkReal x318=(r00*sj0);
IkReal x319=((0.04225)*cj5);
IkReal x320=((0.021)*sj0);
IkReal x321=(sj0*sj5);
IkReal x322=((0.04225)*r01);
IkReal x323=((1.0)*sj4);
IkReal x324=((1.0)*r11);
IkReal x325=(cj0*r00);
IkReal x326=(cj4*sj0);
IkReal x327=(cj5*r11);
IkReal x328=((1.0)*py);
IkReal x329=((0.021)*cj0);
IkReal x330=(cj0*r10);
IkReal x331=(r10*sj0);
IkReal x332=((1.0)*cj0*cj4);
evalcond[0]=((((-1.0)*x321*x324))+(((-1.0)*r01*x315))+((cj5*x325))+x312+((cj5*x331)));
evalcond[1]=(((r01*x321))+(((-1.0)*x315*x324))+(((-1.0)*cj5*x318))+(((-1.0)*x311))+((cj5*x330)));
evalcond[2]=(((sj0*sj4*x327))+(((-1.0)*r12*x326))+x311+((r10*sj4*x321))+(((-1.0)*r02*x332))+((r00*sj5*x314))+((x313*x314)));
evalcond[3]=(((r02*x326))+(((-1.0)*sj0*x313*x323))+x312+((x314*x327))+(((-1.0)*sj5*x318*x323))+((r10*sj5*x314))+(((-1.0)*r12*x332)));
evalcond[4]=((-0.22425116)+(((-0.021)*sj5*x318))+(((0.0137)*x312))+((x327*x329))+(((-1.0)*x321*x322))+(((-1.0)*x319*x330))+((x315*x317))+((x315*x316))+((px*sj0))+(((-1.0)*cj0*x328))+(((-0.24475)*x311))+((x318*x319))+(((-1.0)*x313*x320)));
evalcond[5]=((((-1.0)*sj0*x328))+(((0.0137)*x311))+((x320*x327))+(((-1.0)*x319*x331))+((x313*x329))+(((0.24475)*x312))+(((-1.0)*x319*x325))+((x315*x322))+((x317*x321))+((x316*x321))+(((-1.0)*cj0*px))+(((0.021)*r00*x315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x333=((1.0)*cj0);
IkReal x334=(cj0*sj5);
IkReal x335=(cj5*sj0);
IkReal x336=(sj0*sj4);
IkReal x337=(cj5*r11);
IkReal x338=(r00*sj5);
IkReal x339=(cj4*sj0);
IkReal x340=(r10*sj5);
IkReal x341=(cj4*cj5*r01);
IkReal x342=(r01*sj0*sj5);
IkReal x343=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=(x342+x343+(((-1.0)*r00*x335))+(((-1.0)*r11*sj5*x333)));
evalcond[3]=((1.0)+(((-1.0)*r12*sj4*x333))+((x338*x339))+(((-1.0)*cj4*x333*x337))+((r02*x336))+((cj4*r01*x335))+(((-1.0)*cj4*x333*x340)));
evalcond[4]=((((-1.0)*cj4*r12*x333))+((r02*x339))+(((-1.0)*x336*x338))+((cj0*sj4*x337))+(((-1.0)*r01*sj4*x335))+((r10*sj4*x334)));
evalcond[5]=((((-1.0)*r12*x336))+(((-1.0)*cj4*x333*x338))+(((-1.0)*r02*sj4*x333))+(((-1.0)*x339*x340))+(((-1.0)*cj4*r11*x335))+(((-1.0)*x333*x341)));
evalcond[6]=((-0.00025116)+(((0.021)*cj0*x337))+(((0.021)*r10*x334))+(((0.04225)*r00*x335))+(((-0.021)*r01*x335))+(((-0.021)*sj0*x338))+(((-1.0)*py*x333))+(((-0.04225)*x342))+(((-0.04225)*x343))+((px*sj0))+(((0.04225)*r11*x334)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))+IKsqr((((r21*sj5))+(((-1.0)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))), (((r21*sj5))+(((-1.0)*cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x344=IKsin(j3);
IkReal x345=IKcos(j3);
IkReal x346=(cj0*r01);
IkReal x347=((0.021)*cj5);
IkReal x348=(r21*sj5);
IkReal x349=((1.0)*cj0);
IkReal x350=((0.04225)*sj5);
IkReal x351=(cj5*sj4);
IkReal x352=((1.0)*sj5);
IkReal x353=(r11*sj0);
IkReal x354=((1.0)*sj0);
IkReal x355=(cj5*r20);
IkReal x356=((0.021)*sj5);
IkReal x357=(r10*sj0);
IkReal x358=(cj0*r00);
IkReal x359=(sj4*sj5);
IkReal x360=(cj5*x358);
evalcond[0]=((((-1.0)*x355))+x348+(((-1.0)*x345)));
evalcond[1]=(((cj4*r22))+(((-1.0)*r20*sj4*x352))+x344+(((-1.0)*r21*x351)));
evalcond[2]=((((-1.0)*x346*x352))+x344+x360+((cj5*x357))+(((-1.0)*x352*x353)));
evalcond[3]=((-0.49030543)+(((-0.24475)*x345))+pz+(((-0.04225)*x348))+(((0.0137)*x344))+(((0.04225)*x355))+(((-1.0)*r20*x356))+(((-1.0)*r21*x347)));
evalcond[4]=((((-1.0)*cj4*r02*x349))+((x346*x351))+(((-1.0)*cj4*r12*x354))+((x351*x353))+x345+((x358*x359))+((x357*x359)));
evalcond[5]=((((-1.0)*px*x349))+(((-0.04225)*x360))+((x356*x358))+((x356*x357))+(((0.24475)*x344))+((x346*x350))+((x347*x353))+(((0.0137)*x345))+((x350*x353))+((x346*x347))+(((-0.04225)*cj5*x357))+(((-1.0)*py*x354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x361=((1.0)*cj0);
IkReal x362=(cj0*sj5);
IkReal x363=(cj5*sj0);
IkReal x364=(sj0*sj4);
IkReal x365=(cj5*r11);
IkReal x366=(r00*sj5);
IkReal x367=(cj4*sj0);
IkReal x368=(r10*sj5);
IkReal x369=(cj4*cj5*r01);
IkReal x370=(r01*sj0*sj5);
IkReal x371=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*r11*sj5*x361))+(((-1.0)*r00*x363))+x371+x370);
evalcond[3]=((-1.0)+((cj4*r01*x363))+((x366*x367))+(((-1.0)*r12*sj4*x361))+(((-1.0)*cj4*x361*x368))+(((-1.0)*cj4*x361*x365))+((r02*x364)));
evalcond[4]=(((cj0*sj4*x365))+((r10*sj4*x362))+(((-1.0)*x364*x366))+(((-1.0)*cj4*r12*x361))+(((-1.0)*r01*sj4*x363))+((r02*x367)));
evalcond[5]=((((-1.0)*x361*x369))+(((-1.0)*x367*x368))+(((-1.0)*r02*sj4*x361))+(((-1.0)*cj4*r11*x363))+(((-1.0)*cj4*x361*x366))+(((-1.0)*r12*x364)));
evalcond[6]=((-0.00025116)+(((-0.04225)*x371))+(((-0.04225)*x370))+(((0.021)*cj0*x365))+(((-1.0)*py*x361))+((px*sj0))+(((-0.021)*r01*x363))+(((0.04225)*r11*x362))+(((0.021)*r10*x362))+(((-0.021)*sj0*x366))+(((0.04225)*r00*x363)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x372=((1.0)*sj4);
if( IKabs((((cj4*r22))+(((-1.0)*cj5*r21*x372))+(((-1.0)*r20*sj5*x372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r22))+(((-1.0)*cj5*r21*x372))+(((-1.0)*r20*sj5*x372))))+IKsqr((((cj5*r20))+(((-1.0)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj4*r22))+(((-1.0)*cj5*r21*x372))+(((-1.0)*r20*sj5*x372))), (((cj5*r20))+(((-1.0)*r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x373=IKsin(j3);
IkReal x374=IKcos(j3);
IkReal x375=(cj0*r01);
IkReal x376=((0.021)*cj5);
IkReal x377=(r21*sj5);
IkReal x378=((1.0)*cj0);
IkReal x379=((0.04225)*sj5);
IkReal x380=(cj5*sj4);
IkReal x381=((1.0)*sj5);
IkReal x382=(r11*sj0);
IkReal x383=((1.0)*sj0);
IkReal x384=(cj5*r20);
IkReal x385=((0.021)*sj5);
IkReal x386=(r10*sj0);
IkReal x387=(cj0*r00);
IkReal x388=(sj4*sj5);
IkReal x389=(cj5*x387);
evalcond[0]=(x377+x374+(((-1.0)*x384)));
evalcond[1]=((((-1.0)*x373))+((cj4*r22))+(((-1.0)*r20*sj4*x381))+(((-1.0)*r21*x380)));
evalcond[2]=((((-1.0)*x381*x382))+(((-1.0)*x375*x381))+x389+x373+((cj5*x386)));
evalcond[3]=((-0.04230543)+(((0.24475)*x374))+(((-0.04225)*x377))+(((-1.0)*r21*x376))+pz+(((-1.0)*r20*x385))+(((-0.0137)*x373))+(((0.04225)*x384)));
evalcond[4]=(((x387*x388))+((x386*x388))+x374+(((-1.0)*cj4*r02*x378))+((x380*x382))+((x375*x380))+(((-1.0)*cj4*r12*x383)));
evalcond[5]=((((-1.0)*py*x383))+(((0.0137)*x374))+(((0.24475)*x373))+((x376*x382))+((x375*x379))+((x375*x376))+(((-0.04225)*cj5*x386))+(((-0.04225)*x389))+((x379*x382))+((x385*x386))+((x385*x387))+(((-1.0)*px*x378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x390=IKPowWithIntegerCheck(cj2,-1);
if(!x390.valid){
continue;
}
CheckValue<IkReal> x391=IKPowWithIntegerCheck(sj2,-1);
if(!x391.valid){
continue;
}
if( IKabs(((x390.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x391.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x390.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))))+IKsqr(((x391.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x390.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))), ((x391.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x392=IKsin(j3);
IkReal x393=IKcos(j3);
IkReal x394=(cj0*sj5);
IkReal x395=((0.04225)*r11);
IkReal x396=((0.021)*r10);
IkReal x397=(r21*sj5);
IkReal x398=(sj0*sj5);
IkReal x399=(cj0*cj5);
IkReal x400=((0.04225)*r00);
IkReal x401=((0.04225)*r01);
IkReal x402=(cj4*r02);
IkReal x403=((1.0)*cj0);
IkReal x404=(cj4*r12);
IkReal x405=((1.0)*r00);
IkReal x406=(r01*sj4);
IkReal x407=(r11*sj4);
IkReal x408=((1.0)*r11);
IkReal x409=(cj5*sj0);
IkReal x410=(r10*sj4);
IkReal x411=((1.0)*r20);
IkReal x412=((1.0)*sj0);
IkReal x413=((0.021)*r11);
IkReal x414=(cj5*r21);
IkReal x415=((0.04225)*r10);
IkReal x416=((0.021)*r00);
IkReal x417=((0.021)*cj5*r01);
IkReal x418=(sj2*x392);
IkReal x419=(sj2*x393);
IkReal x420=(cj2*x393);
IkReal x421=(cj2*x392);
evalcond[0]=((((-1.0)*x420))+x397+(((-1.0)*cj5*x411)));
evalcond[1]=(((cj4*r22))+(((-1.0)*sj4*x414))+x421+(((-1.0)*sj4*sj5*x411)));
evalcond[2]=((((-1.0)*r01*x394))+((r00*x399))+x392+(((-1.0)*x398*x408))+((r10*x409)));
evalcond[3]=(((r10*x399))+(((-1.0)*x394*x408))+((r01*x398))+x419+(((-1.0)*x405*x409)));
evalcond[4]=((-0.26630543)+(((0.0137)*x421))+(((-0.021)*x414))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+pz+(((-0.224)*cj2))+(((-0.24475)*x420))+(((-0.04225)*x397)));
evalcond[5]=(((x407*x409))+((r00*sj4*x394))+(((-1.0)*x402*x403))+x393+(((-1.0)*x404*x412))+((x399*x406))+((x398*x410)));
evalcond[6]=(((sj0*x402))+(((-1.0)*x403*x404))+(((-1.0)*x406*x409))+((x394*x410))+((x399*x407))+(((-1.0)*sj4*x398*x405))+(((-1.0)*x418)));
evalcond[7]=((((-1.0)*px*x403))+((x395*x398))+((x396*x398))+((x409*x413))+(((0.021)*r01*x399))+(((-1.0)*x399*x400))+((x394*x416))+((x394*x401))+(((-1.0)*py*x412))+(((0.0137)*x393))+(((-1.0)*x409*x415))+(((0.24475)*x392)));
evalcond[8]=((-0.00025116)+(((-0.0137)*x418))+(((0.224)*sj2))+(((0.24475)*x419))+(((-0.021)*r01*x409))+((x394*x395))+((x394*x396))+(((-1.0)*x399*x415))+(((-1.0)*x398*x401))+(((-1.0)*x398*x416))+((px*sj0))+((x399*x413))+((x400*x409))+(((-1.0)*py*x403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x422=((1.0)*cj5);
CheckValue<IkReal> x423=IKPowWithIntegerCheck(cj2,-1);
if(!x423.valid){
continue;
}
if( IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x422))+(((-1.0)*cj0*r00*x422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x423.value)*((((r21*sj5))+(((-1.0)*r20*x422)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x422))+(((-1.0)*cj0*r00*x422))))+IKsqr(((x423.value)*((((r21*sj5))+(((-1.0)*r20*x422))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x422))+(((-1.0)*cj0*r00*x422))), ((x423.value)*((((r21*sj5))+(((-1.0)*r20*x422))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x424=IKsin(j3);
IkReal x425=IKcos(j3);
IkReal x426=(cj0*sj5);
IkReal x427=((0.04225)*r11);
IkReal x428=((0.021)*r10);
IkReal x429=(r21*sj5);
IkReal x430=(sj0*sj5);
IkReal x431=(cj0*cj5);
IkReal x432=((0.04225)*r00);
IkReal x433=((0.04225)*r01);
IkReal x434=(cj4*r02);
IkReal x435=((1.0)*cj0);
IkReal x436=(cj4*r12);
IkReal x437=((1.0)*r00);
IkReal x438=(r01*sj4);
IkReal x439=(r11*sj4);
IkReal x440=((1.0)*r11);
IkReal x441=(cj5*sj0);
IkReal x442=(r10*sj4);
IkReal x443=((1.0)*r20);
IkReal x444=((1.0)*sj0);
IkReal x445=((0.021)*r11);
IkReal x446=(cj5*r21);
IkReal x447=((0.04225)*r10);
IkReal x448=((0.021)*r00);
IkReal x449=((0.021)*cj5*r01);
IkReal x450=(sj2*x424);
IkReal x451=(sj2*x425);
IkReal x452=(cj2*x425);
IkReal x453=(cj2*x424);
evalcond[0]=((((-1.0)*x452))+(((-1.0)*cj5*x443))+x429);
evalcond[1]=((((-1.0)*sj4*x446))+((cj4*r22))+x453+(((-1.0)*sj4*sj5*x443)));
evalcond[2]=((((-1.0)*x430*x440))+(((-1.0)*r01*x426))+x424+((r00*x431))+((r10*x441)));
evalcond[3]=((((-1.0)*x437*x441))+x451+((r01*x430))+(((-1.0)*x426*x440))+((r10*x431)));
evalcond[4]=((-0.26630543)+(((-0.021)*x446))+(((-0.04225)*x429))+(((0.0137)*x453))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+pz+(((-0.224)*cj2))+(((-0.24475)*x452)));
evalcond[5]=(((x439*x441))+(((-1.0)*x434*x435))+(((-1.0)*x436*x444))+x425+((x430*x442))+((x431*x438))+((r00*sj4*x426)));
evalcond[6]=(((sj0*x434))+(((-1.0)*x435*x436))+((x426*x442))+(((-1.0)*x450))+(((-1.0)*sj4*x430*x437))+((x431*x439))+(((-1.0)*x438*x441)));
evalcond[7]=((((0.0137)*x425))+((x428*x430))+(((-1.0)*x431*x432))+((x426*x433))+((x426*x448))+(((0.021)*r01*x431))+((x441*x445))+(((-1.0)*py*x444))+(((-1.0)*x441*x447))+((x427*x430))+(((0.24475)*x424))+(((-1.0)*px*x435)));
evalcond[8]=((-0.00025116)+(((-1.0)*x430*x433))+(((-1.0)*x430*x448))+((x426*x427))+((x426*x428))+(((0.224)*sj2))+(((-0.021)*r01*x441))+(((-0.0137)*x450))+(((-1.0)*x431*x447))+((x431*x445))+(((-1.0)*py*x435))+(((0.24475)*x451))+((px*sj0))+((x432*x441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x454 = IKatan2WithCheck(IkReal((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))),(((r21*sj5))+(((-1.0)*cj5*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x454.valid){
continue;
}
CheckValue<IkReal> x455=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x455.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x454.value)+(((1.5707963267949)*(x455.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x456=IKsin(j3);
IkReal x457=IKcos(j3);
IkReal x458=(cj0*sj5);
IkReal x459=((0.04225)*r11);
IkReal x460=((0.021)*r10);
IkReal x461=(r21*sj5);
IkReal x462=(sj0*sj5);
IkReal x463=(cj0*cj5);
IkReal x464=((0.04225)*r00);
IkReal x465=((0.04225)*r01);
IkReal x466=(cj4*r02);
IkReal x467=((1.0)*cj0);
IkReal x468=(cj4*r12);
IkReal x469=((1.0)*r00);
IkReal x470=(r01*sj4);
IkReal x471=(r11*sj4);
IkReal x472=((1.0)*r11);
IkReal x473=(cj5*sj0);
IkReal x474=(r10*sj4);
IkReal x475=((1.0)*r20);
IkReal x476=((1.0)*sj0);
IkReal x477=((0.021)*r11);
IkReal x478=(cj5*r21);
IkReal x479=((0.04225)*r10);
IkReal x480=((0.021)*r00);
IkReal x481=((0.021)*cj5*r01);
IkReal x482=(sj2*x456);
IkReal x483=(sj2*x457);
IkReal x484=(cj2*x457);
IkReal x485=(cj2*x456);
evalcond[0]=((((-1.0)*cj5*x475))+(((-1.0)*x484))+x461);
evalcond[1]=(((cj4*r22))+x485+(((-1.0)*sj4*sj5*x475))+(((-1.0)*sj4*x478)));
evalcond[2]=((((-1.0)*x462*x472))+((r10*x473))+x456+(((-1.0)*r01*x458))+((r00*x463)));
evalcond[3]=((((-1.0)*x469*x473))+x483+(((-1.0)*x458*x472))+((r01*x462))+((r10*x463)));
evalcond[4]=((-0.26630543)+(((0.0137)*x485))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+(((-0.04225)*x461))+pz+(((-0.224)*cj2))+(((-0.021)*x478))+(((-0.24475)*x484)));
evalcond[5]=((((-1.0)*x466*x467))+((x471*x473))+((x462*x474))+(((-1.0)*x468*x476))+((x463*x470))+x457+((r00*sj4*x458)));
evalcond[6]=(((x463*x471))+(((-1.0)*x482))+(((-1.0)*sj4*x462*x469))+((sj0*x466))+((x458*x474))+(((-1.0)*x470*x473))+(((-1.0)*x467*x468)));
evalcond[7]=(((x458*x480))+((x473*x477))+(((-1.0)*x463*x464))+(((0.0137)*x457))+(((-1.0)*x473*x479))+(((-1.0)*py*x476))+((x460*x462))+(((0.24475)*x456))+(((-1.0)*px*x467))+((x459*x462))+(((0.021)*r01*x463))+((x458*x465)));
evalcond[8]=((-0.00025116)+(((-0.0137)*x482))+(((0.224)*sj2))+(((-1.0)*x462*x465))+((x463*x477))+(((0.24475)*x483))+(((-1.0)*py*x467))+((x464*x473))+((px*sj0))+((x458*x459))+(((-0.021)*r01*x473))+((x458*x460))+(((-1.0)*x463*x479))+(((-1.0)*x462*x480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x486=((1.0)*sj0);
IkReal x487=((1.0)*cj0*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj5*x487))+(((-1.0)*cj5*r01*x487))+(((-1.0)*cj4*cj5*r11*x486))+(((-1.0)*cj0*r02*sj4))+(((-1.0)*cj4*r10*sj5*x486))+(((-1.0)*r12*sj4*x486)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x488=(cj0*cj4);
IkReal x489=(cj4*sj5);
IkReal x490=((1.0)*sj0);
IkReal x491=(cj4*cj5);
if( IKabs((((r20*x489))+((r22*sj4))+((r21*x491)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*sj4*x490))+((cj0*r12*sj4))+(((-1.0)*r00*x489*x490))+((r10*sj5*x488))+(((-1.0)*r01*x490*x491))+((cj5*r11*x488)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x489))+((r22*sj4))+((r21*x491))))+IKsqr(((((-1.0)*r02*sj4*x490))+((cj0*r12*sj4))+(((-1.0)*r00*x489*x490))+((r10*sj5*x488))+(((-1.0)*r01*x490*x491))+((cj5*r11*x488))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x489))+((r22*sj4))+((r21*x491))), ((((-1.0)*r02*sj4*x490))+((cj0*r12*sj4))+(((-1.0)*r00*x489*x490))+((r10*sj5*x488))+(((-1.0)*r01*x490*x491))+((cj5*r11*x488))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x492=(cj4*cj5);
IkReal x493=(cj4*sj5);
IkReal x494=((1.0)*cj0);
evalcond[0]=(((r22*sj4))+(((-1.0)*(IKsin(j2))))+((r21*x492))+((r20*x493)));
evalcond[1]=(((r02*sj0*sj4))+(((-1.0)*r12*sj4*x494))+((r01*sj0*x492))+(IKcos(j2))+((r00*sj0*x493))+(((-1.0)*r10*x493*x494))+(((-1.0)*r11*x492*x494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x495=((1.0)*r21);
j3eval[0]=cj2;
j3eval[1]=((IKabs((((cj4*r22))+(((-1.0)*cj5*sj4*x495))+(((-1.0)*r20*sj4*sj5)))))+(IKabs((((cj5*r20))+(((-1.0)*sj5*x495))))));
j3eval[2]=IKsign(cj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x496=((1.0)*cj0);
IkReal x497=(r21*sj5);
IkReal x498=(sj0*sj4);
IkReal x499=(cj4*cj5);
IkReal x500=((1.0)*sj5);
IkReal x501=(cj4*sj0);
IkReal x502=(cj5*r21);
IkReal x503=(r00*sj5);
IkReal x504=(cj5*r20);
IkReal x505=(cj4*sj5);
IkReal x506=(r01*x499);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x505))+((r22*sj4))+((r21*x499)));
evalcond[2]=(x497+(((-1.0)*x504)));
evalcond[3]=(((cj4*r22))+(((-1.0)*sj4*x502))+(((-1.0)*r20*sj4*x500)));
evalcond[4]=((((-1.0)*r12*sj4*x496))+((r02*x498))+(((-1.0)*r11*x496*x499))+((sj0*x506))+((x501*x503))+(((-1.0)*r10*x496*x505)));
evalcond[5]=((((-1.0)*r12*x498))+(((-1.0)*r02*sj4*x496))+(((-1.0)*x496*x506))+(((-1.0)*r11*sj0*x499))+(((-1.0)*r10*x500*x501))+(((-1.0)*cj4*x496*x503)));
evalcond[6]=((0.26630543)+(((-0.021)*r20*sj5))+pz+(((-0.021)*x502))+(((-0.04225)*x497))+(((0.04225)*x504)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x507=(r11*sj5);
IkReal x508=(cj5*sj0);
IkReal x509=((1.0)*sj0);
IkReal x510=(r01*sj5);
IkReal x511=(cj0*cj5);
if( IKabs((((r10*x508))+(((-1.0)*x507*x509))+(((-1.0)*cj0*x510))+((r00*x511)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x511))+((r00*x508))+((cj0*x507))+(((-1.0)*x509*x510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x508))+(((-1.0)*x507*x509))+(((-1.0)*cj0*x510))+((r00*x511))))+IKsqr(((((-1.0)*r10*x511))+((r00*x508))+((cj0*x507))+(((-1.0)*x509*x510))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x508))+(((-1.0)*x507*x509))+(((-1.0)*cj0*x510))+((r00*x511))), ((((-1.0)*r10*x511))+((r00*x508))+((cj0*x507))+(((-1.0)*x509*x510))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x512=IKcos(j3);
IkReal x513=IKsin(j3);
IkReal x514=(cj5*r01);
IkReal x515=(cj0*sj4);
IkReal x516=(cj0*sj5);
IkReal x517=((0.04225)*r11);
IkReal x518=((0.021)*r10);
IkReal x519=(r00*sj0);
IkReal x520=((0.04225)*cj5);
IkReal x521=((0.021)*sj0);
IkReal x522=(sj0*sj5);
IkReal x523=((0.04225)*r01);
IkReal x524=((1.0)*sj4);
IkReal x525=((1.0)*r11);
IkReal x526=(cj0*r00);
IkReal x527=(cj4*sj0);
IkReal x528=(cj5*r11);
IkReal x529=((1.0)*py);
IkReal x530=((0.021)*cj0);
IkReal x531=(cj0*r10);
IkReal x532=(r10*sj0);
IkReal x533=((1.0)*x513);
IkReal x534=((1.0)*cj0*cj4);
evalcond[0]=(((cj5*x531))+x512+(((-1.0)*x516*x525))+(((-1.0)*cj5*x519))+((r01*x522)));
evalcond[1]=((((-1.0)*r01*x516))+((cj5*x532))+((cj5*x526))+(((-1.0)*x533))+(((-1.0)*x522*x525)));
evalcond[2]=(((r10*sj4*x522))+((x514*x515))+(((-1.0)*x512))+(((-1.0)*r02*x534))+(((-1.0)*r12*x527))+((sj0*sj4*x528))+((r00*sj5*x515)));
evalcond[3]=((((-1.0)*sj5*x519*x524))+((r02*x527))+(((-1.0)*sj0*x514*x524))+((x515*x528))+(((-1.0)*x533))+((r10*sj5*x515))+(((-1.0)*r12*x534)));
evalcond[4]=((0.22374884)+((x519*x520))+(((-1.0)*x520*x531))+(((-0.0137)*x513))+(((-0.021)*sj5*x519))+((x516*x517))+((x516*x518))+(((-1.0)*cj0*x529))+((px*sj0))+(((-1.0)*x522*x523))+((x528*x530))+(((0.24475)*x512))+(((-1.0)*x514*x521)));
evalcond[5]=((((-1.0)*sj0*x529))+(((0.021)*r00*x516))+(((-1.0)*x520*x526))+(((-1.0)*x520*x532))+(((-0.0137)*x512))+((x516*x523))+((x517*x522))+((x518*x522))+((x521*x528))+((x514*x530))+(((-1.0)*cj0*px))+(((-0.24475)*x513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x535=((1.0)*cj0);
IkReal x536=(r21*sj5);
IkReal x537=(sj0*sj4);
IkReal x538=(cj4*cj5);
IkReal x539=((1.0)*sj5);
IkReal x540=(cj4*sj0);
IkReal x541=(cj5*r21);
IkReal x542=(r00*sj5);
IkReal x543=(cj5*r20);
IkReal x544=(cj4*sj5);
IkReal x545=(r01*x538);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x544))+((r22*sj4))+((r21*x538)));
evalcond[2]=((((-1.0)*x543))+x536);
evalcond[3]=(((cj4*r22))+(((-1.0)*sj4*x541))+(((-1.0)*r20*sj4*x539)));
evalcond[4]=((((-1.0)*r11*x535*x538))+((r02*x537))+((sj0*x545))+(((-1.0)*r10*x535*x544))+((x540*x542))+(((-1.0)*r12*sj4*x535)));
evalcond[5]=((((-1.0)*r11*sj0*x538))+(((-1.0)*cj4*x535*x542))+(((-1.0)*r12*x537))+(((-1.0)*x535*x545))+(((-1.0)*r10*x539*x540))+(((-1.0)*r02*sj4*x535)));
evalcond[6]=((0.26630543)+(((0.04225)*x543))+(((-0.021)*x541))+(((-0.021)*r20*sj5))+pz+(((-0.04225)*x536)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x546=((1.0)*sj0);
IkReal x547=(r11*sj5);
IkReal x548=(cj5*r00);
IkReal x549=(cj5*r10);
IkReal x550=(r01*sj5);
IkReal x551=((1.0)*cj0);
if( IKabs((((sj0*x549))+((cj0*x548))+(((-1.0)*x550*x551))+(((-1.0)*x546*x547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*x549))+(((-1.0)*x547*x551))+(((-1.0)*x546*x548))+((sj0*x550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x549))+((cj0*x548))+(((-1.0)*x550*x551))+(((-1.0)*x546*x547))))+IKsqr((((cj0*x549))+(((-1.0)*x547*x551))+(((-1.0)*x546*x548))+((sj0*x550))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj0*x549))+((cj0*x548))+(((-1.0)*x550*x551))+(((-1.0)*x546*x547))), (((cj0*x549))+(((-1.0)*x547*x551))+(((-1.0)*x546*x548))+((sj0*x550))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x552=IKsin(j3);
IkReal x553=IKcos(j3);
IkReal x554=(cj5*sj0);
IkReal x555=((1.0)*sj4);
IkReal x556=(cj0*sj5);
IkReal x557=((0.04225)*r11);
IkReal x558=((0.021)*r10);
IkReal x559=((0.04225)*r00);
IkReal x560=((0.021)*r00);
IkReal x561=((0.021)*r01);
IkReal x562=(sj0*sj5);
IkReal x563=((0.04225)*r01);
IkReal x564=(r10*sj4);
IkReal x565=(cj0*cj5);
IkReal x566=((1.0)*r11);
IkReal x567=(cj4*sj0);
IkReal x568=(r11*sj4);
IkReal x569=((1.0)*py);
IkReal x570=((0.021)*r11);
IkReal x571=((0.04225)*r10);
IkReal x572=((1.0)*x553);
IkReal x573=((1.0)*cj0*cj4);
evalcond[0]=(((r01*x562))+(((-1.0)*x556*x566))+(((-1.0)*x572))+(((-1.0)*r00*x554))+((r10*x565)));
evalcond[1]=((((-1.0)*x552))+((r00*x565))+((r10*x554))+(((-1.0)*x562*x566))+(((-1.0)*r01*x556)));
evalcond[2]=(((x565*x568))+((x556*x564))+(((-1.0)*r12*x573))+(((-1.0)*r01*x554*x555))+x552+((r02*x567))+(((-1.0)*r00*x555*x562)));
evalcond[3]=(((r00*sj4*x556))+((r01*sj4*x565))+((x562*x564))+(((-1.0)*x572))+(((-1.0)*r02*x573))+(((-1.0)*r12*x567))+((x554*x568)));
evalcond[4]=((-0.22425116)+(((-1.0)*cj0*x569))+(((0.0137)*x552))+(((-0.24475)*x553))+((x554*x559))+(((-1.0)*x565*x571))+(((-1.0)*x562*x563))+((x565*x570))+(((-1.0)*x560*x562))+(((-1.0)*x554*x561))+((px*sj0))+((x556*x558))+((x556*x557)));
evalcond[5]=(((x558*x562))+(((-0.0137)*x553))+((x554*x570))+((x556*x563))+((x556*x560))+(((-1.0)*sj0*x569))+(((-0.24475)*x552))+((x561*x565))+(((-1.0)*x559*x565))+(((-1.0)*x554*x571))+((x557*x562))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x574=((1.0)*cj0);
IkReal x575=(cj0*sj5);
IkReal x576=(cj5*sj0);
IkReal x577=(sj0*sj4);
IkReal x578=(cj5*r11);
IkReal x579=(r00*sj5);
IkReal x580=(cj4*sj0);
IkReal x581=(r10*sj5);
IkReal x582=(cj4*cj5*r01);
IkReal x583=(r01*sj0*sj5);
IkReal x584=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*r00*x576))+(((-1.0)*r11*sj5*x574))+x583+x584);
evalcond[3]=((1.0)+((x579*x580))+(((-1.0)*cj4*x574*x578))+(((-1.0)*r12*sj4*x574))+((r02*x577))+((cj4*r01*x576))+(((-1.0)*cj4*x574*x581)));
evalcond[4]=(((r02*x580))+(((-1.0)*cj4*r12*x574))+(((-1.0)*x577*x579))+((r10*sj4*x575))+((cj0*sj4*x578))+(((-1.0)*r01*sj4*x576)));
evalcond[5]=((((-1.0)*cj4*x574*x579))+(((-1.0)*x580*x581))+(((-1.0)*r02*sj4*x574))+(((-1.0)*r12*x577))+(((-1.0)*cj4*r11*x576))+(((-1.0)*x574*x582)));
evalcond[6]=((-0.00025116)+(((0.021)*cj0*x578))+(((0.021)*r10*x575))+(((-0.04225)*x583))+(((-0.04225)*x584))+(((-1.0)*py*x574))+(((0.04225)*r11*x575))+(((-0.021)*sj0*x579))+((px*sj0))+(((0.04225)*r00*x576))+(((-0.021)*r01*x576)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x585=((1.0)*sj4);
if( IKabs((((cj4*r22))+(((-1.0)*cj5*r21*x585))+(((-1.0)*r20*sj5*x585)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r22))+(((-1.0)*cj5*r21*x585))+(((-1.0)*r20*sj5*x585))))+IKsqr((((cj5*r20))+(((-1.0)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj4*r22))+(((-1.0)*cj5*r21*x585))+(((-1.0)*r20*sj5*x585))), (((cj5*r20))+(((-1.0)*r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x586=IKcos(j3);
IkReal x587=IKsin(j3);
IkReal x588=(cj0*r01);
IkReal x589=((0.021)*cj5);
IkReal x590=(r21*sj5);
IkReal x591=((1.0)*cj0);
IkReal x592=((0.04225)*sj5);
IkReal x593=(cj5*sj4);
IkReal x594=((1.0)*sj5);
IkReal x595=(r11*sj0);
IkReal x596=((1.0)*sj0);
IkReal x597=(cj5*r20);
IkReal x598=((0.021)*sj5);
IkReal x599=(r10*sj0);
IkReal x600=(cj0*r00);
IkReal x601=(sj4*sj5);
IkReal x602=((1.0)*x587);
IkReal x603=(cj5*x600);
evalcond[0]=((((-1.0)*x597))+x586+x590);
evalcond[1]=(((cj4*r22))+(((-1.0)*r20*sj4*x594))+(((-1.0)*r21*x593))+(((-1.0)*x602)));
evalcond[2]=((((-1.0)*x588*x594))+(((-1.0)*x594*x595))+x603+(((-1.0)*x602))+((cj5*x599)));
evalcond[3]=((0.49030543)+(((-1.0)*r20*x598))+(((-1.0)*r21*x589))+pz+(((0.24475)*x586))+(((-0.0137)*x587))+(((0.04225)*x597))+(((-0.04225)*x590)));
evalcond[4]=((((-1.0)*x586))+((x600*x601))+((x599*x601))+(((-1.0)*cj4*r12*x596))+(((-1.0)*cj4*r02*x591))+((x593*x595))+((x588*x593)));
evalcond[5]=((((-0.24475)*x587))+((x598*x599))+(((-1.0)*px*x591))+((x588*x589))+(((-1.0)*py*x596))+(((-0.04225)*x603))+(((-0.04225)*cj5*x599))+(((-0.0137)*x586))+((x589*x595))+((x588*x592))+((x598*x600))+((x592*x595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x604=((1.0)*cj0);
IkReal x605=(cj0*sj5);
IkReal x606=(cj5*sj0);
IkReal x607=(sj0*sj4);
IkReal x608=(cj5*r11);
IkReal x609=(r00*sj5);
IkReal x610=(cj4*sj0);
IkReal x611=(r10*sj5);
IkReal x612=(cj4*cj5*r01);
IkReal x613=(r01*sj0*sj5);
IkReal x614=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=(x614+x613+(((-1.0)*r11*sj5*x604))+(((-1.0)*r00*x606)));
evalcond[3]=((-1.0)+(((-1.0)*r12*sj4*x604))+(((-1.0)*cj4*x604*x608))+((cj4*r01*x606))+(((-1.0)*cj4*x604*x611))+((r02*x607))+((x609*x610)));
evalcond[4]=((((-1.0)*x607*x609))+((cj0*sj4*x608))+((r10*sj4*x605))+((r02*x610))+(((-1.0)*r01*sj4*x606))+(((-1.0)*cj4*r12*x604)));
evalcond[5]=((((-1.0)*cj4*r11*x606))+(((-1.0)*cj4*x604*x609))+(((-1.0)*r12*x607))+(((-1.0)*r02*sj4*x604))+(((-1.0)*x604*x612))+(((-1.0)*x610*x611)));
evalcond[6]=((-0.00025116)+(((0.04225)*r00*x606))+(((0.021)*r10*x605))+(((-0.04225)*x614))+(((-0.04225)*x613))+(((0.04225)*r11*x605))+(((0.021)*cj0*x608))+((px*sj0))+(((-1.0)*py*x604))+(((-0.021)*r01*x606))+(((-0.021)*sj0*x609)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))+IKsqr((((r21*sj5))+(((-1.0)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))), (((r21*sj5))+(((-1.0)*cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x615=IKsin(j3);
IkReal x616=IKcos(j3);
IkReal x617=(cj0*r01);
IkReal x618=((0.021)*cj5);
IkReal x619=(r21*sj5);
IkReal x620=((1.0)*cj0);
IkReal x621=((0.04225)*sj5);
IkReal x622=(cj5*sj4);
IkReal x623=((1.0)*sj5);
IkReal x624=(r11*sj0);
IkReal x625=((1.0)*sj0);
IkReal x626=(cj5*r20);
IkReal x627=((0.021)*sj5);
IkReal x628=(r10*sj0);
IkReal x629=(cj0*r00);
IkReal x630=(sj4*sj5);
IkReal x631=((1.0)*x616);
IkReal x632=(cj5*x629);
evalcond[0]=((((-1.0)*x631))+x619+(((-1.0)*x626)));
evalcond[1]=(((cj4*r22))+(((-1.0)*r20*sj4*x623))+(((-1.0)*r21*x622))+x615);
evalcond[2]=((((-1.0)*x623*x624))+((cj5*x628))+(((-1.0)*x615))+(((-1.0)*x617*x623))+x632);
evalcond[3]=((0.04230543)+(((-0.24475)*x616))+(((-1.0)*r21*x618))+(((-0.04225)*x619))+(((0.04225)*x626))+(((-1.0)*r20*x627))+pz+(((0.0137)*x615)));
evalcond[4]=(((x617*x622))+((x628*x630))+((x629*x630))+(((-1.0)*x631))+(((-1.0)*cj4*r12*x625))+(((-1.0)*cj4*r02*x620))+((x622*x624)));
evalcond[5]=((((-0.24475)*x615))+((x617*x621))+((x618*x624))+(((-0.0137)*x616))+((x617*x618))+(((-1.0)*px*x620))+((x621*x624))+((x627*x629))+((x627*x628))+(((-0.04225)*cj5*x628))+(((-0.04225)*x632))+(((-1.0)*py*x625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x633=((1.0)*sj4);
CheckValue<IkReal> x634=IKPowWithIntegerCheck(cj2,-1);
if(!x634.valid){
continue;
}
CheckValue<IkReal> x635=IKPowWithIntegerCheck(sj2,-1);
if(!x635.valid){
continue;
}
if( IKabs(((x634.value)*((((cj4*r22))+(((-1.0)*cj5*r21*x633))+(((-1.0)*r20*sj5*x633)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x635.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x634.value)*((((cj4*r22))+(((-1.0)*cj5*r21*x633))+(((-1.0)*r20*sj5*x633))))))+IKsqr(((x635.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x634.value)*((((cj4*r22))+(((-1.0)*cj5*r21*x633))+(((-1.0)*r20*sj5*x633))))), ((x635.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x636=IKcos(j3);
IkReal x637=IKsin(j3);
IkReal x638=(cj0*sj5);
IkReal x639=((0.04225)*r11);
IkReal x640=((0.021)*r10);
IkReal x641=(r21*sj5);
IkReal x642=(sj0*sj5);
IkReal x643=(cj0*cj5);
IkReal x644=((0.04225)*r00);
IkReal x645=((0.04225)*r01);
IkReal x646=(cj4*r02);
IkReal x647=((1.0)*cj0);
IkReal x648=(cj4*r12);
IkReal x649=((1.0)*r00);
IkReal x650=(r01*sj4);
IkReal x651=(r11*sj4);
IkReal x652=((1.0)*r11);
IkReal x653=(cj5*sj0);
IkReal x654=(r10*sj4);
IkReal x655=((1.0)*r20);
IkReal x656=((1.0)*sj0);
IkReal x657=((0.021)*r11);
IkReal x658=(cj5*r21);
IkReal x659=((0.04225)*r10);
IkReal x660=((0.021)*r00);
IkReal x661=((0.021)*cj5*r01);
IkReal x662=(cj2*x637);
IkReal x663=(sj2*x636);
IkReal x664=((1.0)*x637);
IkReal x665=(cj2*x636);
evalcond[0]=(x641+x665+(((-1.0)*cj5*x655)));
evalcond[1]=((((-1.0)*sj4*sj5*x655))+((cj4*r22))+(((-1.0)*x662))+(((-1.0)*sj4*x658)));
evalcond[2]=(((r10*x643))+x663+(((-1.0)*x649*x653))+((r01*x642))+(((-1.0)*x638*x652)));
evalcond[3]=((((-1.0)*x642*x652))+(((-1.0)*x664))+((r10*x653))+((r00*x643))+(((-1.0)*r01*x638)));
evalcond[4]=((0.26630543)+(((0.224)*cj2))+(((0.24475)*x665))+(((-0.04225)*x641))+(((-0.021)*x658))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+(((-0.0137)*x662))+pz);
evalcond[5]=(((r00*sj4*x638))+((x643*x650))+(((-1.0)*x646*x647))+((x651*x653))+((x642*x654))+(((-1.0)*x636))+(((-1.0)*x648*x656)));
evalcond[6]=(((sj0*x646))+(((-1.0)*x647*x648))+(((-1.0)*sj2*x664))+(((-1.0)*x650*x653))+((x643*x651))+(((-1.0)*sj4*x642*x649))+((x638*x654)));
evalcond[7]=(((x638*x645))+((x639*x642))+(((-1.0)*px*x647))+(((0.021)*r01*x643))+((x653*x657))+(((-0.24475)*x637))+((x640*x642))+(((-1.0)*x643*x644))+((x638*x660))+(((-1.0)*py*x656))+(((-0.0137)*x636))+(((-1.0)*x653*x659)));
evalcond[8]=((-0.00025116)+(((-1.0)*x642*x645))+((x638*x640))+(((0.224)*sj2))+(((-1.0)*x642*x660))+(((0.24475)*x663))+((x644*x653))+((x643*x657))+((x638*x639))+(((-0.0137)*sj2*x637))+(((-1.0)*x643*x659))+(((-0.021)*r01*x653))+((px*sj0))+(((-1.0)*py*x647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x666=((1.0)*sj5);
CheckValue<IkReal> x667=IKPowWithIntegerCheck(cj2,-1);
if(!x667.valid){
continue;
}
if( IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x666))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x667.value)*((((cj5*r20))+(((-1.0)*r21*x666)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x666))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x666))))+IKsqr(((x667.value)*((((cj5*r20))+(((-1.0)*r21*x666))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x666))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x666))), ((x667.value)*((((cj5*r20))+(((-1.0)*r21*x666))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x668=IKcos(j3);
IkReal x669=IKsin(j3);
IkReal x670=(cj0*sj5);
IkReal x671=((0.04225)*r11);
IkReal x672=((0.021)*r10);
IkReal x673=(r21*sj5);
IkReal x674=(sj0*sj5);
IkReal x675=(cj0*cj5);
IkReal x676=((0.04225)*r00);
IkReal x677=((0.04225)*r01);
IkReal x678=(cj4*r02);
IkReal x679=((1.0)*cj0);
IkReal x680=(cj4*r12);
IkReal x681=((1.0)*r00);
IkReal x682=(r01*sj4);
IkReal x683=(r11*sj4);
IkReal x684=((1.0)*r11);
IkReal x685=(cj5*sj0);
IkReal x686=(r10*sj4);
IkReal x687=((1.0)*r20);
IkReal x688=((1.0)*sj0);
IkReal x689=((0.021)*r11);
IkReal x690=(cj5*r21);
IkReal x691=((0.04225)*r10);
IkReal x692=((0.021)*r00);
IkReal x693=((0.021)*cj5*r01);
IkReal x694=(cj2*x669);
IkReal x695=(sj2*x668);
IkReal x696=((1.0)*x669);
IkReal x697=(cj2*x668);
evalcond[0]=((((-1.0)*cj5*x687))+x673+x697);
evalcond[1]=(((cj4*r22))+(((-1.0)*sj4*sj5*x687))+(((-1.0)*sj4*x690))+(((-1.0)*x694)));
evalcond[2]=(((r10*x675))+(((-1.0)*x681*x685))+(((-1.0)*x670*x684))+((r01*x674))+x695);
evalcond[3]=(((r00*x675))+(((-1.0)*r01*x670))+((r10*x685))+(((-1.0)*x696))+(((-1.0)*x674*x684)));
evalcond[4]=((0.26630543)+(((-0.021)*x690))+(((-0.0137)*x694))+(((0.224)*cj2))+(((-0.021)*r20*sj5))+(((0.24475)*x697))+(((0.04225)*cj5*r20))+pz+(((-0.04225)*x673)));
evalcond[5]=((((-1.0)*x678*x679))+(((-1.0)*x680*x688))+((r00*sj4*x670))+((x683*x685))+((x674*x686))+(((-1.0)*x668))+((x675*x682)));
evalcond[6]=((((-1.0)*sj4*x674*x681))+(((-1.0)*sj2*x696))+(((-1.0)*x679*x680))+((sj0*x678))+((x670*x686))+((x675*x683))+(((-1.0)*x682*x685)));
evalcond[7]=(((x672*x674))+(((-0.24475)*x669))+(((-1.0)*x675*x676))+((x671*x674))+((x685*x689))+((x670*x677))+(((-0.0137)*x668))+(((-1.0)*x685*x691))+(((-1.0)*px*x679))+(((0.021)*r01*x675))+(((-1.0)*py*x688))+((x670*x692)));
evalcond[8]=((-0.00025116)+(((0.224)*sj2))+((x670*x671))+((x670*x672))+((x676*x685))+(((-1.0)*py*x679))+(((0.24475)*x695))+(((-1.0)*x675*x691))+(((-1.0)*x674*x692))+((px*sj0))+(((-1.0)*x674*x677))+((x675*x689))+(((-0.021)*r01*x685))+(((-0.0137)*sj2*x669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x698=((1.0)*sj4);
CheckValue<IkReal> x699 = IKatan2WithCheck(IkReal((((cj4*r22))+(((-1.0)*r20*sj5*x698))+(((-1.0)*cj5*r21*x698)))),(((cj5*r20))+(((-1.0)*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x699.valid){
continue;
}
CheckValue<IkReal> x700=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x700.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x699.value)+(((1.5707963267949)*(x700.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x701=IKcos(j3);
IkReal x702=IKsin(j3);
IkReal x703=(cj0*sj5);
IkReal x704=((0.04225)*r11);
IkReal x705=((0.021)*r10);
IkReal x706=(r21*sj5);
IkReal x707=(sj0*sj5);
IkReal x708=(cj0*cj5);
IkReal x709=((0.04225)*r00);
IkReal x710=((0.04225)*r01);
IkReal x711=(cj4*r02);
IkReal x712=((1.0)*cj0);
IkReal x713=(cj4*r12);
IkReal x714=((1.0)*r00);
IkReal x715=(r01*sj4);
IkReal x716=(r11*sj4);
IkReal x717=((1.0)*r11);
IkReal x718=(cj5*sj0);
IkReal x719=(r10*sj4);
IkReal x720=((1.0)*r20);
IkReal x721=((1.0)*sj0);
IkReal x722=((0.021)*r11);
IkReal x723=(cj5*r21);
IkReal x724=((0.04225)*r10);
IkReal x725=((0.021)*r00);
IkReal x726=((0.021)*cj5*r01);
IkReal x727=(cj2*x702);
IkReal x728=(sj2*x701);
IkReal x729=((1.0)*x702);
IkReal x730=(cj2*x701);
evalcond[0]=((((-1.0)*cj5*x720))+x706+x730);
evalcond[1]=(((cj4*r22))+(((-1.0)*x727))+(((-1.0)*sj4*x723))+(((-1.0)*sj4*sj5*x720)));
evalcond[2]=((((-1.0)*x714*x718))+((r01*x707))+(((-1.0)*x703*x717))+x728+((r10*x708)));
evalcond[3]=((((-1.0)*x707*x717))+((r00*x708))+(((-1.0)*x729))+(((-1.0)*r01*x703))+((r10*x718)));
evalcond[4]=((0.26630543)+(((0.224)*cj2))+(((-0.04225)*x706))+(((-0.021)*x723))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+(((-0.0137)*x727))+(((0.24475)*x730))+pz);
evalcond[5]=((((-1.0)*x713*x721))+(((-1.0)*x711*x712))+((x707*x719))+(((-1.0)*x701))+((r00*sj4*x703))+((x716*x718))+((x708*x715)));
evalcond[6]=(((x703*x719))+(((-1.0)*sj4*x707*x714))+(((-1.0)*x715*x718))+((sj0*x711))+(((-1.0)*sj2*x729))+(((-1.0)*x712*x713))+((x708*x716)));
evalcond[7]=((((-0.24475)*x702))+(((-0.0137)*x701))+((x703*x710))+((x703*x725))+(((0.021)*r01*x708))+(((-1.0)*px*x712))+((x718*x722))+((x704*x707))+(((-1.0)*x708*x709))+(((-1.0)*py*x721))+(((-1.0)*x718*x724))+((x705*x707)));
evalcond[8]=((-0.00025116)+((x708*x722))+(((0.224)*sj2))+(((-0.021)*r01*x718))+(((-1.0)*x707*x710))+((x703*x704))+((x703*x705))+(((-0.0137)*sj2*x702))+((x709*x718))+(((0.24475)*x728))+((px*sj0))+(((-1.0)*x707*x725))+(((-1.0)*x708*x724))+(((-1.0)*py*x712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((-1.0)*r21*sj5))))+IKsqr((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((-1.0)*r21*sj5))), (((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x731=IKsin(j3);
IkReal x732=IKcos(j3);
IkReal x733=(r21*sj5);
IkReal x734=(cj5*r21);
IkReal x735=((1.0)*sj4);
IkReal x736=(cj5*r20);
IkReal x737=(r20*sj5);
evalcond[0]=((((-1.0)*x736))+x733+x731);
evalcond[1]=(((cj4*r22))+(((-1.0)*x735*x737))+(((-1.0)*x734*x735))+x732);
evalcond[2]=((((-0.04225)*x733))+(((-0.021)*x737))+(((-0.021)*x734))+(((0.04225)*x736))+(((0.24475)*x731))+pz+(((0.0137)*x732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x738=((1.0)*cj5);
IkReal x739=(cj0*sj5);
IkReal x740=(sj0*sj5);
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
j2eval[2]=((IKabs(((((-1.0)*r10*sj0*x738))+((r01*x739))+((r11*x740))+(((-1.0)*cj0*r00*x738)))))+(IKabs((((cj5*r00*sj0))+(((-1.0)*cj0*r10*x738))+(((-1.0)*r01*x740))+((r11*x739))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=cj3;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x741=(r21*sj5);
IkReal x742=(cj5*r20);
IkReal x743=(cj5*r21);
IkReal x744=((1.0)*sj4);
IkReal x745=(r20*sj5);
IkReal x746=(sj0*sj5);
IkReal x747=((1.0)*r11);
IkReal x748=(cj5*r00);
IkReal x749=(cj5*r10);
IkReal x750=(cj0*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r22*sj4))+((cj4*x745))+((cj4*x743)));
evalcond[2]=((1.0)+(((-1.0)*x742))+x741);
evalcond[3]=(((cj4*r22))+(((-1.0)*x744*x745))+(((-1.0)*x743*x744)));
evalcond[4]=((((-1.0)*sj0*x748))+(((-1.0)*x747*x750))+((r01*x746))+((cj0*x749)));
evalcond[5]=((((-1.0)*x746*x747))+((sj0*x749))+(((-1.0)*r01*x750))+((cj0*x748)));
evalcond[6]=((0.24475)+(((-0.04225)*x741))+(((0.04225)*x742))+pz+(((-0.021)*x745))+(((-0.021)*x743)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x751=(cj5*sj4);
IkReal x752=(cj4*sj0);
IkReal x753=((1.0)*r12);
IkReal x754=(cj0*cj4);
IkReal x755=((1.0)*sj0);
IkReal x756=(sj4*sj5);
if( IKabs((((cj0*r11*x751))+((r02*x752))+(((-1.0)*x753*x754))+((cj0*r10*x756))+(((-1.0)*r00*x755*x756))+(((-1.0)*r01*x751*x755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*r01*x751))+((r10*sj0*x756))+(((-1.0)*r02*x754))+((r11*sj0*x751))+(((-1.0)*x752*x753))+((cj0*r00*x756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*r11*x751))+((r02*x752))+(((-1.0)*x753*x754))+((cj0*r10*x756))+(((-1.0)*r00*x755*x756))+(((-1.0)*r01*x751*x755))))+IKsqr((((cj0*r01*x751))+((r10*sj0*x756))+(((-1.0)*r02*x754))+((r11*sj0*x751))+(((-1.0)*x752*x753))+((cj0*r00*x756))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj0*r11*x751))+((r02*x752))+(((-1.0)*x753*x754))+((cj0*r10*x756))+(((-1.0)*r00*x755*x756))+(((-1.0)*r01*x751*x755))), (((cj0*r01*x751))+((r10*sj0*x756))+(((-1.0)*r02*x754))+((r11*sj0*x751))+(((-1.0)*x752*x753))+((cj0*r00*x756))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x757=IKcos(j2);
IkReal x758=IKsin(j2);
IkReal x759=((1.0)*cj0);
IkReal x760=(cj0*sj5);
IkReal x761=((0.04225)*r11);
IkReal x762=((0.021)*r10);
IkReal x763=(cj5*sj0);
IkReal x764=((0.04225)*r00);
IkReal x765=(sj0*sj4);
IkReal x766=((0.021)*r01);
IkReal x767=(cj5*r11);
IkReal x768=(sj0*sj5);
IkReal x769=(cj4*r02);
IkReal x770=((0.04225)*r01);
IkReal x771=(cj4*r12);
IkReal x772=(r00*sj5);
IkReal x773=(cj0*cj5);
IkReal x774=(r01*sj4);
IkReal x775=(cj4*r10);
IkReal x776=((1.0)*sj0);
IkReal x777=((0.021)*r00);
IkReal x778=((0.04225)*r10);
IkReal x779=((1.0)*x758);
IkReal x780=(cj4*cj5*r01);
evalcond[0]=(((cj4*r00*x768))+((cj4*r01*x763))+(((-1.0)*r12*sj4*x759))+((r02*x765))+(((-1.0)*cj4*x759*x767))+x757+(((-1.0)*sj5*x759*x775)));
evalcond[1]=(((r00*sj4*x760))+((r10*sj5*x765))+((x773*x774))+((r11*sj4*x763))+(((-1.0)*x771*x776))+(((-1.0)*x757))+(((-1.0)*x759*x769)));
evalcond[2]=(((sj0*x769))+(((-1.0)*x763*x774))+((cj0*sj4*x767))+(((-1.0)*x759*x771))+(((-1.0)*x779))+(((-1.0)*x765*x772))+((r10*sj4*x760)));
evalcond[3]=((((-1.0)*r12*x765))+(((-1.0)*r02*sj4*x759))+(((-1.0)*x759*x780))+(((-1.0)*cj4*x759*x772))+(((-1.0)*cj4*r11*x763))+(((-1.0)*x768*x775))+(((-1.0)*x779)));
evalcond[4]=((-0.00025116)+(((-1.0)*x768*x770))+(((-1.0)*x768*x777))+(((-1.0)*x763*x766))+((x760*x762))+((x760*x761))+((x763*x764))+(((-1.0)*py*x759))+(((0.2103)*x758))+((px*sj0))+(((-1.0)*x773*x778))+(((0.021)*cj0*x767)));
evalcond[5]=((0.26630543)+(((0.021)*r11*x763))+(((-1.0)*px*x759))+(((-1.0)*x764*x773))+((x761*x768))+((x762*x768))+(((-1.0)*py*x776))+((x766*x773))+(((0.2103)*x757))+(((-1.0)*x763*x778))+((x760*x770))+((x760*x777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x781=(r21*sj5);
IkReal x782=(cj5*r20);
IkReal x783=(cj5*r21);
IkReal x784=((1.0)*sj4);
IkReal x785=(r20*sj5);
IkReal x786=(sj0*sj5);
IkReal x787=((1.0)*r11);
IkReal x788=(cj5*r00);
IkReal x789=(cj5*r10);
IkReal x790=(cj0*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r22*sj4))+((cj4*x785))+((cj4*x783)));
evalcond[2]=((-1.0)+x781+(((-1.0)*x782)));
evalcond[3]=(((cj4*r22))+(((-1.0)*x784*x785))+(((-1.0)*x783*x784)));
evalcond[4]=(((r01*x786))+(((-1.0)*sj0*x788))+(((-1.0)*x787*x790))+((cj0*x789)));
evalcond[5]=((((-1.0)*r01*x790))+((sj0*x789))+(((-1.0)*x786*x787))+((cj0*x788)));
evalcond[6]=((-0.24475)+pz+(((-0.04225)*x781))+(((0.04225)*x782))+(((-0.021)*x783))+(((-0.021)*x785)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x791=((1.0)*sj4);
IkReal x792=(sj0*sj4);
IkReal x793=(cj5*r01);
IkReal x794=(r00*sj5);
IkReal x795=(cj0*cj4);
IkReal x796=(r10*sj5);
IkReal x797=(cj0*cj5*r11);
IkReal x798=((1.0)*cj4*sj0);
if( IKabs(((((-1.0)*x791*x797))+((x792*x794))+((x792*x793))+(((-1.0)*cj0*x791*x796))+(((-1.0)*r02*x798))+((r12*x795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x794*x798))+((cj5*r11*x795))+(((-1.0)*x793*x798))+(((-1.0)*r02*sj0*x791))+((cj0*r12*sj4))+((x795*x796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x791*x797))+((x792*x794))+((x792*x793))+(((-1.0)*cj0*x791*x796))+(((-1.0)*r02*x798))+((r12*x795))))+IKsqr(((((-1.0)*x794*x798))+((cj5*r11*x795))+(((-1.0)*x793*x798))+(((-1.0)*r02*sj0*x791))+((cj0*r12*sj4))+((x795*x796))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x791*x797))+((x792*x794))+((x792*x793))+(((-1.0)*cj0*x791*x796))+(((-1.0)*r02*x798))+((r12*x795))), ((((-1.0)*x794*x798))+((cj5*r11*x795))+(((-1.0)*x793*x798))+(((-1.0)*r02*sj0*x791))+((cj0*r12*sj4))+((x795*x796))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x799=IKcos(j2);
IkReal x800=IKsin(j2);
IkReal x801=((1.0)*cj0);
IkReal x802=(cj0*sj5);
IkReal x803=((0.04225)*r11);
IkReal x804=((0.021)*r10);
IkReal x805=(cj5*sj0);
IkReal x806=((0.04225)*r00);
IkReal x807=((0.021)*r00);
IkReal x808=(sj0*sj4);
IkReal x809=((0.021)*r01);
IkReal x810=(cj5*r11);
IkReal x811=(sj0*sj5);
IkReal x812=(cj4*r02);
IkReal x813=((0.04225)*r01);
IkReal x814=(cj4*r12);
IkReal x815=(r00*sj5);
IkReal x816=(cj0*cj5);
IkReal x817=(r01*sj4);
IkReal x818=(cj4*r10);
IkReal x819=((1.0)*sj0);
IkReal x820=((0.04225)*r10);
IkReal x821=(cj4*cj5*r01);
evalcond[0]=(((x816*x817))+(((-1.0)*x801*x812))+(((-1.0)*x814*x819))+((r00*sj4*x802))+((r10*sj5*x808))+x799+((r11*sj4*x805)));
evalcond[1]=(((cj4*r01*x805))+((cj4*r00*x811))+((r02*x808))+x799+(((-1.0)*r12*sj4*x801))+(((-1.0)*sj5*x801*x818))+(((-1.0)*cj4*x801*x810)));
evalcond[2]=(((cj0*sj4*x810))+((r10*sj4*x802))+((sj0*x812))+(((-1.0)*x801*x814))+(((-1.0)*x808*x815))+x800+(((-1.0)*x805*x817)));
evalcond[3]=((((-1.0)*cj4*r11*x805))+(((-1.0)*x800))+(((-1.0)*x801*x821))+(((-1.0)*r12*x808))+(((-1.0)*x811*x818))+(((-1.0)*r02*sj4*x801))+(((-1.0)*cj4*x801*x815)));
evalcond[4]=((-0.00025116)+(((-1.0)*x816*x820))+(((0.021)*cj0*x810))+(((-1.0)*x805*x809))+(((-1.0)*x811*x813))+(((0.2377)*x800))+((x805*x806))+(((-1.0)*x807*x811))+((px*sj0))+(((-1.0)*py*x801))+((x802*x803))+((x802*x804)));
evalcond[5]=((0.26630543)+(((-1.0)*px*x801))+((x809*x816))+(((0.2377)*x799))+(((-1.0)*py*x819))+((x802*x813))+((x804*x811))+((x802*x807))+(((-1.0)*x806*x816))+(((-1.0)*x805*x820))+((x803*x811))+(((0.021)*r11*x805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x822=(cj0*sj4);
IkReal x823=(cj5*r01);
IkReal x824=(r21*sj5);
IkReal x825=(r10*sj5);
IkReal x826=(r00*sj5);
IkReal x827=((1.0)*r20);
IkReal x828=(cj4*sj0);
IkReal x829=(cj5*r11);
IkReal x830=(cj5*r21);
IkReal x831=(sj0*sj4);
IkReal x832=(r20*sj5);
IkReal x833=((1.0)*cj0*cj4);
IkReal x834=((1.0)*x831);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((r22*sj4))+((cj4*x832))+((cj4*x830)));
evalcond[2]=((((-1.0)*cj5*x827))+x824);
evalcond[3]=((1.0)+((cj4*r22))+(((-1.0)*sj4*sj5*x827))+(((-1.0)*sj4*x830)));
evalcond[4]=((((-1.0)*x826*x834))+(((-1.0)*x823*x834))+((x822*x829))+((x822*x825))+(((-1.0)*r12*x833))+((r02*x828)));
evalcond[5]=((0.0137)+(((-0.04225)*x824))+(((-0.021)*x830))+(((-0.021)*x832))+(((0.04225)*cj5*r20))+pz);
evalcond[6]=((((-1.0)*r12*x828))+(((-1.0)*r02*x833))+((x829*x831))+((x822*x823))+((x822*x826))+((x825*x831)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x835=((1.0)*cj5);
IkReal x836=(cj0*sj5);
IkReal x837=(sj0*sj5);
if( IKabs((((cj5*r00*sj0))+(((-1.0)*r01*x837))+(((-1.0)*cj0*r10*x835))+((r11*x836)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj0*x835))+((r01*x836))+((r11*x837))+(((-1.0)*cj0*r00*x835)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj0))+(((-1.0)*r01*x837))+(((-1.0)*cj0*r10*x835))+((r11*x836))))+IKsqr(((((-1.0)*r10*sj0*x835))+((r01*x836))+((r11*x837))+(((-1.0)*cj0*r00*x835))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r00*sj0))+(((-1.0)*r01*x837))+(((-1.0)*cj0*r10*x835))+((r11*x836))), ((((-1.0)*r10*sj0*x835))+((r01*x836))+((r11*x837))+(((-1.0)*cj0*r00*x835))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x838=IKcos(j2);
IkReal x839=IKsin(j2);
IkReal x840=((1.0)*cj0);
IkReal x841=(cj0*sj5);
IkReal x842=((0.04225)*r11);
IkReal x843=((0.021)*r10);
IkReal x844=(cj5*sj0);
IkReal x845=((0.04225)*r00);
IkReal x846=((0.021)*r00);
IkReal x847=(sj0*sj4);
IkReal x848=((0.021)*r01);
IkReal x849=(cj5*r11);
IkReal x850=(sj0*sj5);
IkReal x851=((0.04225)*r01);
IkReal x852=((1.0)*r11);
IkReal x853=(cj4*r10);
IkReal x854=(cj4*r00);
IkReal x855=(cj0*cj5);
IkReal x856=((0.04225)*r10);
IkReal x857=(cj4*cj5*r01);
evalcond[0]=(((r10*x855))+(((-1.0)*r00*x844))+(((-1.0)*r11*sj5*x840))+x839+((r01*x850)));
evalcond[1]=(((r00*x855))+(((-1.0)*r01*sj5*x840))+(((-1.0)*x850*x852))+((r10*x844))+x838);
evalcond[2]=(((x850*x854))+((cj4*r01*x844))+(((-1.0)*cj4*x840*x849))+((r02*x847))+(((-1.0)*r12*sj4*x840))+x838+(((-1.0)*sj5*x840*x853)));
evalcond[3]=((((-1.0)*x850*x853))+(((-1.0)*r02*sj4*x840))+(((-1.0)*cj4*x844*x852))+(((-1.0)*r12*x847))+(((-1.0)*x839))+(((-1.0)*x840*x857))+(((-1.0)*sj5*x840*x854)));
evalcond[4]=((-0.00025116)+(((0.021)*cj0*x849))+(((-1.0)*x846*x850))+(((-1.0)*py*x840))+(((-1.0)*x850*x851))+(((-1.0)*x844*x848))+((px*sj0))+(((-1.0)*x855*x856))+((x844*x845))+(((0.46875)*x839))+((x841*x842))+((x841*x843)));
evalcond[5]=((0.26630543)+((x848*x855))+((x842*x850))+(((-1.0)*x844*x856))+(((-1.0)*x845*x855))+(((-1.0)*px*x840))+((x841*x851))+(((0.021)*r11*x844))+(((-1.0)*py*sj0))+((x843*x850))+(((0.46875)*x838))+((x841*x846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x858=(cj0*sj4);
IkReal x859=(cj5*r01);
IkReal x860=(r21*sj5);
IkReal x861=(r10*sj5);
IkReal x862=(r00*sj5);
IkReal x863=((1.0)*r20);
IkReal x864=(cj4*sj0);
IkReal x865=(cj5*r11);
IkReal x866=(cj5*r21);
IkReal x867=(sj0*sj4);
IkReal x868=(r20*sj5);
IkReal x869=((1.0)*cj0*cj4);
IkReal x870=((1.0)*x867);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((r22*sj4))+((cj4*x868))+((cj4*x866)));
evalcond[2]=((((-1.0)*cj5*x863))+x860);
evalcond[3]=((-1.0)+((cj4*r22))+(((-1.0)*sj4*sj5*x863))+(((-1.0)*sj4*x866)));
evalcond[4]=((((-1.0)*x862*x870))+((x858*x865))+((x858*x861))+((r02*x864))+(((-1.0)*x859*x870))+(((-1.0)*r12*x869)));
evalcond[5]=((-0.0137)+(((-0.021)*x868))+(((-0.021)*x866))+(((0.04225)*cj5*r20))+pz+(((-0.04225)*x860)));
evalcond[6]=((((-1.0)*r12*x864))+((x858*x859))+((x858*x862))+((x861*x867))+(((-1.0)*r02*x869))+((x865*x867)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x871=((1.0)*sj0);
IkReal x872=(r11*sj5);
IkReal x873=(cj5*r00);
IkReal x874=(cj5*r10);
IkReal x875=(r01*sj5);
IkReal x876=((1.0)*cj0);
if( IKabs(((((-1.0)*x872*x876))+(((-1.0)*x871*x873))+((sj0*x875))+((cj0*x874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x871*x872))+((sj0*x874))+(((-1.0)*x875*x876))+((cj0*x873)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x872*x876))+(((-1.0)*x871*x873))+((sj0*x875))+((cj0*x874))))+IKsqr(((((-1.0)*x871*x872))+((sj0*x874))+(((-1.0)*x875*x876))+((cj0*x873))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x872*x876))+(((-1.0)*x871*x873))+((sj0*x875))+((cj0*x874))), ((((-1.0)*x871*x872))+((sj0*x874))+(((-1.0)*x875*x876))+((cj0*x873))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x877=IKcos(j2);
IkReal x878=IKsin(j2);
IkReal x879=((1.0)*cj0);
IkReal x880=(cj0*sj5);
IkReal x881=((0.04225)*r11);
IkReal x882=((0.021)*r10);
IkReal x883=(cj5*sj0);
IkReal x884=((0.04225)*r00);
IkReal x885=((0.021)*r00);
IkReal x886=(sj0*sj4);
IkReal x887=((0.021)*r01);
IkReal x888=(cj5*r11);
IkReal x889=(sj0*sj5);
IkReal x890=(cj0*cj5);
IkReal x891=((0.04225)*r01);
IkReal x892=((1.0)*r11);
IkReal x893=(cj4*r10);
IkReal x894=(cj4*r00);
IkReal x895=((0.04225)*r10);
IkReal x896=((1.0)*x878);
IkReal x897=(cj4*cj5*r01);
evalcond[0]=(((r10*x890))+(((-1.0)*r00*x883))+((r01*x889))+(((-1.0)*x896))+(((-1.0)*r11*sj5*x879)));
evalcond[1]=(((r10*x883))+((r00*x890))+(((-1.0)*x877))+(((-1.0)*r01*sj5*x879))+(((-1.0)*x889*x892)));
evalcond[2]=((((-1.0)*cj4*x879*x888))+(((-1.0)*r12*sj4*x879))+(((-1.0)*sj5*x879*x893))+((r02*x886))+((x889*x894))+((cj4*r01*x883))+x877);
evalcond[3]=((((-1.0)*r12*x886))+(((-1.0)*cj4*x883*x892))+(((-1.0)*sj5*x879*x894))+(((-1.0)*x879*x897))+(((-1.0)*x889*x893))+(((-1.0)*x896))+(((-1.0)*r02*sj4*x879)));
evalcond[4]=((-0.00025116)+(((0.021)*cj0*x888))+(((-1.0)*x883*x887))+((x880*x882))+((x880*x881))+((x883*x884))+(((-0.02075)*x878))+(((-1.0)*py*x879))+(((-1.0)*x889*x891))+((px*sj0))+(((-1.0)*x885*x889))+(((-1.0)*x890*x895)));
evalcond[5]=((0.26630543)+(((-1.0)*x884*x890))+((x881*x889))+((x880*x891))+(((-1.0)*x883*x895))+((x880*x885))+((x882*x889))+(((0.021)*r11*x883))+(((-0.02075)*x877))+(((-1.0)*py*sj0))+(((-1.0)*px*x879))+((x887*x890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x898=(cj5*sj0);
IkReal x899=(cj0*sj5);
IkReal x900=((1.0)*cj4);
IkReal x901=(cj0*cj5);
IkReal x902=(sj0*sj5);
CheckValue<IkReal> x903=IKPowWithIntegerCheck(cj3,-1);
if(!x903.valid){
continue;
}
CheckValue<IkReal> x904=IKPowWithIntegerCheck(sj3,-1);
if(!x904.valid){
continue;
}
if( IKabs(((x903.value)*((((r11*x899))+((r00*x898))+(((-1.0)*r10*x901))+(((-1.0)*r01*x902)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x904.value)*((((r01*sj4*x901))+((r11*sj4*x898))+(((-1.0)*cj0*r02*x900))+(((-1.0)*r12*sj0*x900))+((r10*sj4*x902))+((r00*sj4*x899)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x903.value)*((((r11*x899))+((r00*x898))+(((-1.0)*r10*x901))+(((-1.0)*r01*x902))))))+IKsqr(((x904.value)*((((r01*sj4*x901))+((r11*sj4*x898))+(((-1.0)*cj0*r02*x900))+(((-1.0)*r12*sj0*x900))+((r10*sj4*x902))+((r00*sj4*x899))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x903.value)*((((r11*x899))+((r00*x898))+(((-1.0)*r10*x901))+(((-1.0)*r01*x902))))), ((x904.value)*((((r01*sj4*x901))+((r11*sj4*x898))+(((-1.0)*cj0*r02*x900))+(((-1.0)*r12*sj0*x900))+((r10*sj4*x902))+((r00*sj4*x899))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x905=IKcos(j2);
IkReal x906=IKsin(j2);
IkReal x907=((1.0)*cj0);
IkReal x908=((0.021)*sj5);
IkReal x909=(cj0*r00);
IkReal x910=(r02*sj0);
IkReal x911=(cj5*r11);
IkReal x912=(r10*sj0);
IkReal x913=(cj5*r01);
IkReal x914=((0.021)*sj0);
IkReal x915=(cj4*r12);
IkReal x916=(cj0*sj4);
IkReal x917=(r00*sj0);
IkReal x918=(r10*sj5);
IkReal x919=(cj4*sj5);
IkReal x920=(cj0*r10);
IkReal x921=((1.0)*sj0);
IkReal x922=((0.021)*cj0);
IkReal x923=(r12*sj4);
IkReal x924=((0.04225)*cj5);
IkReal x925=(r01*sj5);
IkReal x926=(sj4*sj5);
IkReal x927=(cj4*x913);
IkReal x928=(sj3*x905);
IkReal x929=((1.0)*x906);
IkReal x930=(r00*x924);
IkReal x931=(cj3*x906);
IkReal x932=(cj3*x905);
IkReal x933=((0.04225)*cj0*sj5);
IkReal x934=(sj5*x921);
IkReal x935=((0.04225)*sj0*sj5);
evalcond[0]=((((-1.0)*cj5*x917))+((sj0*x925))+(((-1.0)*r11*sj5*x907))+x931+((cj5*x920)));
evalcond[1]=((((-1.0)*r11*x934))+((cj5*x909))+(((-1.0)*x907*x925))+((cj5*x912))+x932);
evalcond[2]=(((x917*x919))+((sj0*x927))+(((-1.0)*cj4*x907*x911))+(((-1.0)*cj4*x907*x918))+(((-1.0)*x907*x923))+x905+((sj4*x910)));
evalcond[3]=(((sj0*sj4*x911))+(((-1.0)*x928))+((x909*x926))+(((-1.0)*cj4*r02*x907))+(((-1.0)*x915*x921))+((x913*x916))+((x912*x926)));
evalcond[4]=((((-1.0)*sj3*x929))+((x911*x916))+(((-1.0)*sj4*x913*x921))+((x916*x918))+((cj4*x910))+(((-1.0)*x907*x915))+(((-1.0)*x917*x926)));
evalcond[5]=((((-1.0)*x929))+(((-1.0)*r02*sj4*x907))+(((-1.0)*x912*x919))+(((-1.0)*r00*x907*x919))+(((-1.0)*x921*x923))+(((-1.0)*x907*x927))+(((-1.0)*cj4*x911*x921)));
evalcond[6]=((-0.00025116)+(((-1.0)*x913*x914))+(((0.24475)*x931))+(((-1.0)*x908*x917))+((x908*x920))+((x911*x922))+(((-1.0)*py*x907))+(((-1.0)*x920*x924))+((r11*x933))+(((-0.04225)*sj0*x925))+((x917*x924))+(((0.224)*x906))+((px*sj0))+(((-0.0137)*sj3*x906)));
evalcond[7]=((0.26630543)+(((0.24475)*x932))+(((-1.0)*px*x907))+(((-1.0)*x912*x924))+(((0.04225)*cj0*x925))+((x911*x914))+(((-1.0)*x909*x924))+(((-0.0137)*x928))+((r11*x935))+(((-1.0)*py*x921))+(((0.224)*x905))+((x908*x912))+((x908*x909))+((x913*x922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x936=(cj0*cj4);
IkReal x937=(cj5*sj0);
IkReal x938=((1.0)*sj0);
CheckValue<IkReal> x939=IKPowWithIntegerCheck(cj3,-1);
if(!x939.valid){
continue;
}
if( IKabs(((x939.value)*((((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj5*x938))+((r00*x937)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj5*x936))+((cj0*r12*sj4))+(((-1.0)*cj4*r00*sj5*x938))+(((-1.0)*cj4*r01*x937))+((cj5*r11*x936))+(((-1.0)*r02*sj4*x938)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x939.value)*((((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj5*x938))+((r00*x937))))))+IKsqr((((r10*sj5*x936))+((cj0*r12*sj4))+(((-1.0)*cj4*r00*sj5*x938))+(((-1.0)*cj4*r01*x937))+((cj5*r11*x936))+(((-1.0)*r02*sj4*x938))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x939.value)*((((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj5*x938))+((r00*x937))))), (((r10*sj5*x936))+((cj0*r12*sj4))+(((-1.0)*cj4*r00*sj5*x938))+(((-1.0)*cj4*r01*x937))+((cj5*r11*x936))+(((-1.0)*r02*sj4*x938))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x940=IKcos(j2);
IkReal x941=IKsin(j2);
IkReal x942=((1.0)*cj0);
IkReal x943=((0.021)*sj5);
IkReal x944=(cj0*r00);
IkReal x945=(r02*sj0);
IkReal x946=(cj5*r11);
IkReal x947=(r10*sj0);
IkReal x948=(cj5*r01);
IkReal x949=((0.021)*sj0);
IkReal x950=(cj4*r12);
IkReal x951=(cj0*sj4);
IkReal x952=(r00*sj0);
IkReal x953=(r10*sj5);
IkReal x954=(cj4*sj5);
IkReal x955=(cj0*r10);
IkReal x956=((1.0)*sj0);
IkReal x957=((0.021)*cj0);
IkReal x958=(r12*sj4);
IkReal x959=((0.04225)*cj5);
IkReal x960=(r01*sj5);
IkReal x961=(sj4*sj5);
IkReal x962=(cj4*x948);
IkReal x963=(sj3*x940);
IkReal x964=((1.0)*x941);
IkReal x965=(r00*x959);
IkReal x966=(cj3*x941);
IkReal x967=(cj3*x940);
IkReal x968=((0.04225)*cj0*sj5);
IkReal x969=(sj5*x956);
IkReal x970=((0.04225)*sj0*sj5);
evalcond[0]=(((cj5*x955))+(((-1.0)*cj5*x952))+(((-1.0)*r11*sj5*x942))+((sj0*x960))+x966);
evalcond[1]=((((-1.0)*x942*x960))+(((-1.0)*r11*x969))+x967+((cj5*x944))+((cj5*x947)));
evalcond[2]=(((x952*x954))+(((-1.0)*x942*x958))+(((-1.0)*cj4*x942*x946))+((sj0*x962))+((sj4*x945))+x940+(((-1.0)*cj4*x942*x953)));
evalcond[3]=(((x944*x961))+(((-1.0)*x963))+((x948*x951))+(((-1.0)*cj4*r02*x942))+((x947*x961))+(((-1.0)*x950*x956))+((sj0*sj4*x946)));
evalcond[4]=(((x951*x953))+(((-1.0)*sj4*x948*x956))+(((-1.0)*x942*x950))+(((-1.0)*x952*x961))+(((-1.0)*sj3*x964))+((x946*x951))+((cj4*x945)));
evalcond[5]=((((-1.0)*cj4*x946*x956))+(((-1.0)*x947*x954))+(((-1.0)*r02*sj4*x942))+(((-1.0)*x956*x958))+(((-1.0)*x942*x962))+(((-1.0)*r00*x942*x954))+(((-1.0)*x964)));
evalcond[6]=((-0.00025116)+(((-1.0)*py*x942))+((x952*x959))+(((0.224)*x941))+(((-0.04225)*sj0*x960))+(((0.24475)*x966))+(((-1.0)*x948*x949))+((x943*x955))+(((-1.0)*x943*x952))+((r11*x968))+((x946*x957))+((px*sj0))+(((-1.0)*x955*x959))+(((-0.0137)*sj3*x941)));
evalcond[7]=((0.26630543)+(((-1.0)*py*x956))+(((0.224)*x940))+((x946*x949))+(((-0.0137)*x963))+(((0.24475)*x967))+(((-1.0)*x944*x959))+((x948*x957))+((x943*x947))+((x943*x944))+(((-1.0)*x947*x959))+(((-1.0)*px*x942))+(((0.04225)*cj0*x960))+((r11*x970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x971=((1.0)*cj5);
IkReal x972=(cj0*sj5);
IkReal x973=(sj0*sj5);
CheckValue<IkReal> x974=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x974.valid){
continue;
}
CheckValue<IkReal> x975 = IKatan2WithCheck(IkReal((((cj5*r00*sj0))+(((-1.0)*cj0*r10*x971))+((r11*x972))+(((-1.0)*r01*x973)))),(((r01*x972))+(((-1.0)*r10*sj0*x971))+((r11*x973))+(((-1.0)*cj0*r00*x971))),IKFAST_ATAN2_MAGTHRESH);
if(!x975.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x974.value)))+(x975.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x976=IKcos(j2);
IkReal x977=IKsin(j2);
IkReal x978=((1.0)*cj0);
IkReal x979=((0.021)*sj5);
IkReal x980=(cj0*r00);
IkReal x981=(r02*sj0);
IkReal x982=(cj5*r11);
IkReal x983=(r10*sj0);
IkReal x984=(cj5*r01);
IkReal x985=((0.021)*sj0);
IkReal x986=(cj4*r12);
IkReal x987=(cj0*sj4);
IkReal x988=(r00*sj0);
IkReal x989=(r10*sj5);
IkReal x990=(cj4*sj5);
IkReal x991=(cj0*r10);
IkReal x992=((1.0)*sj0);
IkReal x993=((0.021)*cj0);
IkReal x994=(r12*sj4);
IkReal x995=((0.04225)*cj5);
IkReal x996=(r01*sj5);
IkReal x997=(sj4*sj5);
IkReal x998=(cj4*x984);
IkReal x999=(sj3*x976);
IkReal x1000=((1.0)*x977);
IkReal x1001=(r00*x995);
IkReal x1002=(cj3*x977);
IkReal x1003=(cj3*x976);
IkReal x1004=((0.04225)*cj0*sj5);
IkReal x1005=(sj5*x992);
IkReal x1006=((0.04225)*sj0*sj5);
evalcond[0]=(x1002+((cj5*x991))+(((-1.0)*cj5*x988))+((sj0*x996))+(((-1.0)*r11*sj5*x978)));
evalcond[1]=(((cj5*x980))+((cj5*x983))+x1003+(((-1.0)*x978*x996))+(((-1.0)*r11*x1005)));
evalcond[2]=(((x988*x990))+((sj4*x981))+(((-1.0)*x978*x994))+(((-1.0)*cj4*x978*x982))+(((-1.0)*cj4*x978*x989))+((sj0*x998))+x976);
evalcond[3]=((((-1.0)*x999))+((sj0*sj4*x982))+((x983*x997))+((x980*x997))+((x984*x987))+(((-1.0)*cj4*r02*x978))+(((-1.0)*x986*x992)));
evalcond[4]=(((cj4*x981))+(((-1.0)*x988*x997))+(((-1.0)*x978*x986))+((x982*x987))+(((-1.0)*sj4*x984*x992))+(((-1.0)*sj3*x1000))+((x987*x989)));
evalcond[5]=((((-1.0)*cj4*x982*x992))+(((-1.0)*x1000))+(((-1.0)*r02*sj4*x978))+(((-1.0)*x983*x990))+(((-1.0)*x992*x994))+(((-1.0)*x978*x998))+(((-1.0)*r00*x978*x990)));
evalcond[6]=((-0.00025116)+(((-1.0)*py*x978))+((x988*x995))+(((-1.0)*x991*x995))+(((0.224)*x977))+(((0.24475)*x1002))+((r11*x1004))+((px*sj0))+(((-1.0)*x984*x985))+(((-0.0137)*sj3*x977))+(((-1.0)*x979*x988))+(((-0.04225)*sj0*x996))+((x979*x991))+((x982*x993)));
evalcond[7]=((0.26630543)+(((-1.0)*px*x978))+(((-0.0137)*x999))+(((0.224)*x976))+(((-1.0)*py*x992))+(((0.24475)*x1003))+((x979*x980))+((x979*x983))+((x982*x985))+(((0.04225)*cj0*x996))+((r11*x1006))+(((-1.0)*x983*x995))+(((-1.0)*x980*x995))+((x984*x993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1007=((1.0)*r20);
if( IKabs(((((-1.0)*cj5*x1007))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r22))+(((-1.0)*cj5*r21*sj4))+(((-1.0)*sj4*sj5*x1007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x1007))+((r21*sj5))))+IKsqr((((cj4*r22))+(((-1.0)*cj5*r21*sj4))+(((-1.0)*sj4*sj5*x1007))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj5*x1007))+((r21*sj5))), (((cj4*r22))+(((-1.0)*cj5*r21*sj4))+(((-1.0)*sj4*sj5*x1007))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1008=IKsin(j3);
IkReal x1009=IKcos(j3);
IkReal x1010=(r21*sj5);
IkReal x1011=(cj5*r21);
IkReal x1012=(cj5*r20);
IkReal x1013=((1.0)*sj4);
IkReal x1014=(r20*sj5);
evalcond[0]=((((-1.0)*x1008))+x1010+(((-1.0)*x1012)));
evalcond[1]=((((-1.0)*x1009))+(((-1.0)*x1011*x1013))+((cj4*r22))+(((-1.0)*x1013*x1014)));
evalcond[2]=((((-0.04225)*x1010))+(((-0.021)*x1014))+(((-0.021)*x1011))+(((-0.0137)*x1009))+(((0.04225)*x1012))+pz+(((-0.24475)*x1008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1015=(r11*sj5);
IkReal x1016=(cj5*sj0);
IkReal x1017=((1.0)*sj0);
IkReal x1018=(r01*sj5);
IkReal x1019=(cj0*cj5);
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
j2eval[2]=((IKabs(((((-1.0)*cj0*x1018))+(((-1.0)*x1015*x1017))+((r00*x1019))+((r10*x1016)))))+(IKabs(((((-1.0)*x1017*x1018))+((cj0*x1015))+((r00*x1016))+(((-1.0)*r10*x1019))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1020=(cj0*sj4);
IkReal x1021=(cj5*r01);
IkReal x1022=(r21*sj5);
IkReal x1023=(r10*sj5);
IkReal x1024=(r00*sj5);
IkReal x1025=((1.0)*r20);
IkReal x1026=(cj4*sj0);
IkReal x1027=(cj5*r11);
IkReal x1028=(cj5*r21);
IkReal x1029=(sj0*sj4);
IkReal x1030=(r20*sj5);
IkReal x1031=((1.0)*cj0*cj4);
IkReal x1032=((1.0)*x1029);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((r22*sj4))+((cj4*x1030))+((cj4*x1028)));
evalcond[2]=((((-1.0)*cj5*x1025))+x1022);
evalcond[3]=((-1.0)+(((-1.0)*sj4*sj5*x1025))+((cj4*r22))+(((-1.0)*sj4*x1028)));
evalcond[4]=((((-1.0)*x1024*x1032))+(((-1.0)*x1021*x1032))+((x1020*x1027))+((x1020*x1023))+(((-1.0)*r12*x1031))+((r02*x1026)));
evalcond[5]=((-0.0137)+(((-0.021)*x1030))+(((-0.04225)*x1022))+(((0.04225)*cj5*r20))+pz+(((-0.021)*x1028)));
evalcond[6]=(((x1023*x1029))+(((-1.0)*r02*x1031))+(((-1.0)*r12*x1026))+((x1020*x1024))+((x1020*x1021))+((x1027*x1029)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1033=(r11*sj5);
IkReal x1034=(cj5*sj0);
IkReal x1035=((1.0)*sj0);
IkReal x1036=(r01*sj5);
IkReal x1037=(cj0*cj5);
if( IKabs((((r00*x1034))+(((-1.0)*r10*x1037))+(((-1.0)*x1035*x1036))+((cj0*x1033)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1033*x1035))+((r10*x1034))+((r00*x1037))+(((-1.0)*cj0*x1036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1034))+(((-1.0)*r10*x1037))+(((-1.0)*x1035*x1036))+((cj0*x1033))))+IKsqr(((((-1.0)*x1033*x1035))+((r10*x1034))+((r00*x1037))+(((-1.0)*cj0*x1036))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x1034))+(((-1.0)*r10*x1037))+(((-1.0)*x1035*x1036))+((cj0*x1033))), ((((-1.0)*x1033*x1035))+((r10*x1034))+((r00*x1037))+(((-1.0)*cj0*x1036))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1038=IKcos(j2);
IkReal x1039=IKsin(j2);
IkReal x1040=((1.0)*cj0);
IkReal x1041=(cj0*sj5);
IkReal x1042=((0.04225)*r11);
IkReal x1043=((0.021)*r10);
IkReal x1044=(cj5*sj0);
IkReal x1045=((0.04225)*r00);
IkReal x1046=((0.021)*r00);
IkReal x1047=(sj0*sj4);
IkReal x1048=((0.021)*r01);
IkReal x1049=(cj5*r11);
IkReal x1050=(sj0*sj5);
IkReal x1051=(cj0*cj5);
IkReal x1052=((0.04225)*r01);
IkReal x1053=((1.0)*r11);
IkReal x1054=(cj4*r10);
IkReal x1055=(cj4*r00);
IkReal x1056=((0.04225)*r10);
IkReal x1057=(cj4*cj5*r01);
evalcond[0]=(x1039+((r10*x1051))+((r01*x1050))+(((-1.0)*r11*sj5*x1040))+(((-1.0)*r00*x1044)));
evalcond[1]=((((-1.0)*x1038))+((r00*x1051))+(((-1.0)*r01*sj5*x1040))+((r10*x1044))+(((-1.0)*x1050*x1053)));
evalcond[2]=(((r02*x1047))+x1038+((cj4*r01*x1044))+((x1050*x1055))+(((-1.0)*sj5*x1040*x1054))+(((-1.0)*r12*sj4*x1040))+(((-1.0)*cj4*x1040*x1049)));
evalcond[3]=((((-1.0)*r12*x1047))+x1039+(((-1.0)*cj4*x1044*x1053))+(((-1.0)*r02*sj4*x1040))+(((-1.0)*sj5*x1040*x1055))+(((-1.0)*x1040*x1057))+(((-1.0)*x1050*x1054)));
evalcond[4]=((-0.00025116)+(((-1.0)*x1046*x1050))+(((-1.0)*x1044*x1048))+((x1041*x1042))+((x1041*x1043))+(((-1.0)*py*x1040))+(((0.46875)*x1039))+((px*sj0))+(((0.021)*cj0*x1049))+(((-1.0)*x1050*x1052))+((x1044*x1045))+(((-1.0)*x1051*x1056)));
evalcond[5]=((-0.26630543)+((x1043*x1050))+(((-1.0)*x1045*x1051))+((x1042*x1050))+(((-1.0)*x1044*x1056))+((x1041*x1052))+(((0.021)*r11*x1044))+((x1041*x1046))+(((-1.0)*px*x1040))+((x1048*x1051))+(((-0.46875)*x1038))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1058=(cj0*sj4);
IkReal x1059=(cj5*r01);
IkReal x1060=(r21*sj5);
IkReal x1061=(r10*sj5);
IkReal x1062=(r00*sj5);
IkReal x1063=((1.0)*r20);
IkReal x1064=(cj4*sj0);
IkReal x1065=(cj5*r11);
IkReal x1066=(cj5*r21);
IkReal x1067=(sj0*sj4);
IkReal x1068=(r20*sj5);
IkReal x1069=((1.0)*cj0*cj4);
IkReal x1070=((1.0)*x1067);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((r22*sj4))+((cj4*x1066))+((cj4*x1068)));
evalcond[2]=(x1060+(((-1.0)*cj5*x1063)));
evalcond[3]=((1.0)+((cj4*r22))+(((-1.0)*sj4*sj5*x1063))+(((-1.0)*sj4*x1066)));
evalcond[4]=((((-1.0)*x1059*x1070))+(((-1.0)*r12*x1069))+(((-1.0)*x1062*x1070))+((r02*x1064))+((x1058*x1065))+((x1058*x1061)));
evalcond[5]=((0.0137)+(((-0.021)*x1068))+(((-0.021)*x1066))+(((0.04225)*cj5*r20))+pz+(((-0.04225)*x1060)));
evalcond[6]=((((-1.0)*r12*x1064))+((x1061*x1067))+(((-1.0)*r02*x1069))+((x1058*x1059))+((x1058*x1062))+((x1065*x1067)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1071=(r01*sj5);
IkReal x1072=(cj5*r10);
IkReal x1073=(r11*sj5);
IkReal x1074=((1.0)*cj5*r00);
if( IKabs(((((-1.0)*cj0*x1073))+((cj0*x1072))+((sj0*x1071))+(((-1.0)*sj0*x1074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*x1071))+(((-1.0)*sj0*x1072))+((sj0*x1073))+(((-1.0)*cj0*x1074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x1073))+((cj0*x1072))+((sj0*x1071))+(((-1.0)*sj0*x1074))))+IKsqr((((cj0*x1071))+(((-1.0)*sj0*x1072))+((sj0*x1073))+(((-1.0)*cj0*x1074))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj0*x1073))+((cj0*x1072))+((sj0*x1071))+(((-1.0)*sj0*x1074))), (((cj0*x1071))+(((-1.0)*sj0*x1072))+((sj0*x1073))+(((-1.0)*cj0*x1074))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1075=IKcos(j2);
IkReal x1076=IKsin(j2);
IkReal x1077=((1.0)*cj0);
IkReal x1078=(cj0*sj5);
IkReal x1079=((0.04225)*r11);
IkReal x1080=((0.021)*r10);
IkReal x1081=(cj5*sj0);
IkReal x1082=((0.04225)*r00);
IkReal x1083=((0.021)*r00);
IkReal x1084=(sj0*sj4);
IkReal x1085=((0.021)*r01);
IkReal x1086=(cj5*r11);
IkReal x1087=(sj0*sj5);
IkReal x1088=(cj0*cj5);
IkReal x1089=((0.04225)*r01);
IkReal x1090=((1.0)*r11);
IkReal x1091=(cj4*r10);
IkReal x1092=(cj4*r00);
IkReal x1093=((0.04225)*r10);
IkReal x1094=(cj4*cj5*r01);
evalcond[0]=(x1075+((r00*x1088))+(((-1.0)*r01*sj5*x1077))+((r10*x1081))+(((-1.0)*x1087*x1090)));
evalcond[1]=((((-1.0)*r00*x1081))+((r10*x1088))+((r01*x1087))+(((-1.0)*r11*sj5*x1077))+(((-1.0)*x1076)));
evalcond[2]=(((x1087*x1092))+(((-1.0)*cj4*x1077*x1086))+(((-1.0)*r12*sj4*x1077))+x1075+((cj4*r01*x1081))+(((-1.0)*sj5*x1077*x1091))+((r02*x1084)));
evalcond[3]=((((-1.0)*r12*x1084))+x1076+(((-1.0)*cj4*x1081*x1090))+(((-1.0)*sj5*x1077*x1092))+(((-1.0)*x1077*x1094))+(((-1.0)*r02*sj4*x1077))+(((-1.0)*x1087*x1091)));
evalcond[4]=((-0.00025116)+((x1081*x1082))+(((-1.0)*x1088*x1093))+((x1078*x1080))+((x1078*x1079))+(((-1.0)*x1081*x1085))+(((-1.0)*py*x1077))+(((-1.0)*x1087*x1089))+(((0.021)*cj0*x1086))+((px*sj0))+(((-1.0)*x1083*x1087))+(((-0.02075)*x1076)));
evalcond[5]=((-0.26630543)+((x1079*x1087))+(((0.02075)*x1075))+((x1078*x1089))+((x1078*x1083))+(((-1.0)*px*x1077))+(((-1.0)*x1081*x1093))+(((0.021)*r11*x1081))+(((-1.0)*x1082*x1088))+((x1080*x1087))+(((-1.0)*py*sj0))+((x1085*x1088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1095=(r21*sj5);
IkReal x1096=(cj5*r20);
IkReal x1097=(cj5*r21);
IkReal x1098=((1.0)*sj4);
IkReal x1099=(r20*sj5);
IkReal x1100=(sj0*sj5);
IkReal x1101=((1.0)*r11);
IkReal x1102=(cj5*r00);
IkReal x1103=(cj5*r10);
IkReal x1104=(cj0*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj4*x1099))+((cj4*x1097))+((r22*sj4)));
evalcond[2]=((-1.0)+x1095+(((-1.0)*x1096)));
evalcond[3]=(((cj4*r22))+(((-1.0)*x1097*x1098))+(((-1.0)*x1098*x1099)));
evalcond[4]=((((-1.0)*sj0*x1102))+((r01*x1100))+((cj0*x1103))+(((-1.0)*x1101*x1104)));
evalcond[5]=(((sj0*x1103))+(((-1.0)*x1100*x1101))+(((-1.0)*r01*x1104))+((cj0*x1102)));
evalcond[6]=((-0.24475)+(((-0.04225)*x1095))+pz+(((0.04225)*x1096))+(((-0.021)*x1097))+(((-0.021)*x1099)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1105=(cj0*r02);
IkReal x1106=(r12*sj0);
IkReal x1107=((1.0)*sj4);
IkReal x1108=(cj4*cj5);
IkReal x1109=(r11*sj0);
IkReal x1110=(cj0*r01);
IkReal x1111=(cj0*r00*sj5);
IkReal x1112=(r10*sj0*sj5);
if( IKabs((((x1108*x1109))+((x1108*x1110))+((cj4*x1112))+((cj4*x1111))+((sj4*x1106))+((sj4*x1105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x1106))+((cj4*x1105))+(((-1.0)*x1107*x1111))+(((-1.0)*x1107*x1112))+(((-1.0)*cj5*x1107*x1109))+(((-1.0)*cj5*x1107*x1110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1108*x1109))+((x1108*x1110))+((cj4*x1112))+((cj4*x1111))+((sj4*x1106))+((sj4*x1105))))+IKsqr((((cj4*x1106))+((cj4*x1105))+(((-1.0)*x1107*x1111))+(((-1.0)*x1107*x1112))+(((-1.0)*cj5*x1107*x1109))+(((-1.0)*cj5*x1107*x1110))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1108*x1109))+((x1108*x1110))+((cj4*x1112))+((cj4*x1111))+((sj4*x1106))+((sj4*x1105))), (((cj4*x1106))+((cj4*x1105))+(((-1.0)*x1107*x1111))+(((-1.0)*x1107*x1112))+(((-1.0)*cj5*x1107*x1109))+(((-1.0)*cj5*x1107*x1110))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1113=IKcos(j2);
IkReal x1114=IKsin(j2);
IkReal x1115=((1.0)*cj0);
IkReal x1116=(cj0*sj5);
IkReal x1117=((0.04225)*r11);
IkReal x1118=((0.021)*r10);
IkReal x1119=(cj5*sj0);
IkReal x1120=((0.04225)*r00);
IkReal x1121=((0.021)*r00);
IkReal x1122=(sj0*sj4);
IkReal x1123=((0.021)*r01);
IkReal x1124=(cj5*r11);
IkReal x1125=(sj0*sj5);
IkReal x1126=(cj4*r02);
IkReal x1127=((0.04225)*r01);
IkReal x1128=(cj4*r12);
IkReal x1129=(r00*sj5);
IkReal x1130=(cj0*cj5);
IkReal x1131=(r01*sj4);
IkReal x1132=(cj4*r10);
IkReal x1133=((1.0)*sj0);
IkReal x1134=((0.04225)*r10);
IkReal x1135=(cj4*cj5*r01);
evalcond[0]=(((r10*sj5*x1122))+x1113+((x1130*x1131))+((r00*sj4*x1116))+(((-1.0)*x1128*x1133))+((r11*sj4*x1119))+(((-1.0)*x1115*x1126)));
evalcond[1]=(x1113+(((-1.0)*sj5*x1115*x1132))+((cj4*r00*x1125))+(((-1.0)*cj4*x1115*x1124))+((cj4*r01*x1119))+((r02*x1122))+(((-1.0)*r12*sj4*x1115)));
evalcond[2]=(((sj0*x1126))+(((-1.0)*x1119*x1131))+(((-1.0)*x1114))+((cj0*sj4*x1124))+(((-1.0)*x1122*x1129))+((r10*sj4*x1116))+(((-1.0)*x1115*x1128)));
evalcond[3]=(x1114+(((-1.0)*x1125*x1132))+(((-1.0)*cj4*x1115*x1129))+(((-1.0)*r02*sj4*x1115))+(((-1.0)*x1115*x1135))+(((-1.0)*cj4*r11*x1119))+(((-1.0)*r12*x1122)));
evalcond[4]=((-0.00025116)+(((-1.0)*x1121*x1125))+((x1119*x1120))+(((-1.0)*x1130*x1134))+(((-1.0)*py*x1115))+((x1116*x1117))+((x1116*x1118))+(((0.2103)*x1114))+(((-1.0)*x1119*x1123))+((px*sj0))+(((-1.0)*x1125*x1127))+(((0.021)*cj0*x1124)));
evalcond[5]=((-0.26630543)+(((-1.0)*px*x1115))+(((-1.0)*py*x1133))+(((-0.2103)*x1113))+((x1117*x1125))+((x1123*x1130))+((x1116*x1121))+((x1116*x1127))+(((-1.0)*x1119*x1134))+(((-1.0)*x1120*x1130))+((x1118*x1125))+(((0.021)*r11*x1119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1136=(r21*sj5);
IkReal x1137=(cj5*r20);
IkReal x1138=(cj5*r21);
IkReal x1139=((1.0)*sj4);
IkReal x1140=(r20*sj5);
IkReal x1141=(sj0*sj5);
IkReal x1142=((1.0)*r11);
IkReal x1143=(cj5*r00);
IkReal x1144=(cj5*r10);
IkReal x1145=(cj0*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r22*sj4))+((cj4*x1138))+((cj4*x1140)));
evalcond[2]=((1.0)+x1136+(((-1.0)*x1137)));
evalcond[3]=(((cj4*r22))+(((-1.0)*x1138*x1139))+(((-1.0)*x1139*x1140)));
evalcond[4]=(((r01*x1141))+(((-1.0)*sj0*x1143))+((cj0*x1144))+(((-1.0)*x1142*x1145)));
evalcond[5]=((((-1.0)*r01*x1145))+(((-1.0)*x1141*x1142))+((sj0*x1144))+((cj0*x1143)));
evalcond[6]=((0.24475)+(((-0.04225)*x1136))+(((-0.021)*x1138))+(((0.04225)*x1137))+(((-0.021)*x1140))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1146=((1.0)*cj0);
IkReal x1147=(sj0*sj4);
IkReal x1148=(cj5*r01);
IkReal x1149=(r00*sj5);
IkReal x1150=(cj0*sj4);
IkReal x1151=(r10*sj5);
IkReal x1152=(cj5*r11*sj4);
IkReal x1153=((1.0)*cj4*sj0);
if( IKabs(((((-1.0)*sj4*x1146*x1151))+((cj0*cj4*r12))+(((-1.0)*r02*x1153))+(((-1.0)*x1146*x1152))+((x1147*x1149))+((x1147*x1148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1149*x1150))+(((-1.0)*cj4*r02*x1146))+((x1147*x1151))+(((-1.0)*r12*x1153))+((x1148*x1150))+((cj5*r11*x1147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1146*x1151))+((cj0*cj4*r12))+(((-1.0)*r02*x1153))+(((-1.0)*x1146*x1152))+((x1147*x1149))+((x1147*x1148))))+IKsqr((((x1149*x1150))+(((-1.0)*cj4*r02*x1146))+((x1147*x1151))+(((-1.0)*r12*x1153))+((x1148*x1150))+((cj5*r11*x1147))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x1146*x1151))+((cj0*cj4*r12))+(((-1.0)*r02*x1153))+(((-1.0)*x1146*x1152))+((x1147*x1149))+((x1147*x1148))), (((x1149*x1150))+(((-1.0)*cj4*r02*x1146))+((x1147*x1151))+(((-1.0)*r12*x1153))+((x1148*x1150))+((cj5*r11*x1147))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1154=IKcos(j2);
IkReal x1155=IKsin(j2);
IkReal x1156=((1.0)*cj0);
IkReal x1157=(cj0*sj5);
IkReal x1158=((0.04225)*r11);
IkReal x1159=((0.021)*r10);
IkReal x1160=(cj5*sj0);
IkReal x1161=((0.04225)*r00);
IkReal x1162=((0.021)*r00);
IkReal x1163=(sj0*sj4);
IkReal x1164=((0.021)*r01);
IkReal x1165=(cj5*r11);
IkReal x1166=(sj0*sj5);
IkReal x1167=(cj4*r02);
IkReal x1168=((0.04225)*r01);
IkReal x1169=(cj4*r12);
IkReal x1170=(r00*sj5);
IkReal x1171=(r01*sj4);
IkReal x1172=(cj0*cj5);
IkReal x1173=(cj4*r10);
IkReal x1174=((0.04225)*r10);
IkReal x1175=((1.0)*sj0);
IkReal x1176=(cj4*cj5*r01);
evalcond[0]=(x1154+((r02*x1163))+(((-1.0)*sj5*x1156*x1173))+(((-1.0)*cj4*x1156*x1165))+((cj4*r00*x1166))+((cj4*r01*x1160))+(((-1.0)*r12*sj4*x1156)));
evalcond[1]=((((-1.0)*x1156*x1169))+x1155+(((-1.0)*x1163*x1170))+((sj0*x1167))+((cj0*sj4*x1165))+((r10*sj4*x1157))+(((-1.0)*x1160*x1171)));
evalcond[2]=((((-1.0)*x1156*x1167))+((r00*sj4*x1157))+(((-1.0)*x1154))+((r11*sj4*x1160))+(((-1.0)*x1169*x1175))+((r10*sj5*x1163))+((x1171*x1172)));
evalcond[3]=(x1155+(((-1.0)*cj4*r11*x1160))+(((-1.0)*x1166*x1173))+(((-1.0)*r02*sj4*x1156))+(((-1.0)*r12*x1163))+(((-1.0)*cj4*x1156*x1170))+(((-1.0)*x1156*x1176)));
evalcond[4]=((-0.00025116)+(((-1.0)*x1166*x1168))+(((-1.0)*x1162*x1166))+(((-1.0)*x1172*x1174))+(((0.2377)*x1155))+(((-1.0)*py*x1156))+((px*sj0))+(((0.021)*cj0*x1165))+(((-1.0)*x1160*x1164))+((x1160*x1161))+((x1157*x1158))+((x1157*x1159)));
evalcond[5]=((-0.26630543)+((x1164*x1172))+((x1159*x1166))+(((-1.0)*px*x1156))+(((-1.0)*py*x1175))+(((-0.2377)*x1154))+(((0.021)*r11*x1160))+((x1157*x1168))+((x1157*x1162))+((x1158*x1166))+(((-1.0)*x1161*x1172))+(((-1.0)*x1160*x1174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1177=((1.0)*cj0);
IkReal x1178=(cj0*sj4);
IkReal x1179=((1.0)*sj0*sj4);
CheckValue<IkReal> x1180=IKPowWithIntegerCheck(sj3,-1);
if(!x1180.valid){
continue;
}
CheckValue<IkReal> x1181=IKPowWithIntegerCheck(cj3,-1);
if(!x1181.valid){
continue;
}
if( IKabs(((x1180.value)*(((((-1.0)*cj4*r12*x1177))+((cj5*r11*x1178))+((cj4*r02*sj0))+(((-1.0)*cj5*r01*x1179))+((r10*sj5*x1178))+(((-1.0)*r00*sj5*x1179)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1181.value)*(((((-1.0)*r01*sj5*x1177))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*sj5))+((cj5*r10*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1180.value)*(((((-1.0)*cj4*r12*x1177))+((cj5*r11*x1178))+((cj4*r02*sj0))+(((-1.0)*cj5*r01*x1179))+((r10*sj5*x1178))+(((-1.0)*r00*sj5*x1179))))))+IKsqr(((x1181.value)*(((((-1.0)*r01*sj5*x1177))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*sj5))+((cj5*r10*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1180.value)*(((((-1.0)*cj4*r12*x1177))+((cj5*r11*x1178))+((cj4*r02*sj0))+(((-1.0)*cj5*r01*x1179))+((r10*sj5*x1178))+(((-1.0)*r00*sj5*x1179))))), ((x1181.value)*(((((-1.0)*r01*sj5*x1177))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*sj5))+((cj5*r10*sj0))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1182=IKcos(j2);
IkReal x1183=IKsin(j2);
IkReal x1184=((1.0)*cj0);
IkReal x1185=(r02*sj0);
IkReal x1186=(cj5*r11);
IkReal x1187=((0.021)*sj0);
IkReal x1188=(r10*sj5);
IkReal x1189=(cj5*r01);
IkReal x1190=(cj4*r12);
IkReal x1191=(cj0*sj4);
IkReal x1192=((1.0)*sj0);
IkReal x1193=(r11*sj5);
IkReal x1194=(r00*sj5);
IkReal x1195=(cj5*r00);
IkReal x1196=((0.04225)*sj0);
IkReal x1197=(r01*sj5);
IkReal x1198=((0.021)*cj0);
IkReal x1199=(r12*sj4);
IkReal x1200=(cj5*r10);
IkReal x1201=(sj0*sj4);
IkReal x1202=(cj4*x1189);
IkReal x1203=(sj3*x1182);
IkReal x1204=(sj3*x1183);
IkReal x1205=(sj5*x1198);
IkReal x1206=((0.04225)*x1195);
IkReal x1207=(cj3*x1183);
IkReal x1208=((0.04225)*cj0*sj5);
IkReal x1209=(cj3*x1182);
evalcond[0]=(((cj0*x1200))+x1207+((sj0*x1197))+(((-1.0)*x1184*x1193))+(((-1.0)*x1192*x1195)));
evalcond[1]=(((cj0*x1195))+(((-1.0)*x1184*x1197))+((sj0*x1200))+(((-1.0)*x1209))+(((-1.0)*x1192*x1193)));
evalcond[2]=(((cj4*sj0*x1194))+x1182+((sj4*x1185))+(((-1.0)*cj4*x1184*x1188))+(((-1.0)*cj4*x1184*x1186))+(((-1.0)*x1184*x1199))+((sj0*x1202)));
evalcond[3]=(x1203+(((-1.0)*x1190*x1192))+((x1186*x1201))+((x1189*x1191))+((x1191*x1194))+(((-1.0)*cj4*r02*x1184))+((x1188*x1201)));
evalcond[4]=(((x1186*x1191))+((x1188*x1191))+(((-1.0)*x1184*x1190))+(((-1.0)*sj4*x1192*x1194))+((cj4*x1185))+(((-1.0)*x1204))+(((-1.0)*sj4*x1189*x1192)));
evalcond[5]=(x1183+(((-1.0)*cj4*x1188*x1192))+(((-1.0)*cj4*x1184*x1194))+(((-1.0)*cj4*x1186*x1192))+(((-1.0)*x1184*x1202))+(((-1.0)*r02*sj4*x1184))+(((-1.0)*x1192*x1199)));
evalcond[6]=((-0.00025116)+((x1186*x1198))+(((-0.0137)*x1204))+((x1195*x1196))+((x1188*x1198))+(((0.04225)*cj0*x1193))+(((-1.0)*py*x1184))+(((-1.0)*x1187*x1189))+(((0.24475)*x1207))+(((-1.0)*x1187*x1194))+(((-1.0)*x1196*x1197))+(((0.224)*x1183))+(((-0.04225)*cj0*x1200))+((px*sj0)));
evalcond[7]=((-0.26630543)+((x1187*x1188))+((x1186*x1187))+(((-0.24475)*x1209))+((x1194*x1198))+(((-1.0)*x1196*x1200))+(((-0.224)*x1182))+(((-1.0)*py*x1192))+((x1189*x1198))+(((0.04225)*cj0*x1197))+(((0.0137)*x1203))+((x1193*x1196))+(((-1.0)*cj0*x1206))+(((-1.0)*px*x1184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1210=(cj0*cj4);
IkReal x1211=(cj5*sj0);
IkReal x1212=((1.0)*sj0);
CheckValue<IkReal> x1213=IKPowWithIntegerCheck(cj3,-1);
if(!x1213.valid){
continue;
}
if( IKabs(((x1213.value)*((((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+((r00*x1211))+(((-1.0)*r01*sj5*x1212)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj5*x1210))+(((-1.0)*cj4*r00*sj5*x1212))+(((-1.0)*cj4*r01*x1211))+((cj5*r11*x1210))+(((-1.0)*r02*sj4*x1212))+((cj0*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1213.value)*((((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+((r00*x1211))+(((-1.0)*r01*sj5*x1212))))))+IKsqr((((r10*sj5*x1210))+(((-1.0)*cj4*r00*sj5*x1212))+(((-1.0)*cj4*r01*x1211))+((cj5*r11*x1210))+(((-1.0)*r02*sj4*x1212))+((cj0*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1213.value)*((((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+((r00*x1211))+(((-1.0)*r01*sj5*x1212))))), (((r10*sj5*x1210))+(((-1.0)*cj4*r00*sj5*x1212))+(((-1.0)*cj4*r01*x1211))+((cj5*r11*x1210))+(((-1.0)*r02*sj4*x1212))+((cj0*r12*sj4))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1214=IKcos(j2);
IkReal x1215=IKsin(j2);
IkReal x1216=((1.0)*cj0);
IkReal x1217=(r02*sj0);
IkReal x1218=(cj5*r11);
IkReal x1219=((0.021)*sj0);
IkReal x1220=(r10*sj5);
IkReal x1221=(cj5*r01);
IkReal x1222=(cj4*r12);
IkReal x1223=(cj0*sj4);
IkReal x1224=((1.0)*sj0);
IkReal x1225=(r11*sj5);
IkReal x1226=(r00*sj5);
IkReal x1227=(cj5*r00);
IkReal x1228=((0.04225)*sj0);
IkReal x1229=(r01*sj5);
IkReal x1230=((0.021)*cj0);
IkReal x1231=(r12*sj4);
IkReal x1232=(cj5*r10);
IkReal x1233=(sj0*sj4);
IkReal x1234=(cj4*x1221);
IkReal x1235=(sj3*x1214);
IkReal x1236=(sj3*x1215);
IkReal x1237=(sj5*x1230);
IkReal x1238=((0.04225)*x1227);
IkReal x1239=(cj3*x1215);
IkReal x1240=((0.04225)*cj0*sj5);
IkReal x1241=(cj3*x1214);
evalcond[0]=(((sj0*x1229))+x1239+(((-1.0)*x1224*x1227))+((cj0*x1232))+(((-1.0)*x1216*x1225)));
evalcond[1]=(((sj0*x1232))+(((-1.0)*x1224*x1225))+(((-1.0)*x1241))+((cj0*x1227))+(((-1.0)*x1216*x1229)));
evalcond[2]=(x1214+((sj0*x1234))+((cj4*sj0*x1226))+((sj4*x1217))+(((-1.0)*cj4*x1216*x1220))+(((-1.0)*cj4*x1216*x1218))+(((-1.0)*x1216*x1231)));
evalcond[3]=(x1235+((x1223*x1226))+(((-1.0)*x1222*x1224))+((x1220*x1233))+(((-1.0)*cj4*r02*x1216))+((x1221*x1223))+((x1218*x1233)));
evalcond[4]=((((-1.0)*x1236))+((cj4*x1217))+(((-1.0)*sj4*x1224*x1226))+((x1220*x1223))+(((-1.0)*sj4*x1221*x1224))+((x1218*x1223))+(((-1.0)*x1216*x1222)));
evalcond[5]=(x1215+(((-1.0)*x1224*x1231))+(((-1.0)*r02*sj4*x1216))+(((-1.0)*cj4*x1216*x1226))+(((-1.0)*cj4*x1218*x1224))+(((-1.0)*x1216*x1234))+(((-1.0)*cj4*x1220*x1224)));
evalcond[6]=((-0.00025116)+(((-0.04225)*cj0*x1232))+(((0.224)*x1215))+(((0.04225)*cj0*x1225))+((x1220*x1230))+(((-1.0)*x1228*x1229))+(((-0.0137)*x1236))+((x1218*x1230))+((px*sj0))+((x1227*x1228))+(((0.24475)*x1239))+(((-1.0)*x1219*x1221))+(((-1.0)*x1219*x1226))+(((-1.0)*py*x1216)));
evalcond[7]=((-0.26630543)+((x1218*x1219))+((x1219*x1220))+((x1225*x1228))+(((-1.0)*cj0*x1238))+(((-1.0)*px*x1216))+(((-0.24475)*x1241))+(((0.04225)*cj0*x1229))+(((-1.0)*py*x1224))+(((-1.0)*x1228*x1232))+((x1226*x1230))+((x1221*x1230))+(((-0.224)*x1214))+(((0.0137)*x1235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1242=(r11*sj5);
IkReal x1243=(cj5*sj0);
IkReal x1244=((1.0)*sj0);
IkReal x1245=(r01*sj5);
IkReal x1246=(cj0*cj5);
CheckValue<IkReal> x1247 = IKatan2WithCheck(IkReal(((((-1.0)*x1244*x1245))+((r00*x1243))+(((-1.0)*r10*x1246))+((cj0*x1242)))),(((r00*x1246))+(((-1.0)*cj0*x1245))+(((-1.0)*x1242*x1244))+((r10*x1243))),IKFAST_ATAN2_MAGTHRESH);
if(!x1247.valid){
continue;
}
CheckValue<IkReal> x1248=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1248.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1247.value)+(((1.5707963267949)*(x1248.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1249=IKcos(j2);
IkReal x1250=IKsin(j2);
IkReal x1251=((1.0)*cj0);
IkReal x1252=(r02*sj0);
IkReal x1253=(cj5*r11);
IkReal x1254=((0.021)*sj0);
IkReal x1255=(r10*sj5);
IkReal x1256=(cj5*r01);
IkReal x1257=(cj4*r12);
IkReal x1258=(cj0*sj4);
IkReal x1259=((1.0)*sj0);
IkReal x1260=(r11*sj5);
IkReal x1261=(r00*sj5);
IkReal x1262=(cj5*r00);
IkReal x1263=((0.04225)*sj0);
IkReal x1264=(r01*sj5);
IkReal x1265=((0.021)*cj0);
IkReal x1266=(r12*sj4);
IkReal x1267=(cj5*r10);
IkReal x1268=(sj0*sj4);
IkReal x1269=(cj4*x1256);
IkReal x1270=(sj3*x1249);
IkReal x1271=(sj3*x1250);
IkReal x1272=(sj5*x1265);
IkReal x1273=((0.04225)*x1262);
IkReal x1274=(cj3*x1250);
IkReal x1275=((0.04225)*cj0*sj5);
IkReal x1276=(cj3*x1249);
evalcond[0]=(x1274+((cj0*x1267))+((sj0*x1264))+(((-1.0)*x1251*x1260))+(((-1.0)*x1259*x1262)));
evalcond[1]=(((cj0*x1262))+((sj0*x1267))+(((-1.0)*x1251*x1264))+(((-1.0)*x1276))+(((-1.0)*x1259*x1260)));
evalcond[2]=((((-1.0)*cj4*x1251*x1253))+(((-1.0)*cj4*x1251*x1255))+x1249+((sj4*x1252))+((sj0*x1269))+(((-1.0)*x1251*x1266))+((cj4*sj0*x1261)));
evalcond[3]=(x1270+((x1258*x1261))+((x1256*x1258))+((x1253*x1268))+((x1255*x1268))+(((-1.0)*x1257*x1259))+(((-1.0)*cj4*r02*x1251)));
evalcond[4]=((((-1.0)*sj4*x1256*x1259))+((x1253*x1258))+((x1255*x1258))+(((-1.0)*x1251*x1257))+(((-1.0)*x1271))+((cj4*x1252))+(((-1.0)*sj4*x1259*x1261)));
evalcond[5]=((((-1.0)*cj4*x1255*x1259))+(((-1.0)*r02*sj4*x1251))+x1250+(((-1.0)*x1251*x1269))+(((-1.0)*x1259*x1266))+(((-1.0)*cj4*x1253*x1259))+(((-1.0)*cj4*x1251*x1261)));
evalcond[6]=((-0.00025116)+(((0.04225)*cj0*x1260))+(((-0.0137)*x1271))+(((0.24475)*x1274))+(((-1.0)*x1263*x1264))+(((-0.04225)*cj0*x1267))+(((0.224)*x1250))+((x1253*x1265))+((x1255*x1265))+(((-1.0)*x1254*x1261))+((x1262*x1263))+(((-1.0)*x1254*x1256))+((px*sj0))+(((-1.0)*py*x1251)));
evalcond[7]=((-0.26630543)+(((-1.0)*cj0*x1273))+(((0.04225)*cj0*x1264))+((x1261*x1265))+(((-1.0)*x1263*x1267))+((x1256*x1265))+(((-1.0)*px*x1251))+((x1253*x1254))+((x1260*x1263))+((x1254*x1255))+(((-0.224)*x1249))+(((-0.24475)*x1276))+(((0.0137)*x1270))+(((-1.0)*py*x1259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1277=((1.0)*r01);
IkReal x1278=(cj4*sj0);
IkReal x1279=((1.0)*r00);
IkReal x1280=(cj0*sj4);
IkReal x1281=((1.0)*sj0*sj4);
IkReal x1282=(cj0*cj4*cj5);
IkReal x1283=(cj0*cj4*sj5);
CheckValue<IkReal> x1284=IKPowWithIntegerCheck(sj1,-1);
if(!x1284.valid){
continue;
}
if( IKabs(((x1284.value)*(((((-1.0)*r10*sj5*x1278))+(((-1.0)*x1277*x1282))+(((-1.0)*cj5*r11*x1278))+(((-1.0)*r02*x1280))+(((-1.0)*x1279*x1283))+(((-1.0)*r12*x1281)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1281))+((r11*x1282))+((r10*x1283))+(((-1.0)*sj5*x1278*x1279))+(((-1.0)*cj5*x1277*x1278))+((r12*x1280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1284.value)*(((((-1.0)*r10*sj5*x1278))+(((-1.0)*x1277*x1282))+(((-1.0)*cj5*r11*x1278))+(((-1.0)*r02*x1280))+(((-1.0)*x1279*x1283))+(((-1.0)*r12*x1281))))))+IKsqr(((((-1.0)*r02*x1281))+((r11*x1282))+((r10*x1283))+(((-1.0)*sj5*x1278*x1279))+(((-1.0)*cj5*x1277*x1278))+((r12*x1280))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1284.value)*(((((-1.0)*r10*sj5*x1278))+(((-1.0)*x1277*x1282))+(((-1.0)*cj5*r11*x1278))+(((-1.0)*r02*x1280))+(((-1.0)*x1279*x1283))+(((-1.0)*r12*x1281))))), ((((-1.0)*r02*x1281))+((r11*x1282))+((r10*x1283))+(((-1.0)*sj5*x1278*x1279))+(((-1.0)*cj5*x1277*x1278))+((r12*x1280))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x1285=IKsin(j2);
IkReal x1286=((1.0)*sj4);
IkReal x1287=(r00*sj5);
IkReal x1288=(cj5*r01);
IkReal x1289=(cj4*sj0);
IkReal x1290=(r10*sj5);
IkReal x1291=(cj5*r11);
IkReal x1292=((1.0)*cj0*cj4);
evalcond[0]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21))+((cj1*x1285)));
evalcond[1]=(((x1288*x1289))+((r02*sj0*sj4))+(((-1.0)*cj0*r12*x1286))+(IKcos(j2))+(((-1.0)*x1290*x1292))+((x1287*x1289))+(((-1.0)*x1291*x1292)));
evalcond[2]=((((-1.0)*x1287*x1292))+(((-1.0)*x1288*x1292))+(((-1.0)*x1289*x1291))+(((-1.0)*x1289*x1290))+(((-1.0)*sj1*x1285))+(((-1.0)*r12*sj0*x1286))+(((-1.0)*cj0*r02*x1286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
IkReal x1293=cj1*cj1;
IkReal x1294=(cj1*cj2);
IkReal x1295=(cj4*r22);
IkReal x1296=(cj5*r20);
IkReal x1297=((1.0)*r21);
IkReal x1298=(cj5*sj4);
IkReal x1299=((1.0)*r20*sj4*sj5);
IkReal x1300=((-1.0)+x1293+(((-1.0)*x1293*(cj2*cj2))));
j3eval[0]=x1300;
j3eval[1]=((IKabs(((((-1.0)*sj1*x1296))+((x1294*x1295))+((r21*sj1*sj5))+(((-1.0)*x1294*x1297*x1298))+(((-1.0)*x1294*x1299)))))+(IKabs(((((-1.0)*sj1*x1299))+(((-1.0)*sj1*x1297*x1298))+((x1294*x1296))+((sj1*x1295))+(((-1.0)*sj5*x1294*x1297))))));
j3eval[2]=IKsign(x1300);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj1;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1301=(r00*sj5);
IkReal x1302=(cj5*r01);
IkReal x1303=(cj4*sj0);
IkReal x1304=(r02*sj4);
IkReal x1305=(r10*sj5);
IkReal x1306=(cj5*r11);
IkReal x1307=((1.0)*r12*sj4);
IkReal x1308=((1.0)*cj0*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+sj2+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=(cj2+(((-1.0)*x1306*x1308))+(((-1.0)*cj0*x1307))+((x1302*x1303))+(((-1.0)*x1305*x1308))+((sj0*x1304))+((x1301*x1303)));
evalcond[3]=((((-1.0)*x1303*x1306))+(((-1.0)*x1303*x1305))+(((-1.0)*sj0*x1307))+(((-1.0)*cj0*x1304))+(((-1.0)*x1301*x1308))+(((-1.0)*x1302*x1308)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
j3eval[2]=((IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*r20))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1309=((1.0)*cj0);
IkReal x1310=(r21*sj5);
IkReal x1311=(sj0*sj4);
IkReal x1312=(cj4*cj5);
IkReal x1313=((1.0)*sj5);
IkReal x1314=(cj4*sj0);
IkReal x1315=(cj5*r21);
IkReal x1316=(r00*sj5);
IkReal x1317=(cj5*r20);
IkReal x1318=(cj4*sj5);
IkReal x1319=(r01*x1312);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r22*sj4))+((r21*x1312))+((r20*x1318)));
evalcond[2]=(x1310+(((-1.0)*x1317)));
evalcond[3]=(((cj4*r22))+(((-1.0)*sj4*x1315))+(((-1.0)*r20*sj4*x1313)));
evalcond[4]=(((x1314*x1316))+(((-1.0)*r10*x1309*x1318))+(((-1.0)*r12*sj4*x1309))+((r02*x1311))+(((-1.0)*r11*x1309*x1312))+((sj0*x1319)));
evalcond[5]=((((-1.0)*r12*x1311))+(((-1.0)*r10*x1313*x1314))+(((-1.0)*cj4*x1309*x1316))+(((-1.0)*r11*sj0*x1312))+(((-1.0)*r02*sj4*x1309))+(((-1.0)*x1309*x1319)));
evalcond[6]=((-0.26630543)+(((-0.04225)*x1310))+(((0.04225)*x1317))+(((-0.021)*r20*sj5))+(((-0.021)*x1315))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1320=(cj5*r00);
IkReal x1321=((1.0)*cj0);
IkReal x1322=(cj0*sj5);
IkReal x1323=(cj5*r10);
IkReal x1324=(sj0*sj5);
if( IKabs((((r01*x1322))+(((-1.0)*sj0*x1323))+((r11*x1324))+(((-1.0)*x1320*x1321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1324))+((r11*x1322))+(((-1.0)*x1321*x1323))+((sj0*x1320)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1322))+(((-1.0)*sj0*x1323))+((r11*x1324))+(((-1.0)*x1320*x1321))))+IKsqr(((((-1.0)*r01*x1324))+((r11*x1322))+(((-1.0)*x1321*x1323))+((sj0*x1320))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r01*x1322))+(((-1.0)*sj0*x1323))+((r11*x1324))+(((-1.0)*x1320*x1321))), ((((-1.0)*r01*x1324))+((r11*x1322))+(((-1.0)*x1321*x1323))+((sj0*x1320))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1325=IKcos(j3);
IkReal x1326=IKsin(j3);
IkReal x1327=(cj5*r01);
IkReal x1328=(cj0*sj4);
IkReal x1329=(cj0*sj5);
IkReal x1330=((0.04225)*r11);
IkReal x1331=((0.021)*r10);
IkReal x1332=(r00*sj0);
IkReal x1333=((0.04225)*cj5);
IkReal x1334=((0.021)*sj0);
IkReal x1335=(sj0*sj5);
IkReal x1336=((0.04225)*r01);
IkReal x1337=((1.0)*sj4);
IkReal x1338=((1.0)*r11);
IkReal x1339=(cj0*r00);
IkReal x1340=(cj4*sj0);
IkReal x1341=(cj5*r11);
IkReal x1342=((1.0)*py);
IkReal x1343=((0.021)*cj0);
IkReal x1344=(cj0*r10);
IkReal x1345=(r10*sj0);
IkReal x1346=((1.0)*cj0*cj4);
evalcond[0]=(x1325+(((-1.0)*cj5*x1332))+((r01*x1335))+(((-1.0)*x1329*x1338))+((cj5*x1344)));
evalcond[1]=((((-1.0)*x1335*x1338))+x1326+(((-1.0)*r01*x1329))+((cj5*x1345))+((cj5*x1339)));
evalcond[2]=(x1325+(((-1.0)*r02*x1346))+((sj0*sj4*x1341))+((x1327*x1328))+(((-1.0)*r12*x1340))+((r00*sj5*x1328))+((r10*sj4*x1335)));
evalcond[3]=((((-1.0)*sj0*x1327*x1337))+(((-1.0)*r12*x1346))+(((-1.0)*x1326))+((r02*x1340))+((r10*sj5*x1328))+(((-1.0)*sj5*x1332*x1337))+((x1328*x1341)));
evalcond[4]=((0.22374884)+(((-1.0)*x1335*x1336))+((x1329*x1330))+((x1329*x1331))+(((-1.0)*x1327*x1334))+(((-1.0)*cj0*x1342))+(((-0.0137)*x1326))+(((0.24475)*x1325))+(((-0.021)*sj5*x1332))+((x1341*x1343))+((px*sj0))+(((-1.0)*x1333*x1344))+((x1332*x1333)));
evalcond[5]=(((x1329*x1336))+((x1327*x1343))+((x1331*x1335))+(((0.0137)*x1325))+(((0.24475)*x1326))+((x1334*x1341))+(((-1.0)*x1333*x1339))+(((-1.0)*sj0*x1342))+(((0.021)*r00*x1329))+(((-1.0)*x1333*x1345))+((x1330*x1335))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1347=((1.0)*cj0);
IkReal x1348=(r21*sj5);
IkReal x1349=(sj0*sj4);
IkReal x1350=(cj4*cj5);
IkReal x1351=((1.0)*sj5);
IkReal x1352=(cj4*sj0);
IkReal x1353=(cj5*r21);
IkReal x1354=(r00*sj5);
IkReal x1355=(cj5*r20);
IkReal x1356=(cj4*sj5);
IkReal x1357=(r01*x1350);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r22*sj4))+((r20*x1356))+((r21*x1350)));
evalcond[2]=(x1348+(((-1.0)*x1355)));
evalcond[3]=((((-1.0)*r20*sj4*x1351))+((cj4*r22))+(((-1.0)*sj4*x1353)));
evalcond[4]=((((-1.0)*r11*x1347*x1350))+(((-1.0)*r12*sj4*x1347))+((sj0*x1357))+((r02*x1349))+(((-1.0)*r10*x1347*x1356))+((x1352*x1354)));
evalcond[5]=((((-1.0)*cj4*x1347*x1354))+(((-1.0)*x1347*x1357))+(((-1.0)*r10*x1351*x1352))+(((-1.0)*r12*x1349))+(((-1.0)*r02*sj4*x1347))+(((-1.0)*r11*sj0*x1350)));
evalcond[6]=((-0.26630543)+(((-0.021)*r20*sj5))+pz+(((-0.021)*x1353))+(((0.04225)*x1355))+(((-0.04225)*x1348)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1358=(r01*sj5);
IkReal x1359=(cj5*r10);
IkReal x1360=(r11*sj5);
IkReal x1361=((1.0)*cj5*r00);
if( IKabs(((((-1.0)*cj0*x1361))+((sj0*x1360))+(((-1.0)*sj0*x1359))+((cj0*x1358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x1360))+((sj0*x1358))+(((-1.0)*sj0*x1361))+((cj0*x1359)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x1361))+((sj0*x1360))+(((-1.0)*sj0*x1359))+((cj0*x1358))))+IKsqr(((((-1.0)*cj0*x1360))+((sj0*x1358))+(((-1.0)*sj0*x1361))+((cj0*x1359))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*x1361))+((sj0*x1360))+(((-1.0)*sj0*x1359))+((cj0*x1358))), ((((-1.0)*cj0*x1360))+((sj0*x1358))+(((-1.0)*sj0*x1361))+((cj0*x1359))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1362=IKcos(j3);
IkReal x1363=IKsin(j3);
IkReal x1364=(cj5*r01);
IkReal x1365=(cj0*sj4);
IkReal x1366=(cj0*sj5);
IkReal x1367=((0.04225)*r11);
IkReal x1368=((0.021)*r10);
IkReal x1369=(r00*sj0);
IkReal x1370=((0.04225)*cj5);
IkReal x1371=((0.021)*sj0);
IkReal x1372=(sj0*sj5);
IkReal x1373=((0.04225)*r01);
IkReal x1374=((1.0)*sj4);
IkReal x1375=((1.0)*r11);
IkReal x1376=(cj0*r00);
IkReal x1377=(cj4*sj0);
IkReal x1378=(cj5*r11);
IkReal x1379=((1.0)*py);
IkReal x1380=((0.021)*cj0);
IkReal x1381=(cj0*r10);
IkReal x1382=(r10*sj0);
IkReal x1383=((1.0)*cj0*cj4);
evalcond[0]=(x1363+((cj5*x1376))+(((-1.0)*x1372*x1375))+((cj5*x1382))+(((-1.0)*r01*x1366)));
evalcond[1]=((((-1.0)*x1362))+(((-1.0)*cj5*x1369))+((cj5*x1381))+(((-1.0)*x1366*x1375))+((r01*x1372)));
evalcond[2]=(x1362+(((-1.0)*r12*x1377))+(((-1.0)*r02*x1383))+((r10*sj4*x1372))+((x1364*x1365))+((r00*sj5*x1365))+((sj0*sj4*x1378)));
evalcond[3]=(((x1365*x1378))+(((-1.0)*r12*x1383))+x1363+(((-1.0)*sj5*x1369*x1374))+(((-1.0)*sj0*x1364*x1374))+((r02*x1377))+((r10*sj5*x1365)));
evalcond[4]=((-0.22425116)+((x1366*x1367))+((x1366*x1368))+(((-1.0)*x1372*x1373))+(((-1.0)*cj0*x1379))+(((-0.24475)*x1362))+(((-1.0)*x1364*x1371))+(((-1.0)*x1370*x1381))+((x1369*x1370))+((px*sj0))+(((-0.021)*sj5*x1369))+(((0.0137)*x1363))+((x1378*x1380)));
evalcond[5]=(((x1364*x1380))+(((-1.0)*x1370*x1376))+(((-1.0)*sj0*x1379))+((x1366*x1373))+(((0.021)*r00*x1366))+((x1367*x1372))+(((0.24475)*x1363))+((x1371*x1378))+(((-1.0)*x1370*x1382))+((x1368*x1372))+(((0.0137)*x1362))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1384=((1.0)*cj0);
IkReal x1385=(cj0*sj5);
IkReal x1386=(cj5*sj0);
IkReal x1387=(sj0*sj4);
IkReal x1388=(cj5*r11);
IkReal x1389=(r00*sj5);
IkReal x1390=(cj4*sj0);
IkReal x1391=(r10*sj5);
IkReal x1392=(cj4*cj5*r01);
IkReal x1393=(r01*sj0*sj5);
IkReal x1394=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=(x1394+x1393+(((-1.0)*r00*x1386))+(((-1.0)*r11*sj5*x1384)));
evalcond[3]=((1.0)+(((-1.0)*cj4*x1384*x1391))+((cj4*r01*x1386))+((x1389*x1390))+(((-1.0)*r12*sj4*x1384))+(((-1.0)*cj4*x1384*x1388))+((r02*x1387)));
evalcond[4]=((((-1.0)*r01*sj4*x1386))+(((-1.0)*x1387*x1389))+((r10*sj4*x1385))+((cj0*sj4*x1388))+(((-1.0)*cj4*r12*x1384))+((r02*x1390)));
evalcond[5]=((((-1.0)*x1384*x1392))+(((-1.0)*r12*x1387))+(((-1.0)*x1390*x1391))+(((-1.0)*cj4*r11*x1386))+(((-1.0)*r02*sj4*x1384))+(((-1.0)*cj4*x1384*x1389)));
evalcond[6]=((-0.00025116)+(((-0.021)*sj0*x1389))+(((-0.021)*r01*x1386))+(((0.021)*cj0*x1388))+(((0.04225)*r11*x1385))+(((0.021)*r10*x1385))+(((-0.04225)*x1393))+(((-0.04225)*x1394))+(((0.04225)*r00*x1386))+((px*sj0))+(((-1.0)*py*x1384)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))+IKsqr((((r21*sj5))+(((-1.0)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))), (((r21*sj5))+(((-1.0)*cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1395=IKsin(j3);
IkReal x1396=IKcos(j3);
IkReal x1397=(cj0*r01);
IkReal x1398=((0.021)*cj5);
IkReal x1399=(r21*sj5);
IkReal x1400=((1.0)*cj0);
IkReal x1401=((0.04225)*sj5);
IkReal x1402=(cj5*sj4);
IkReal x1403=((1.0)*sj5);
IkReal x1404=(r11*sj0);
IkReal x1405=((1.0)*sj0);
IkReal x1406=(cj5*r20);
IkReal x1407=((0.021)*sj5);
IkReal x1408=(r10*sj0);
IkReal x1409=(cj0*r00);
IkReal x1410=(sj4*sj5);
IkReal x1411=(cj5*x1409);
evalcond[0]=(x1399+(((-1.0)*x1406))+(((-1.0)*x1396)));
evalcond[1]=(x1395+((cj4*r22))+(((-1.0)*r21*x1402))+(((-1.0)*r20*sj4*x1403)));
evalcond[2]=(x1395+((cj5*x1408))+x1411+(((-1.0)*x1403*x1404))+(((-1.0)*x1397*x1403)));
evalcond[3]=((-0.49030543)+(((-1.0)*r21*x1398))+(((-0.04225)*x1399))+(((-0.24475)*x1396))+pz+(((0.0137)*x1395))+(((-1.0)*r20*x1407))+(((0.04225)*x1406)));
evalcond[4]=(x1396+((x1397*x1402))+(((-1.0)*cj4*r12*x1405))+(((-1.0)*cj4*r02*x1400))+((x1409*x1410))+((x1402*x1404))+((x1408*x1410)));
evalcond[5]=((((-0.04225)*cj5*x1408))+((x1397*x1401))+(((-0.04225)*x1411))+(((-1.0)*px*x1400))+((x1397*x1398))+(((0.24475)*x1395))+((x1398*x1404))+(((0.0137)*x1396))+((x1401*x1404))+(((-1.0)*py*x1405))+((x1407*x1408))+((x1407*x1409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1412=((1.0)*cj0);
IkReal x1413=(cj0*sj5);
IkReal x1414=(cj5*sj0);
IkReal x1415=(sj0*sj4);
IkReal x1416=(cj5*r11);
IkReal x1417=(r00*sj5);
IkReal x1418=(cj4*sj0);
IkReal x1419=(r10*sj5);
IkReal x1420=(cj4*cj5*r01);
IkReal x1421=(r01*sj0*sj5);
IkReal x1422=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*r11*sj5*x1412))+x1421+x1422+(((-1.0)*r00*x1414)));
evalcond[3]=((-1.0)+((x1417*x1418))+(((-1.0)*r12*sj4*x1412))+(((-1.0)*cj4*x1412*x1416))+(((-1.0)*cj4*x1412*x1419))+((cj4*r01*x1414))+((r02*x1415)));
evalcond[4]=((((-1.0)*r01*sj4*x1414))+((r10*sj4*x1413))+(((-1.0)*x1415*x1417))+(((-1.0)*cj4*r12*x1412))+((cj0*sj4*x1416))+((r02*x1418)));
evalcond[5]=((((-1.0)*r12*x1415))+(((-1.0)*cj4*r11*x1414))+(((-1.0)*cj4*x1412*x1417))+(((-1.0)*r02*sj4*x1412))+(((-1.0)*x1418*x1419))+(((-1.0)*x1412*x1420)));
evalcond[6]=((-0.00025116)+(((-0.04225)*x1422))+(((-0.04225)*x1421))+(((0.04225)*r00*x1414))+(((0.021)*cj0*x1416))+(((-0.021)*r01*x1414))+(((-0.021)*sj0*x1417))+((px*sj0))+(((0.021)*r10*x1413))+(((-1.0)*py*x1412))+(((0.04225)*r11*x1413)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1423=((1.0)*sj4);
if( IKabs((((cj4*r22))+(((-1.0)*r20*sj5*x1423))+(((-1.0)*cj5*r21*x1423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r22))+(((-1.0)*r20*sj5*x1423))+(((-1.0)*cj5*r21*x1423))))+IKsqr((((cj5*r20))+(((-1.0)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj4*r22))+(((-1.0)*r20*sj5*x1423))+(((-1.0)*cj5*r21*x1423))), (((cj5*r20))+(((-1.0)*r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1424=IKsin(j3);
IkReal x1425=IKcos(j3);
IkReal x1426=(cj0*r01);
IkReal x1427=((0.021)*cj5);
IkReal x1428=(r21*sj5);
IkReal x1429=((1.0)*cj0);
IkReal x1430=((0.04225)*sj5);
IkReal x1431=(cj5*sj4);
IkReal x1432=((1.0)*sj5);
IkReal x1433=(r11*sj0);
IkReal x1434=((1.0)*sj0);
IkReal x1435=(cj5*r20);
IkReal x1436=((0.021)*sj5);
IkReal x1437=(r10*sj0);
IkReal x1438=(cj0*r00);
IkReal x1439=(sj4*sj5);
IkReal x1440=(cj5*x1438);
evalcond[0]=((((-1.0)*x1435))+x1425+x1428);
evalcond[1]=(((cj4*r22))+(((-1.0)*r21*x1431))+(((-1.0)*r20*sj4*x1432))+(((-1.0)*x1424)));
evalcond[2]=(((cj5*x1437))+x1424+x1440+(((-1.0)*x1426*x1432))+(((-1.0)*x1432*x1433)));
evalcond[3]=((-0.04230543)+(((-0.04225)*x1428))+(((-1.0)*r21*x1427))+(((0.24475)*x1425))+(((-0.0137)*x1424))+pz+(((-1.0)*r20*x1436))+(((0.04225)*x1435)));
evalcond[4]=((((-1.0)*cj4*r02*x1429))+((x1437*x1439))+(((-1.0)*cj4*r12*x1434))+((x1438*x1439))+((x1426*x1431))+x1425+((x1431*x1433)));
evalcond[5]=(((x1436*x1438))+((x1436*x1437))+(((-1.0)*px*x1429))+((x1430*x1433))+((x1426*x1427))+(((-0.04225)*cj5*x1437))+((x1427*x1433))+(((0.24475)*x1424))+((x1426*x1430))+(((-1.0)*py*x1434))+(((0.0137)*x1425))+(((-0.04225)*x1440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1441=IKPowWithIntegerCheck(cj2,-1);
if(!x1441.valid){
continue;
}
CheckValue<IkReal> x1442=IKPowWithIntegerCheck(sj2,-1);
if(!x1442.valid){
continue;
}
if( IKabs(((x1441.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1442.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1441.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))))+IKsqr(((x1442.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1441.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))), ((x1442.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1443=IKsin(j3);
IkReal x1444=IKcos(j3);
IkReal x1445=(cj0*sj5);
IkReal x1446=((0.04225)*r11);
IkReal x1447=((0.021)*r10);
IkReal x1448=(r21*sj5);
IkReal x1449=(sj0*sj5);
IkReal x1450=(cj0*cj5);
IkReal x1451=((0.04225)*r00);
IkReal x1452=((0.04225)*r01);
IkReal x1453=(cj4*r02);
IkReal x1454=((1.0)*cj0);
IkReal x1455=(cj4*r12);
IkReal x1456=((1.0)*r00);
IkReal x1457=(r01*sj4);
IkReal x1458=(r11*sj4);
IkReal x1459=((1.0)*r11);
IkReal x1460=(cj5*sj0);
IkReal x1461=(r10*sj4);
IkReal x1462=((1.0)*r20);
IkReal x1463=((1.0)*sj0);
IkReal x1464=((0.021)*r11);
IkReal x1465=(cj5*r21);
IkReal x1466=((0.04225)*r10);
IkReal x1467=((0.021)*r00);
IkReal x1468=((0.021)*cj5*r01);
IkReal x1469=(sj2*x1443);
IkReal x1470=(sj2*x1444);
IkReal x1471=(cj2*x1444);
IkReal x1472=(cj2*x1443);
evalcond[0]=((((-1.0)*cj5*x1462))+(((-1.0)*x1471))+x1448);
evalcond[1]=(((cj4*r22))+x1472+(((-1.0)*sj4*sj5*x1462))+(((-1.0)*sj4*x1465)));
evalcond[2]=(x1443+((r00*x1450))+((r10*x1460))+(((-1.0)*x1449*x1459))+(((-1.0)*r01*x1445)));
evalcond[3]=(((r10*x1450))+(((-1.0)*x1456*x1460))+(((-1.0)*x1445*x1459))+x1470+((r01*x1449)));
evalcond[4]=((-0.26630543)+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+pz+(((-0.224)*cj2))+(((-0.24475)*x1471))+(((0.0137)*x1472))+(((-0.021)*x1465))+(((-0.04225)*x1448)));
evalcond[5]=(((r00*sj4*x1445))+((x1450*x1457))+((x1458*x1460))+(((-1.0)*x1455*x1463))+(((-1.0)*x1453*x1454))+x1444+((x1449*x1461)));
evalcond[6]=(((x1450*x1458))+(((-1.0)*x1457*x1460))+((x1445*x1461))+(((-1.0)*x1454*x1455))+(((-1.0)*sj4*x1449*x1456))+((sj0*x1453))+(((-1.0)*x1469)));
evalcond[7]=((((-1.0)*py*x1463))+((x1445*x1452))+((x1445*x1467))+(((-1.0)*px*x1454))+(((0.24475)*x1443))+((x1460*x1464))+(((-1.0)*x1460*x1466))+(((0.0137)*x1444))+(((0.021)*r01*x1450))+((x1447*x1449))+((x1446*x1449))+(((-1.0)*x1450*x1451)));
evalcond[8]=((-0.00025116)+((x1445*x1447))+((x1445*x1446))+(((0.224)*sj2))+((x1451*x1460))+((x1450*x1464))+(((0.24475)*x1470))+(((-1.0)*x1449*x1467))+((px*sj0))+(((-1.0)*py*x1454))+(((-0.0137)*x1469))+(((-1.0)*x1450*x1466))+(((-1.0)*x1449*x1452))+(((-0.021)*r01*x1460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1473=((1.0)*cj5);
CheckValue<IkReal> x1474=IKPowWithIntegerCheck(cj2,-1);
if(!x1474.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r00*x1473))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1473)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1474.value)*(((((-1.0)*r20*x1473))+((r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r00*x1473))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1473))))+IKsqr(((x1474.value)*(((((-1.0)*r20*x1473))+((r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r00*x1473))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1473))), ((x1474.value)*(((((-1.0)*r20*x1473))+((r21*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1475=IKsin(j3);
IkReal x1476=IKcos(j3);
IkReal x1477=(cj0*sj5);
IkReal x1478=((0.04225)*r11);
IkReal x1479=((0.021)*r10);
IkReal x1480=(r21*sj5);
IkReal x1481=(sj0*sj5);
IkReal x1482=(cj0*cj5);
IkReal x1483=((0.04225)*r00);
IkReal x1484=((0.04225)*r01);
IkReal x1485=(cj4*r02);
IkReal x1486=((1.0)*cj0);
IkReal x1487=(cj4*r12);
IkReal x1488=((1.0)*r00);
IkReal x1489=(r01*sj4);
IkReal x1490=(r11*sj4);
IkReal x1491=((1.0)*r11);
IkReal x1492=(cj5*sj0);
IkReal x1493=(r10*sj4);
IkReal x1494=((1.0)*r20);
IkReal x1495=((1.0)*sj0);
IkReal x1496=((0.021)*r11);
IkReal x1497=(cj5*r21);
IkReal x1498=((0.04225)*r10);
IkReal x1499=((0.021)*r00);
IkReal x1500=((0.021)*cj5*r01);
IkReal x1501=(sj2*x1475);
IkReal x1502=(sj2*x1476);
IkReal x1503=(cj2*x1476);
IkReal x1504=(cj2*x1475);
evalcond[0]=((((-1.0)*x1503))+x1480+(((-1.0)*cj5*x1494)));
evalcond[1]=(((cj4*r22))+(((-1.0)*sj4*x1497))+x1504+(((-1.0)*sj4*sj5*x1494)));
evalcond[2]=((((-1.0)*r01*x1477))+((r10*x1492))+((r00*x1482))+(((-1.0)*x1481*x1491))+x1475);
evalcond[3]=(((r10*x1482))+((r01*x1481))+x1502+(((-1.0)*x1477*x1491))+(((-1.0)*x1488*x1492)));
evalcond[4]=((-0.26630543)+(((-0.021)*x1497))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+(((0.0137)*x1504))+pz+(((-0.224)*cj2))+(((-0.24475)*x1503))+(((-0.04225)*x1480)));
evalcond[5]=((((-1.0)*x1487*x1495))+((x1482*x1489))+((r00*sj4*x1477))+((x1481*x1493))+(((-1.0)*x1485*x1486))+x1476+((x1490*x1492)));
evalcond[6]=(((x1482*x1490))+((sj0*x1485))+(((-1.0)*x1501))+((x1477*x1493))+(((-1.0)*x1489*x1492))+(((-1.0)*x1486*x1487))+(((-1.0)*sj4*x1481*x1488)));
evalcond[7]=((((-1.0)*x1482*x1483))+((x1477*x1499))+((x1477*x1484))+(((-1.0)*px*x1486))+(((-1.0)*x1492*x1498))+((x1492*x1496))+(((0.24475)*x1475))+(((0.021)*r01*x1482))+(((0.0137)*x1476))+((x1478*x1481))+(((-1.0)*py*x1495))+((x1479*x1481)));
evalcond[8]=((-0.00025116)+(((0.224)*sj2))+((x1482*x1496))+(((-1.0)*x1482*x1498))+(((-1.0)*x1481*x1484))+(((-1.0)*x1481*x1499))+((x1483*x1492))+(((0.24475)*x1502))+((px*sj0))+((x1477*x1479))+((x1477*x1478))+(((-1.0)*py*x1486))+(((-0.021)*r01*x1492))+(((-0.0137)*x1501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1505 = IKatan2WithCheck(IkReal((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))),(((r21*sj5))+(((-1.0)*cj5*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x1505.valid){
continue;
}
CheckValue<IkReal> x1506=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1506.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1505.value)+(((1.5707963267949)*(x1506.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1507=IKsin(j3);
IkReal x1508=IKcos(j3);
IkReal x1509=(cj0*sj5);
IkReal x1510=((0.04225)*r11);
IkReal x1511=((0.021)*r10);
IkReal x1512=(r21*sj5);
IkReal x1513=(sj0*sj5);
IkReal x1514=(cj0*cj5);
IkReal x1515=((0.04225)*r00);
IkReal x1516=((0.04225)*r01);
IkReal x1517=(cj4*r02);
IkReal x1518=((1.0)*cj0);
IkReal x1519=(cj4*r12);
IkReal x1520=((1.0)*r00);
IkReal x1521=(r01*sj4);
IkReal x1522=(r11*sj4);
IkReal x1523=((1.0)*r11);
IkReal x1524=(cj5*sj0);
IkReal x1525=(r10*sj4);
IkReal x1526=((1.0)*r20);
IkReal x1527=((1.0)*sj0);
IkReal x1528=((0.021)*r11);
IkReal x1529=(cj5*r21);
IkReal x1530=((0.04225)*r10);
IkReal x1531=((0.021)*r00);
IkReal x1532=((0.021)*cj5*r01);
IkReal x1533=(sj2*x1507);
IkReal x1534=(sj2*x1508);
IkReal x1535=(cj2*x1508);
IkReal x1536=(cj2*x1507);
evalcond[0]=((((-1.0)*x1535))+(((-1.0)*cj5*x1526))+x1512);
evalcond[1]=((((-1.0)*sj4*x1529))+((cj4*r22))+x1536+(((-1.0)*sj4*sj5*x1526)));
evalcond[2]=(((r10*x1524))+(((-1.0)*r01*x1509))+((r00*x1514))+(((-1.0)*x1513*x1523))+x1507);
evalcond[3]=(((r10*x1514))+((r01*x1513))+x1534+(((-1.0)*x1520*x1524))+(((-1.0)*x1509*x1523)));
evalcond[4]=((-0.26630543)+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+pz+(((-0.224)*cj2))+(((0.0137)*x1536))+(((-0.24475)*x1535))+(((-0.04225)*x1512))+(((-0.021)*x1529)));
evalcond[5]=(((x1513*x1525))+((x1522*x1524))+(((-1.0)*x1519*x1527))+x1508+(((-1.0)*x1517*x1518))+((r00*sj4*x1509))+((x1514*x1521)));
evalcond[6]=((((-1.0)*x1533))+((x1509*x1525))+(((-1.0)*x1518*x1519))+((sj0*x1517))+(((-1.0)*x1521*x1524))+(((-1.0)*sj4*x1513*x1520))+((x1514*x1522)));
evalcond[7]=((((-1.0)*x1524*x1530))+((x1509*x1516))+((x1524*x1528))+((x1510*x1513))+((x1509*x1531))+(((-1.0)*px*x1518))+(((-1.0)*x1514*x1515))+(((0.0137)*x1508))+(((0.24475)*x1507))+(((0.021)*r01*x1514))+(((-1.0)*py*x1527))+((x1511*x1513)));
evalcond[8]=((-0.00025116)+((x1509*x1511))+((x1509*x1510))+(((0.224)*sj2))+(((-1.0)*x1513*x1516))+(((-1.0)*x1513*x1531))+(((-1.0)*x1514*x1530))+(((-1.0)*py*x1518))+((px*sj0))+(((-0.021)*r01*x1524))+(((-0.0137)*x1533))+(((0.24475)*x1534))+((x1515*x1524))+((x1514*x1528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1537=(r00*sj5);
IkReal x1538=(cj5*r01);
IkReal x1539=(cj4*sj0);
IkReal x1540=(r02*sj4);
IkReal x1541=(r10*sj5);
IkReal x1542=(cj5*r11);
IkReal x1543=((1.0)*r12*sj4);
IkReal x1544=((1.0)*cj0*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=(((x1538*x1539))+cj2+((x1537*x1539))+((sj0*x1540))+(((-1.0)*x1542*x1544))+(((-1.0)*x1541*x1544))+(((-1.0)*cj0*x1543)));
evalcond[3]=((((-1.0)*x1539*x1542))+(((-1.0)*x1539*x1541))+(((-1.0)*cj0*x1540))+(((-1.0)*sj0*x1543))+(((-1.0)*x1537*x1544))+(((-1.0)*x1538*x1544)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1545=((1.0)*r21);
j3eval[0]=cj2;
j3eval[1]=((IKabs((((cj5*r20))+(((-1.0)*sj5*x1545)))))+(IKabs(((((-1.0)*cj5*sj4*x1545))+((cj4*r22))+(((-1.0)*r20*sj4*sj5))))));
j3eval[2]=IKsign(cj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1546=((1.0)*cj0);
IkReal x1547=(r21*sj5);
IkReal x1548=(sj0*sj4);
IkReal x1549=(cj4*cj5);
IkReal x1550=((1.0)*sj5);
IkReal x1551=(cj4*sj0);
IkReal x1552=(cj5*r21);
IkReal x1553=(r00*sj5);
IkReal x1554=(cj5*r20);
IkReal x1555=(cj4*sj5);
IkReal x1556=(r01*x1549);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r22*sj4))+((r21*x1549))+((r20*x1555)));
evalcond[2]=((((-1.0)*x1554))+x1547);
evalcond[3]=(((cj4*r22))+(((-1.0)*sj4*x1552))+(((-1.0)*r20*sj4*x1550)));
evalcond[4]=(((x1551*x1553))+(((-1.0)*r11*x1546*x1549))+(((-1.0)*r12*sj4*x1546))+((r02*x1548))+((sj0*x1556))+(((-1.0)*r10*x1546*x1555)));
evalcond[5]=((((-1.0)*r10*x1550*x1551))+(((-1.0)*x1546*x1556))+(((-1.0)*cj4*x1546*x1553))+(((-1.0)*r12*x1548))+(((-1.0)*r11*sj0*x1549))+(((-1.0)*r02*sj4*x1546)));
evalcond[6]=((0.26630543)+(((0.04225)*x1554))+(((-0.021)*x1552))+(((-0.021)*r20*sj5))+pz+(((-0.04225)*x1547)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1557=(r11*sj5);
IkReal x1558=(cj5*sj0);
IkReal x1559=((1.0)*sj0);
IkReal x1560=(r01*sj5);
IkReal x1561=(cj0*cj5);
if( IKabs(((((-1.0)*cj0*x1560))+(((-1.0)*x1557*x1559))+((r00*x1561))+((r10*x1558)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1558))+(((-1.0)*x1559*x1560))+(((-1.0)*r10*x1561))+((cj0*x1557)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x1560))+(((-1.0)*x1557*x1559))+((r00*x1561))+((r10*x1558))))+IKsqr((((r00*x1558))+(((-1.0)*x1559*x1560))+(((-1.0)*r10*x1561))+((cj0*x1557))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*x1560))+(((-1.0)*x1557*x1559))+((r00*x1561))+((r10*x1558))), (((r00*x1558))+(((-1.0)*x1559*x1560))+(((-1.0)*r10*x1561))+((cj0*x1557))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1562=IKcos(j3);
IkReal x1563=IKsin(j3);
IkReal x1564=(cj5*r01);
IkReal x1565=(cj0*sj4);
IkReal x1566=(cj0*sj5);
IkReal x1567=((0.04225)*r11);
IkReal x1568=((0.021)*r10);
IkReal x1569=(r00*sj0);
IkReal x1570=((0.04225)*cj5);
IkReal x1571=((0.021)*sj0);
IkReal x1572=(sj0*sj5);
IkReal x1573=((0.04225)*r01);
IkReal x1574=((1.0)*sj4);
IkReal x1575=((1.0)*r11);
IkReal x1576=(cj0*r00);
IkReal x1577=(cj4*sj0);
IkReal x1578=(cj5*r11);
IkReal x1579=((1.0)*py);
IkReal x1580=((0.021)*cj0);
IkReal x1581=(cj0*r10);
IkReal x1582=(r10*sj0);
IkReal x1583=((1.0)*x1563);
IkReal x1584=((1.0)*cj0*cj4);
evalcond[0]=((((-1.0)*x1566*x1575))+x1562+(((-1.0)*cj5*x1569))+((r01*x1572))+((cj5*x1581)));
evalcond[1]=((((-1.0)*x1583))+(((-1.0)*r01*x1566))+((cj5*x1576))+(((-1.0)*x1572*x1575))+((cj5*x1582)));
evalcond[2]=((((-1.0)*r02*x1584))+(((-1.0)*r12*x1577))+((x1564*x1565))+((r00*sj5*x1565))+(((-1.0)*x1562))+((sj0*sj4*x1578))+((r10*sj4*x1572)));
evalcond[3]=((((-1.0)*x1583))+(((-1.0)*sj5*x1569*x1574))+((r10*sj5*x1565))+((r02*x1577))+(((-1.0)*sj0*x1564*x1574))+((x1565*x1578))+(((-1.0)*r12*x1584)));
evalcond[4]=((0.22374884)+((x1566*x1567))+((x1566*x1568))+(((0.24475)*x1562))+((x1569*x1570))+(((-1.0)*x1572*x1573))+(((-0.021)*sj5*x1569))+(((-1.0)*x1570*x1581))+(((-1.0)*x1564*x1571))+(((-0.0137)*x1563))+((px*sj0))+((x1578*x1580))+(((-1.0)*cj0*x1579)));
evalcond[5]=(((x1564*x1580))+((x1571*x1578))+(((0.021)*r00*x1566))+((x1567*x1572))+((x1566*x1573))+(((-1.0)*x1570*x1576))+(((-1.0)*x1570*x1582))+((x1568*x1572))+(((-1.0)*sj0*x1579))+(((-0.0137)*x1562))+(((-0.24475)*x1563))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1585=((1.0)*cj0);
IkReal x1586=(r21*sj5);
IkReal x1587=(sj0*sj4);
IkReal x1588=(cj4*cj5);
IkReal x1589=((1.0)*sj5);
IkReal x1590=(cj4*sj0);
IkReal x1591=(cj5*r21);
IkReal x1592=(r00*sj5);
IkReal x1593=(cj5*r20);
IkReal x1594=(cj4*sj5);
IkReal x1595=(r01*x1588);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x1594))+((r22*sj4))+((r21*x1588)));
evalcond[2]=(x1586+(((-1.0)*x1593)));
evalcond[3]=(((cj4*r22))+(((-1.0)*sj4*x1591))+(((-1.0)*r20*sj4*x1589)));
evalcond[4]=(((x1590*x1592))+(((-1.0)*r12*sj4*x1585))+((r02*x1587))+((sj0*x1595))+(((-1.0)*r10*x1585*x1594))+(((-1.0)*r11*x1585*x1588)));
evalcond[5]=((((-1.0)*x1585*x1595))+(((-1.0)*r11*sj0*x1588))+(((-1.0)*r10*x1589*x1590))+(((-1.0)*r02*sj4*x1585))+(((-1.0)*cj4*x1585*x1592))+(((-1.0)*r12*x1587)));
evalcond[6]=((0.26630543)+(((0.04225)*x1593))+(((-0.021)*x1591))+(((-0.021)*r20*sj5))+pz+(((-0.04225)*x1586)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1596=((1.0)*sj0);
IkReal x1597=(r11*sj5);
IkReal x1598=(cj5*r00);
IkReal x1599=(cj5*r10);
IkReal x1600=(r01*sj5);
IkReal x1601=((1.0)*cj0);
if( IKabs(((((-1.0)*x1600*x1601))+((sj0*x1599))+((cj0*x1598))+(((-1.0)*x1596*x1597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x1600))+(((-1.0)*x1597*x1601))+((cj0*x1599))+(((-1.0)*x1596*x1598)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1600*x1601))+((sj0*x1599))+((cj0*x1598))+(((-1.0)*x1596*x1597))))+IKsqr((((sj0*x1600))+(((-1.0)*x1597*x1601))+((cj0*x1599))+(((-1.0)*x1596*x1598))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1600*x1601))+((sj0*x1599))+((cj0*x1598))+(((-1.0)*x1596*x1597))), (((sj0*x1600))+(((-1.0)*x1597*x1601))+((cj0*x1599))+(((-1.0)*x1596*x1598))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1602=IKsin(j3);
IkReal x1603=IKcos(j3);
IkReal x1604=(cj5*sj0);
IkReal x1605=((1.0)*sj4);
IkReal x1606=(cj0*sj5);
IkReal x1607=((0.04225)*r11);
IkReal x1608=((0.021)*r10);
IkReal x1609=((0.04225)*r00);
IkReal x1610=((0.021)*r00);
IkReal x1611=((0.021)*r01);
IkReal x1612=(sj0*sj5);
IkReal x1613=((0.04225)*r01);
IkReal x1614=(r10*sj4);
IkReal x1615=(cj0*cj5);
IkReal x1616=((1.0)*r11);
IkReal x1617=(cj4*sj0);
IkReal x1618=(r11*sj4);
IkReal x1619=((1.0)*py);
IkReal x1620=((0.021)*r11);
IkReal x1621=((0.04225)*r10);
IkReal x1622=((1.0)*x1603);
IkReal x1623=((1.0)*cj0*cj4);
evalcond[0]=((((-1.0)*x1606*x1616))+((r01*x1612))+(((-1.0)*r00*x1604))+(((-1.0)*x1622))+((r10*x1615)));
evalcond[1]=(((r00*x1615))+(((-1.0)*x1602))+(((-1.0)*x1612*x1616))+((r10*x1604))+(((-1.0)*r01*x1606)));
evalcond[2]=((((-1.0)*r12*x1623))+(((-1.0)*r00*x1605*x1612))+x1602+((x1615*x1618))+((x1606*x1614))+((r02*x1617))+(((-1.0)*r01*x1604*x1605)));
evalcond[3]=((((-1.0)*r12*x1617))+(((-1.0)*x1622))+((r01*sj4*x1615))+(((-1.0)*r02*x1623))+((r00*sj4*x1606))+((x1604*x1618))+((x1612*x1614)));
evalcond[4]=((-0.22425116)+(((0.0137)*x1602))+(((-1.0)*x1610*x1612))+(((-0.24475)*x1603))+(((-1.0)*cj0*x1619))+((x1615*x1620))+((px*sj0))+(((-1.0)*x1615*x1621))+((x1606*x1607))+((x1606*x1608))+(((-1.0)*x1612*x1613))+((x1604*x1609))+(((-1.0)*x1604*x1611)));
evalcond[5]=((((-1.0)*sj0*x1619))+(((-0.24475)*x1602))+((x1608*x1612))+(((-0.0137)*x1603))+((x1607*x1612))+(((-1.0)*x1609*x1615))+((x1604*x1620))+((x1606*x1610))+((x1606*x1613))+(((-1.0)*x1604*x1621))+((x1611*x1615))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1624=((1.0)*cj0);
IkReal x1625=(cj0*sj5);
IkReal x1626=(cj5*sj0);
IkReal x1627=(sj0*sj4);
IkReal x1628=(cj5*r11);
IkReal x1629=(r00*sj5);
IkReal x1630=(cj4*sj0);
IkReal x1631=(r10*sj5);
IkReal x1632=(cj4*cj5*r01);
IkReal x1633=(r01*sj0*sj5);
IkReal x1634=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*r00*x1626))+x1633+x1634+(((-1.0)*r11*sj5*x1624)));
evalcond[3]=((1.0)+((r02*x1627))+(((-1.0)*r12*sj4*x1624))+((cj4*r01*x1626))+(((-1.0)*cj4*x1624*x1628))+((x1629*x1630))+(((-1.0)*cj4*x1624*x1631)));
evalcond[4]=(((cj0*sj4*x1628))+((r02*x1630))+(((-1.0)*x1627*x1629))+(((-1.0)*cj4*r12*x1624))+(((-1.0)*r01*sj4*x1626))+((r10*sj4*x1625)));
evalcond[5]=((((-1.0)*r12*x1627))+(((-1.0)*cj4*r11*x1626))+(((-1.0)*x1624*x1632))+(((-1.0)*cj4*x1624*x1629))+(((-1.0)*x1630*x1631))+(((-1.0)*r02*sj4*x1624)));
evalcond[6]=((-0.00025116)+(((0.04225)*r11*x1625))+(((0.021)*r10*x1625))+(((-0.021)*r01*x1626))+(((0.021)*cj0*x1628))+(((-1.0)*py*x1624))+(((-0.04225)*x1633))+(((-0.04225)*x1634))+(((0.04225)*r00*x1626))+((px*sj0))+(((-0.021)*sj0*x1629)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1635=((1.0)*sj4);
if( IKabs((((cj4*r22))+(((-1.0)*cj5*r21*x1635))+(((-1.0)*r20*sj5*x1635)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r22))+(((-1.0)*cj5*r21*x1635))+(((-1.0)*r20*sj5*x1635))))+IKsqr((((cj5*r20))+(((-1.0)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj4*r22))+(((-1.0)*cj5*r21*x1635))+(((-1.0)*r20*sj5*x1635))), (((cj5*r20))+(((-1.0)*r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1636=IKcos(j3);
IkReal x1637=IKsin(j3);
IkReal x1638=(cj0*r01);
IkReal x1639=((0.021)*cj5);
IkReal x1640=(r21*sj5);
IkReal x1641=((1.0)*cj0);
IkReal x1642=((0.04225)*sj5);
IkReal x1643=(cj5*sj4);
IkReal x1644=((1.0)*sj5);
IkReal x1645=(r11*sj0);
IkReal x1646=((1.0)*sj0);
IkReal x1647=(cj5*r20);
IkReal x1648=((0.021)*sj5);
IkReal x1649=(r10*sj0);
IkReal x1650=(cj0*r00);
IkReal x1651=(sj4*sj5);
IkReal x1652=((1.0)*x1637);
IkReal x1653=(cj5*x1650);
evalcond[0]=(x1640+x1636+(((-1.0)*x1647)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x1652))+(((-1.0)*r20*sj4*x1644))+(((-1.0)*r21*x1643)));
evalcond[2]=((((-1.0)*x1644*x1645))+x1653+(((-1.0)*x1638*x1644))+(((-1.0)*x1652))+((cj5*x1649)));
evalcond[3]=((0.49030543)+(((0.24475)*x1636))+(((-1.0)*r20*x1648))+(((-1.0)*r21*x1639))+pz+(((-0.04225)*x1640))+(((0.04225)*x1647))+(((-0.0137)*x1637)));
evalcond[4]=(((x1650*x1651))+(((-1.0)*cj4*r02*x1641))+(((-1.0)*x1636))+((x1649*x1651))+((x1643*x1645))+(((-1.0)*cj4*r12*x1646))+((x1638*x1643)));
evalcond[5]=((((-1.0)*py*x1646))+(((-0.24475)*x1637))+((x1648*x1650))+(((-1.0)*px*x1641))+((x1648*x1649))+(((-0.04225)*cj5*x1649))+((x1642*x1645))+(((-0.04225)*x1653))+((x1639*x1645))+(((-0.0137)*x1636))+((x1638*x1642))+((x1638*x1639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1654=((1.0)*cj0);
IkReal x1655=(cj0*sj5);
IkReal x1656=(cj5*sj0);
IkReal x1657=(sj0*sj4);
IkReal x1658=(cj5*r11);
IkReal x1659=(r00*sj5);
IkReal x1660=(cj4*sj0);
IkReal x1661=(r10*sj5);
IkReal x1662=(cj4*cj5*r01);
IkReal x1663=(r01*sj0*sj5);
IkReal x1664=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*r11*sj5*x1654))+x1664+x1663+(((-1.0)*r00*x1656)));
evalcond[3]=((-1.0)+(((-1.0)*cj4*x1654*x1658))+((r02*x1657))+(((-1.0)*r12*sj4*x1654))+((cj4*r01*x1656))+((x1659*x1660))+(((-1.0)*cj4*x1654*x1661)));
evalcond[4]=(((r02*x1660))+(((-1.0)*r01*sj4*x1656))+((r10*sj4*x1655))+((cj0*sj4*x1658))+(((-1.0)*cj4*r12*x1654))+(((-1.0)*x1657*x1659)));
evalcond[5]=((((-1.0)*cj4*x1654*x1659))+(((-1.0)*x1654*x1662))+(((-1.0)*cj4*r11*x1656))+(((-1.0)*r02*sj4*x1654))+(((-1.0)*r12*x1657))+(((-1.0)*x1660*x1661)));
evalcond[6]=((-0.00025116)+(((-1.0)*py*x1654))+(((0.021)*cj0*x1658))+(((0.021)*r10*x1655))+(((-0.021)*sj0*x1659))+(((0.04225)*r11*x1655))+((px*sj0))+(((-0.04225)*x1664))+(((-0.04225)*x1663))+(((0.04225)*r00*x1656))+(((-0.021)*r01*x1656)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))+IKsqr((((r21*sj5))+(((-1.0)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))), (((r21*sj5))+(((-1.0)*cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1665=IKsin(j3);
IkReal x1666=IKcos(j3);
IkReal x1667=(cj0*r01);
IkReal x1668=((0.021)*cj5);
IkReal x1669=(r21*sj5);
IkReal x1670=((1.0)*cj0);
IkReal x1671=((0.04225)*sj5);
IkReal x1672=(cj5*sj4);
IkReal x1673=((1.0)*sj5);
IkReal x1674=(r11*sj0);
IkReal x1675=((1.0)*sj0);
IkReal x1676=(cj5*r20);
IkReal x1677=((0.021)*sj5);
IkReal x1678=(r10*sj0);
IkReal x1679=(cj0*r00);
IkReal x1680=(sj4*sj5);
IkReal x1681=((1.0)*x1666);
IkReal x1682=(cj5*x1679);
evalcond[0]=((((-1.0)*x1681))+x1669+(((-1.0)*x1676)));
evalcond[1]=(((cj4*r22))+x1665+(((-1.0)*r20*sj4*x1673))+(((-1.0)*r21*x1672)));
evalcond[2]=((((-1.0)*x1667*x1673))+(((-1.0)*x1673*x1674))+x1682+(((-1.0)*x1665))+((cj5*x1678)));
evalcond[3]=((0.04230543)+(((0.04225)*x1676))+(((-1.0)*r21*x1668))+(((0.0137)*x1665))+pz+(((-0.04225)*x1669))+(((-0.24475)*x1666))+(((-1.0)*r20*x1677)));
evalcond[4]=((((-1.0)*cj4*r12*x1675))+(((-1.0)*x1681))+((x1667*x1672))+(((-1.0)*cj4*r02*x1670))+((x1679*x1680))+((x1672*x1674))+((x1678*x1680)));
evalcond[5]=((((-1.0)*px*x1670))+((x1667*x1671))+((x1668*x1674))+(((-1.0)*py*x1675))+(((-0.04225)*x1682))+((x1667*x1668))+(((-0.0137)*x1666))+((x1671*x1674))+(((-0.24475)*x1665))+(((-0.04225)*cj5*x1678))+((x1677*x1679))+((x1677*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1683=((1.0)*sj4);
CheckValue<IkReal> x1684=IKPowWithIntegerCheck(cj2,-1);
if(!x1684.valid){
continue;
}
CheckValue<IkReal> x1685=IKPowWithIntegerCheck(sj2,-1);
if(!x1685.valid){
continue;
}
if( IKabs(((x1684.value)*(((((-1.0)*r20*sj5*x1683))+((cj4*r22))+(((-1.0)*cj5*r21*x1683)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1685.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1684.value)*(((((-1.0)*r20*sj5*x1683))+((cj4*r22))+(((-1.0)*cj5*r21*x1683))))))+IKsqr(((x1685.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1684.value)*(((((-1.0)*r20*sj5*x1683))+((cj4*r22))+(((-1.0)*cj5*r21*x1683))))), ((x1685.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1686=IKcos(j3);
IkReal x1687=IKsin(j3);
IkReal x1688=(cj0*sj5);
IkReal x1689=((0.04225)*r11);
IkReal x1690=((0.021)*r10);
IkReal x1691=(r21*sj5);
IkReal x1692=(sj0*sj5);
IkReal x1693=(cj0*cj5);
IkReal x1694=((0.04225)*r00);
IkReal x1695=((0.04225)*r01);
IkReal x1696=(cj4*r02);
IkReal x1697=((1.0)*cj0);
IkReal x1698=(cj4*r12);
IkReal x1699=((1.0)*r00);
IkReal x1700=(r01*sj4);
IkReal x1701=(r11*sj4);
IkReal x1702=((1.0)*r11);
IkReal x1703=(cj5*sj0);
IkReal x1704=(r10*sj4);
IkReal x1705=((1.0)*r20);
IkReal x1706=((1.0)*sj0);
IkReal x1707=((0.021)*r11);
IkReal x1708=(cj5*r21);
IkReal x1709=((0.04225)*r10);
IkReal x1710=((0.021)*r00);
IkReal x1711=((0.021)*cj5*r01);
IkReal x1712=(cj2*x1687);
IkReal x1713=(sj2*x1686);
IkReal x1714=((1.0)*x1687);
IkReal x1715=(cj2*x1686);
evalcond[0]=(x1715+x1691+(((-1.0)*cj5*x1705)));
evalcond[1]=(((cj4*r22))+(((-1.0)*sj4*x1708))+(((-1.0)*x1712))+(((-1.0)*sj4*sj5*x1705)));
evalcond[2]=(((r01*x1692))+((r10*x1693))+x1713+(((-1.0)*x1699*x1703))+(((-1.0)*x1688*x1702)));
evalcond[3]=(((r00*x1693))+(((-1.0)*x1714))+(((-1.0)*r01*x1688))+((r10*x1703))+(((-1.0)*x1692*x1702)));
evalcond[4]=((0.26630543)+(((0.224)*cj2))+(((-0.021)*x1708))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+(((0.24475)*x1715))+(((-0.04225)*x1691))+(((-0.0137)*x1712))+pz);
evalcond[5]=((((-1.0)*x1698*x1706))+((x1693*x1700))+(((-1.0)*x1696*x1697))+(((-1.0)*x1686))+((x1701*x1703))+((r00*sj4*x1688))+((x1692*x1704)));
evalcond[6]=(((x1688*x1704))+((x1693*x1701))+((sj0*x1696))+(((-1.0)*sj2*x1714))+(((-1.0)*x1697*x1698))+(((-1.0)*sj4*x1692*x1699))+(((-1.0)*x1700*x1703)));
evalcond[7]=((((-1.0)*py*x1706))+((x1690*x1692))+(((-0.0137)*x1686))+((x1703*x1707))+(((-0.24475)*x1687))+((x1689*x1692))+(((-1.0)*x1703*x1709))+((x1688*x1695))+((x1688*x1710))+(((0.021)*r01*x1693))+(((-1.0)*px*x1697))+(((-1.0)*x1693*x1694)));
evalcond[8]=((-0.00025116)+(((-1.0)*x1692*x1695))+(((0.224)*sj2))+(((-0.021)*r01*x1703))+((x1693*x1707))+(((-1.0)*py*x1697))+(((-0.0137)*sj2*x1687))+((x1694*x1703))+((x1688*x1689))+(((0.24475)*x1713))+((x1688*x1690))+(((-1.0)*x1692*x1710))+((px*sj0))+(((-1.0)*x1693*x1709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1716=((1.0)*sj5);
CheckValue<IkReal> x1717=IKPowWithIntegerCheck(cj2,-1);
if(!x1717.valid){
continue;
}
if( IKabs(((((-1.0)*cj0*r01*x1716))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x1716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1717.value)*((((cj5*r20))+(((-1.0)*r21*x1716)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r01*x1716))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x1716))))+IKsqr(((x1717.value)*((((cj5*r20))+(((-1.0)*r21*x1716))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*r01*x1716))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj0*x1716))), ((x1717.value)*((((cj5*r20))+(((-1.0)*r21*x1716))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1718=IKcos(j3);
IkReal x1719=IKsin(j3);
IkReal x1720=(cj0*sj5);
IkReal x1721=((0.04225)*r11);
IkReal x1722=((0.021)*r10);
IkReal x1723=(r21*sj5);
IkReal x1724=(sj0*sj5);
IkReal x1725=(cj0*cj5);
IkReal x1726=((0.04225)*r00);
IkReal x1727=((0.04225)*r01);
IkReal x1728=(cj4*r02);
IkReal x1729=((1.0)*cj0);
IkReal x1730=(cj4*r12);
IkReal x1731=((1.0)*r00);
IkReal x1732=(r01*sj4);
IkReal x1733=(r11*sj4);
IkReal x1734=((1.0)*r11);
IkReal x1735=(cj5*sj0);
IkReal x1736=(r10*sj4);
IkReal x1737=((1.0)*r20);
IkReal x1738=((1.0)*sj0);
IkReal x1739=((0.021)*r11);
IkReal x1740=(cj5*r21);
IkReal x1741=((0.04225)*r10);
IkReal x1742=((0.021)*r00);
IkReal x1743=((0.021)*cj5*r01);
IkReal x1744=(cj2*x1719);
IkReal x1745=(sj2*x1718);
IkReal x1746=((1.0)*x1719);
IkReal x1747=(cj2*x1718);
evalcond[0]=((((-1.0)*cj5*x1737))+x1723+x1747);
evalcond[1]=(((cj4*r22))+(((-1.0)*x1744))+(((-1.0)*sj4*sj5*x1737))+(((-1.0)*sj4*x1740)));
evalcond[2]=((((-1.0)*x1731*x1735))+((r01*x1724))+x1745+((r10*x1725))+(((-1.0)*x1720*x1734)));
evalcond[3]=(((r00*x1725))+((r10*x1735))+(((-1.0)*r01*x1720))+(((-1.0)*x1746))+(((-1.0)*x1724*x1734)));
evalcond[4]=((0.26630543)+(((-0.021)*x1740))+(((0.24475)*x1747))+(((0.224)*cj2))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+(((-0.04225)*x1723))+pz+(((-0.0137)*x1744)));
evalcond[5]=(((x1724*x1736))+((x1725*x1732))+((r00*sj4*x1720))+(((-1.0)*x1728*x1729))+(((-1.0)*x1718))+(((-1.0)*x1730*x1738))+((x1733*x1735)));
evalcond[6]=(((x1725*x1733))+(((-1.0)*sj4*x1724*x1731))+(((-1.0)*x1732*x1735))+(((-1.0)*x1729*x1730))+((sj0*x1728))+((x1720*x1736))+(((-1.0)*sj2*x1746)));
evalcond[7]=(((x1722*x1724))+(((-1.0)*x1735*x1741))+(((-1.0)*py*x1738))+((x1721*x1724))+(((0.021)*r01*x1725))+((x1720*x1727))+((x1735*x1739))+(((-0.0137)*x1718))+(((-1.0)*px*x1729))+(((-1.0)*x1725*x1726))+(((-0.24475)*x1719))+((x1720*x1742)));
evalcond[8]=((-0.00025116)+(((0.224)*sj2))+(((0.24475)*x1745))+((x1725*x1739))+(((-1.0)*py*x1729))+((x1726*x1735))+(((-0.021)*r01*x1735))+(((-1.0)*x1724*x1742))+(((-1.0)*x1725*x1741))+((x1720*x1721))+((x1720*x1722))+(((-1.0)*x1724*x1727))+(((-0.0137)*sj2*x1719))+((px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1748=((1.0)*sj4);
CheckValue<IkReal> x1749=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1749.valid){
continue;
}
CheckValue<IkReal> x1750 = IKatan2WithCheck(IkReal((((cj4*r22))+(((-1.0)*cj5*r21*x1748))+(((-1.0)*r20*sj5*x1748)))),(((cj5*r20))+(((-1.0)*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x1750.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1749.value)))+(x1750.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1751=IKcos(j3);
IkReal x1752=IKsin(j3);
IkReal x1753=(cj0*sj5);
IkReal x1754=((0.04225)*r11);
IkReal x1755=((0.021)*r10);
IkReal x1756=(r21*sj5);
IkReal x1757=(sj0*sj5);
IkReal x1758=(cj0*cj5);
IkReal x1759=((0.04225)*r00);
IkReal x1760=((0.04225)*r01);
IkReal x1761=(cj4*r02);
IkReal x1762=((1.0)*cj0);
IkReal x1763=(cj4*r12);
IkReal x1764=((1.0)*r00);
IkReal x1765=(r01*sj4);
IkReal x1766=(r11*sj4);
IkReal x1767=((1.0)*r11);
IkReal x1768=(cj5*sj0);
IkReal x1769=(r10*sj4);
IkReal x1770=((1.0)*r20);
IkReal x1771=((1.0)*sj0);
IkReal x1772=((0.021)*r11);
IkReal x1773=(cj5*r21);
IkReal x1774=((0.04225)*r10);
IkReal x1775=((0.021)*r00);
IkReal x1776=((0.021)*cj5*r01);
IkReal x1777=(cj2*x1752);
IkReal x1778=(sj2*x1751);
IkReal x1779=((1.0)*x1752);
IkReal x1780=(cj2*x1751);
evalcond[0]=(x1780+x1756+(((-1.0)*cj5*x1770)));
evalcond[1]=((((-1.0)*sj4*x1773))+((cj4*r22))+(((-1.0)*x1777))+(((-1.0)*sj4*sj5*x1770)));
evalcond[2]=((((-1.0)*x1753*x1767))+x1778+(((-1.0)*x1764*x1768))+((r01*x1757))+((r10*x1758)));
evalcond[3]=((((-1.0)*r01*x1753))+(((-1.0)*x1779))+((r10*x1768))+(((-1.0)*x1757*x1767))+((r00*x1758)));
evalcond[4]=((0.26630543)+(((0.24475)*x1780))+(((-0.021)*x1773))+(((0.224)*cj2))+(((-0.04225)*x1756))+(((-0.0137)*x1777))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+pz);
evalcond[5]=((((-1.0)*x1763*x1771))+((r00*sj4*x1753))+(((-1.0)*x1761*x1762))+((x1757*x1769))+((x1758*x1765))+(((-1.0)*x1751))+((x1766*x1768)));
evalcond[6]=((((-1.0)*x1762*x1763))+((sj0*x1761))+(((-1.0)*sj2*x1779))+((x1758*x1766))+((x1753*x1769))+(((-1.0)*x1765*x1768))+(((-1.0)*sj4*x1757*x1764)));
evalcond[7]=((((-1.0)*py*x1771))+((x1754*x1757))+(((-1.0)*x1758*x1759))+(((-1.0)*px*x1762))+(((-0.24475)*x1752))+((x1753*x1775))+(((0.021)*r01*x1758))+((x1753*x1760))+(((-0.0137)*x1751))+(((-1.0)*x1768*x1774))+((x1768*x1772))+((x1755*x1757)));
evalcond[8]=((-0.00025116)+(((-0.021)*r01*x1768))+(((0.224)*sj2))+((x1753*x1754))+((x1753*x1755))+(((-1.0)*x1758*x1774))+((x1758*x1772))+(((-1.0)*x1757*x1775))+((x1759*x1768))+(((0.24475)*x1778))+(((-1.0)*x1757*x1760))+((px*sj0))+(((-1.0)*py*x1762))+(((-0.0137)*sj2*x1752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1781=((1.0)*cj0);
IkReal x1782=(cj0*sj5);
IkReal x1783=(cj5*sj0);
IkReal x1784=(sj0*sj4);
IkReal x1785=(cj5*r11);
IkReal x1786=(r00*sj5);
IkReal x1787=(cj4*sj0);
IkReal x1788=(r10*sj5);
IkReal x1789=(cj4*cj5*r01);
IkReal x1790=(r01*sj0*sj5);
IkReal x1791=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=(x1791+x1790+(((-1.0)*r00*x1783))+(((-1.0)*r11*sj5*x1781)));
evalcond[3]=((1.0)+(((-1.0)*cj4*x1781*x1788))+(((-1.0)*cj4*x1781*x1785))+(((-1.0)*r12*sj4*x1781))+((r02*x1784))+((cj4*r01*x1783))+((x1786*x1787)));
evalcond[4]=((((-1.0)*r01*sj4*x1783))+(((-1.0)*cj4*r12*x1781))+((cj0*sj4*x1785))+((r10*sj4*x1782))+((r02*x1787))+(((-1.0)*x1784*x1786)));
evalcond[5]=((((-1.0)*r12*x1784))+(((-1.0)*cj4*r11*x1783))+(((-1.0)*cj4*x1781*x1786))+(((-1.0)*r02*sj4*x1781))+(((-1.0)*x1787*x1788))+(((-1.0)*x1781*x1789)));
evalcond[6]=((-0.00025116)+(((0.04225)*r00*x1783))+(((0.021)*cj0*x1785))+(((-0.021)*r01*x1783))+(((-1.0)*py*x1781))+(((-0.021)*sj0*x1786))+(((-0.04225)*x1791))+(((-0.04225)*x1790))+((px*sj0))+(((0.021)*r10*x1782))+(((0.04225)*r11*x1782)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1792=((1.0)*cj1);
IkReal x1793=(cj4*r22);
IkReal x1794=(cj5*r20);
IkReal x1795=((1.0)*sj1);
IkReal x1796=(r21*sj5);
IkReal x1797=(cj5*r21*sj4);
IkReal x1798=(r20*sj4*sj5);
if( IKabs(((((-1.0)*x1792*x1793))+(((-1.0)*x1795*x1796))+((sj1*x1794))+((cj1*x1797))+((cj1*x1798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1792*x1794))+((sj1*x1798))+((sj1*x1797))+(((-1.0)*x1793*x1795))+((cj1*x1796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1792*x1793))+(((-1.0)*x1795*x1796))+((sj1*x1794))+((cj1*x1797))+((cj1*x1798))))+IKsqr(((((-1.0)*x1792*x1794))+((sj1*x1798))+((sj1*x1797))+(((-1.0)*x1793*x1795))+((cj1*x1796))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1792*x1793))+(((-1.0)*x1795*x1796))+((sj1*x1794))+((cj1*x1797))+((cj1*x1798))), ((((-1.0)*x1792*x1794))+((sj1*x1798))+((sj1*x1797))+(((-1.0)*x1793*x1795))+((cj1*x1796))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1799=IKcos(j3);
IkReal x1800=IKsin(j3);
IkReal x1801=(cj0*r01);
IkReal x1802=((0.021)*cj5);
IkReal x1803=(r21*sj5);
IkReal x1804=((1.0)*cj0);
IkReal x1805=((0.04225)*sj5);
IkReal x1806=(cj5*sj4);
IkReal x1807=(r11*sj0);
IkReal x1808=((1.0)*sj5);
IkReal x1809=(cj5*r20);
IkReal x1810=((1.0)*sj0);
IkReal x1811=((0.021)*sj5);
IkReal x1812=(r10*sj0);
IkReal x1813=(cj0*r00);
IkReal x1814=(sj4*sj5);
IkReal x1815=(sj1*x1799);
IkReal x1816=(cj1*x1800);
IkReal x1817=(sj1*x1800);
IkReal x1818=((0.0137)*x1799);
IkReal x1819=(cj1*x1799);
IkReal x1820=(cj5*x1813);
IkReal x1821=(x1815+x1816);
evalcond[0]=(x1817+x1803+(((-1.0)*x1819))+(((-1.0)*x1809)));
evalcond[1]=((((-1.0)*r21*x1806))+((cj4*r22))+(((-1.0)*r20*sj4*x1808))+x1821);
evalcond[2]=((((-1.0)*x1801*x1808))+x1821+x1820+((cj5*x1812))+(((-1.0)*x1807*x1808)));
evalcond[3]=(((x1801*x1806))+((x1806*x1807))+((x1813*x1814))+((x1812*x1814))+(((-1.0)*cj4*r12*x1810))+(((-1.0)*cj4*r02*x1804))+x1819+(((-1.0)*x1817)));
evalcond[4]=((((-1.0)*r21*x1802))+(((-0.24475)*x1819))+(((-0.49030543)*cj1))+(((0.0137)*x1816))+(((0.0137)*x1815))+(((0.04225)*x1809))+(((0.24475)*x1817))+pz+(((-0.04225)*x1803))+(((-1.0)*r20*x1811)));
evalcond[5]=((((0.49030543)*sj1))+((x1802*x1807))+((x1801*x1802))+((x1801*x1805))+(((-0.0137)*x1817))+(((-0.04225)*cj5*x1812))+(((0.24475)*x1815))+(((0.24475)*x1816))+(((-1.0)*py*x1810))+(((-0.04225)*x1820))+((cj1*x1818))+((x1805*x1807))+((x1811*x1813))+((x1811*x1812))+(((-1.0)*px*x1804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1822=((1.0)*cj0);
IkReal x1823=(cj0*sj5);
IkReal x1824=(cj5*sj0);
IkReal x1825=(sj0*sj4);
IkReal x1826=(cj5*r11);
IkReal x1827=(r00*sj5);
IkReal x1828=(cj4*sj0);
IkReal x1829=(r10*sj5);
IkReal x1830=(cj4*cj5*r01);
IkReal x1831=(r01*sj0*sj5);
IkReal x1832=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*r11*sj5*x1822))+x1832+x1831+(((-1.0)*r00*x1824)));
evalcond[3]=((-1.0)+(((-1.0)*r12*sj4*x1822))+((cj4*r01*x1824))+((x1827*x1828))+(((-1.0)*cj4*x1822*x1829))+(((-1.0)*cj4*x1822*x1826))+((r02*x1825)));
evalcond[4]=((((-1.0)*cj4*r12*x1822))+(((-1.0)*x1825*x1827))+(((-1.0)*r01*sj4*x1824))+((cj0*sj4*x1826))+((r10*sj4*x1823))+((r02*x1828)));
evalcond[5]=((((-1.0)*cj4*r11*x1824))+(((-1.0)*r12*x1825))+(((-1.0)*cj4*x1822*x1827))+(((-1.0)*r02*sj4*x1822))+(((-1.0)*x1822*x1830))+(((-1.0)*x1828*x1829)));
evalcond[6]=((-0.00025116)+(((0.04225)*r11*x1823))+(((-1.0)*py*x1822))+(((-0.04225)*x1832))+(((-0.04225)*x1831))+(((-0.021)*r01*x1824))+(((0.021)*r10*x1823))+((px*sj0))+(((0.04225)*r00*x1824))+(((-0.021)*sj0*x1827))+(((0.021)*cj0*x1826)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1833=((1.0)*sj5);
IkReal x1834=(cj1*r20);
IkReal x1835=(r21*sj1);
IkReal x1836=(cj4*r22);
IkReal x1837=(r20*sj1);
IkReal x1838=(cj1*r21);
IkReal x1839=(cj5*sj4);
if( IKabs(((((-1.0)*x1833*x1835))+((cj5*x1837))+(((-1.0)*x1838*x1839))+(((-1.0)*sj4*x1833*x1834))+((cj1*x1836)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1833*x1838))+((x1835*x1839))+((sj4*sj5*x1837))+((cj5*x1834))+(((-1.0)*sj1*x1836)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1833*x1835))+((cj5*x1837))+(((-1.0)*x1838*x1839))+(((-1.0)*sj4*x1833*x1834))+((cj1*x1836))))+IKsqr(((((-1.0)*x1833*x1838))+((x1835*x1839))+((sj4*sj5*x1837))+((cj5*x1834))+(((-1.0)*sj1*x1836))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1833*x1835))+((cj5*x1837))+(((-1.0)*x1838*x1839))+(((-1.0)*sj4*x1833*x1834))+((cj1*x1836))), ((((-1.0)*x1833*x1838))+((x1835*x1839))+((sj4*sj5*x1837))+((cj5*x1834))+(((-1.0)*sj1*x1836))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1840=IKcos(j3);
IkReal x1841=IKsin(j3);
IkReal x1842=(cj0*r01);
IkReal x1843=((0.021)*cj5);
IkReal x1844=(r21*sj5);
IkReal x1845=((0.24475)*sj1);
IkReal x1846=((1.0)*cj0);
IkReal x1847=((0.04225)*sj5);
IkReal x1848=(cj5*sj4);
IkReal x1849=((1.0)*sj5);
IkReal x1850=(r11*sj0);
IkReal x1851=((1.0)*sj0);
IkReal x1852=(cj5*r20);
IkReal x1853=((0.021)*sj5);
IkReal x1854=(r10*sj0);
IkReal x1855=(cj0*r00);
IkReal x1856=(sj4*sj5);
IkReal x1857=(cj1*x1840);
IkReal x1858=(sj1*x1841);
IkReal x1859=(cj1*x1841);
IkReal x1860=(sj1*x1840);
IkReal x1861=(cj5*x1855);
IkReal x1862=(x1858+x1857);
evalcond[0]=((((-1.0)*x1852))+x1862+x1844);
evalcond[1]=(((cj4*r22))+(((-1.0)*x1859))+x1860+(((-1.0)*r21*x1848))+(((-1.0)*r20*sj4*x1849)));
evalcond[2]=(((cj5*x1854))+(((-1.0)*x1842*x1849))+(((-1.0)*x1849*x1850))+x1861+x1859+(((-1.0)*x1860)));
evalcond[3]=(((x1848*x1850))+((x1855*x1856))+((x1854*x1856))+x1862+((x1842*x1848))+(((-1.0)*cj4*r02*x1846))+(((-1.0)*cj4*r12*x1851)));
evalcond[4]=((((0.04225)*x1852))+(((-0.0137)*x1859))+(((-0.04230543)*cj1))+(((-0.04225)*x1844))+(((0.0137)*x1860))+pz+(((-1.0)*r21*x1843))+((x1841*x1845))+(((0.24475)*x1857))+(((-1.0)*r20*x1853)));
evalcond[5]=(((x1843*x1850))+(((-1.0)*px*x1846))+(((-0.04225)*cj5*x1854))+(((-1.0)*py*x1851))+((x1847*x1850))+(((-0.04225)*x1861))+((x1853*x1854))+((x1853*x1855))+(((0.0137)*x1857))+(((0.0137)*x1858))+(((-1.0)*x1840*x1845))+((x1842*x1847))+((x1842*x1843))+(((0.24475)*x1859))+(((0.04230543)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1863=(r00*sj5);
IkReal x1864=(cj5*r01);
IkReal x1865=(cj4*sj0);
IkReal x1866=(r02*sj4);
IkReal x1867=(r10*sj5);
IkReal x1868=(cj5*r11);
IkReal x1869=((1.0)*r12*sj4);
IkReal x1870=((1.0)*cj0*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+cj1+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*cj0*x1869))+((x1864*x1865))+(((-1.0)*x1868*x1870))+((x1863*x1865))+(((-1.0)*x1867*x1870))+((sj0*x1866)));
evalcond[3]=((((-1.0)*x1865*x1868))+(((-1.0)*x1865*x1867))+(((-1.0)*sj1))+(((-1.0)*x1864*x1870))+(((-1.0)*cj0*x1866))+(((-1.0)*x1863*x1870))+(((-1.0)*sj0*x1869)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj1;
j3eval[1]=((IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j3eval[2]=IKsign(sj1);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=cj1;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1871=((1.0)*cj0);
IkReal x1872=((0.021)*cj0);
IkReal x1873=(cj5*r01);
IkReal x1874=(r00*sj5);
IkReal x1875=(sj0*sj4);
IkReal x1876=(cj4*cj5);
IkReal x1877=(sj0*sj5);
IkReal x1878=((0.04225)*cj0);
IkReal x1879=(r01*sj5);
IkReal x1880=(cj0*sj4);
IkReal x1881=((1.0)*r11);
IkReal x1882=(cj5*r00);
IkReal x1883=(cj4*r10);
IkReal x1884=((1.0)*sj0);
IkReal x1885=(cj5*r11);
IkReal x1886=(cj4*x1873);
IkReal x1887=(cj5*r10*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((r21*x1876)));
evalcond[2]=(x1887+(((-1.0)*x1871*x1879))+((cj0*x1882))+(((-1.0)*x1877*x1881)));
evalcond[3]=((((-1.0)*r12*sj4*x1871))+((r02*x1875))+(((-1.0)*sj5*x1871*x1883))+((cj4*sj0*x1874))+((sj0*x1886))+(((-1.0)*r11*x1871*x1876)));
evalcond[4]=((-1.0)+(((-1.0)*x1877*x1883))+(((-1.0)*cj4*x1871*x1874))+(((-1.0)*r12*x1875))+(((-1.0)*x1871*x1886))+(((-1.0)*sj0*x1876*x1881))+(((-1.0)*r02*sj4*x1871)));
evalcond[5]=(((x1874*x1880))+((x1875*x1885))+((x1873*x1880))+(((-1.0)*cj4*r12*x1884))+((r10*sj5*x1875))+(((-1.0)*cj4*r02*x1871)));
evalcond[6]=((0.26630543)+(((-1.0)*px*x1871))+(((-1.0)*x1878*x1882))+(((0.021)*r10*x1877))+((x1872*x1873))+((x1872*x1874))+((x1878*x1879))+(((0.04225)*r11*x1877))+(((0.021)*sj0*x1885))+(((-1.0)*py*x1884))+(((-0.04225)*x1887)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((-1.0)*r21*sj5))))+IKsqr((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((-1.0)*r21*sj5))), (((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1888=IKcos(j3);
IkReal x1889=IKsin(j3);
IkReal x1890=(cj5*sj0);
IkReal x1891=(cj0*sj5);
IkReal x1892=(r21*sj5);
IkReal x1893=((1.0)*cj0);
IkReal x1894=((1.0)*sj4);
IkReal x1895=(sj0*sj5);
IkReal x1896=(r20*sj5);
IkReal x1897=(cj5*r21);
IkReal x1898=(cj5*r20);
IkReal x1899=(cj0*cj5*r11);
IkReal x1900=(cj0*cj5*r10);
evalcond[0]=((((-1.0)*x1898))+x1892+x1889);
evalcond[1]=(((cj4*r22))+x1888+(((-1.0)*x1894*x1897))+(((-1.0)*x1894*x1896)));
evalcond[2]=(((r01*x1895))+x1900+(((-1.0)*r00*x1890))+x1888+(((-1.0)*r11*x1891)));
evalcond[3]=((((0.0137)*x1888))+(((-0.021)*x1897))+(((-0.021)*x1896))+pz+(((0.24475)*x1889))+(((-0.04225)*x1892))+(((0.04225)*x1898)));
evalcond[4]=((((-1.0)*r01*x1890*x1894))+(((-1.0)*r00*x1894*x1895))+((r10*sj4*x1891))+(((-1.0)*cj4*r12*x1893))+((sj4*x1899))+((cj4*r02*sj0))+(((-1.0)*x1889)));
evalcond[5]=((0.22374884)+(((-0.04225)*r01*x1895))+(((0.04225)*r00*x1890))+(((0.021)*x1899))+(((0.04225)*r11*x1891))+(((0.021)*r10*x1891))+(((-0.021)*r00*x1895))+(((-0.021)*r01*x1890))+(((0.24475)*x1888))+((px*sj0))+(((-0.0137)*x1889))+(((-0.04225)*x1900))+(((-1.0)*py*x1893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1901=((1.0)*cj0);
IkReal x1902=((0.021)*cj0);
IkReal x1903=(cj5*r01);
IkReal x1904=(r00*sj5);
IkReal x1905=(sj0*sj4);
IkReal x1906=(cj4*cj5);
IkReal x1907=(sj0*sj5);
IkReal x1908=((0.04225)*cj0);
IkReal x1909=(r01*sj5);
IkReal x1910=(cj0*sj4);
IkReal x1911=((1.0)*r11);
IkReal x1912=(cj5*r00);
IkReal x1913=(cj4*r10);
IkReal x1914=((1.0)*sj0);
IkReal x1915=(cj5*r11);
IkReal x1916=(cj4*x1903);
IkReal x1917=(cj5*r10*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((r21*x1906)));
evalcond[2]=((((-1.0)*x1901*x1909))+(((-1.0)*x1907*x1911))+x1917+((cj0*x1912)));
evalcond[3]=((((-1.0)*r11*x1901*x1906))+(((-1.0)*sj5*x1901*x1913))+((sj0*x1916))+((cj4*sj0*x1904))+((r02*x1905))+(((-1.0)*r12*sj4*x1901)));
evalcond[4]=((1.0)+(((-1.0)*x1907*x1913))+(((-1.0)*r02*sj4*x1901))+(((-1.0)*x1901*x1916))+(((-1.0)*r12*x1905))+(((-1.0)*sj0*x1906*x1911))+(((-1.0)*cj4*x1901*x1904)));
evalcond[5]=(((x1904*x1910))+(((-1.0)*cj4*r02*x1901))+((x1905*x1915))+((x1903*x1910))+(((-1.0)*cj4*r12*x1914))+((r10*sj5*x1905)));
evalcond[6]=((-0.26630543)+(((-1.0)*py*x1914))+(((0.021)*sj0*x1915))+(((-1.0)*px*x1901))+(((0.04225)*r11*x1907))+((x1902*x1903))+((x1902*x1904))+((x1908*x1909))+(((-0.04225)*x1917))+(((0.021)*r10*x1907))+(((-1.0)*x1908*x1912)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1918=((1.0)*r20);
if( IKabs((((r21*sj5))+(((-1.0)*cj5*x1918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*sj5*x1918))+((cj4*r22))+(((-1.0)*cj5*r21*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj5))+(((-1.0)*cj5*x1918))))+IKsqr(((((-1.0)*sj4*sj5*x1918))+((cj4*r22))+(((-1.0)*cj5*r21*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj5))+(((-1.0)*cj5*x1918))), ((((-1.0)*sj4*sj5*x1918))+((cj4*r22))+(((-1.0)*cj5*r21*sj4))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1919=IKcos(j3);
IkReal x1920=IKsin(j3);
IkReal x1921=(cj5*sj0);
IkReal x1922=(cj0*sj5);
IkReal x1923=(r21*sj5);
IkReal x1924=((1.0)*cj0);
IkReal x1925=((1.0)*sj4);
IkReal x1926=(sj0*sj5);
IkReal x1927=(r20*sj5);
IkReal x1928=(cj5*r21);
IkReal x1929=(cj5*r20);
IkReal x1930=((1.0)*x1920);
IkReal x1931=(cj0*cj5*r11);
IkReal x1932=(cj0*cj5*r10);
evalcond[0]=((((-1.0)*x1929))+x1923+(((-1.0)*x1930)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x1919))+(((-1.0)*x1925*x1928))+(((-1.0)*x1925*x1927)));
evalcond[2]=(((r01*x1926))+x1932+x1919+(((-1.0)*r11*x1922))+(((-1.0)*r00*x1921)));
evalcond[3]=((((-0.24475)*x1920))+(((-0.021)*x1928))+(((-0.021)*x1927))+(((0.04225)*x1929))+(((-0.04225)*x1923))+pz+(((-0.0137)*x1919)));
evalcond[4]=((((-1.0)*cj4*r12*x1924))+(((-1.0)*r00*x1925*x1926))+((r10*sj4*x1922))+((sj4*x1931))+(((-1.0)*r01*x1921*x1925))+((cj4*r02*sj0))+(((-1.0)*x1930)));
evalcond[5]=((0.22374884)+(((0.04225)*r00*x1921))+(((-0.04225)*r01*x1926))+(((0.021)*x1931))+(((-1.0)*py*x1924))+(((-0.021)*r00*x1926))+(((-0.021)*r01*x1921))+(((-0.0137)*x1920))+(((0.04225)*r11*x1922))+(((0.24475)*x1919))+((px*sj0))+(((0.021)*r10*x1922))+(((-0.04225)*x1932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1933=((1.0)*cj5);
CheckValue<IkReal> x1934=IKPowWithIntegerCheck(cj1,-1);
if(!x1934.valid){
continue;
}
CheckValue<IkReal> x1935=IKPowWithIntegerCheck(sj1,-1);
if(!x1935.valid){
continue;
}
if( IKabs(((x1934.value)*((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1933))+(((-1.0)*cj0*r00*x1933))+((cj0*r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1935.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1934.value)*((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1933))+(((-1.0)*cj0*r00*x1933))+((cj0*r01*sj5))))))+IKsqr(((x1935.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1934.value)*((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1933))+(((-1.0)*cj0*r00*x1933))+((cj0*r01*sj5))))), ((x1935.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1936=IKcos(j3);
IkReal x1937=IKsin(j3);
IkReal x1938=(cj5*sj0);
IkReal x1939=((1.0)*sj4);
IkReal x1940=(cj0*sj5);
IkReal x1941=((0.04225)*r11);
IkReal x1942=((0.021)*r10);
IkReal x1943=((0.04225)*r00);
IkReal x1944=(r21*sj5);
IkReal x1945=((0.021)*r00);
IkReal x1946=((0.021)*r01);
IkReal x1947=(sj0*sj5);
IkReal x1948=(cj0*cj5);
IkReal x1949=(cj4*r02);
IkReal x1950=((1.0)*cj0);
IkReal x1951=((0.04225)*r01);
IkReal x1952=(cj4*r12);
IkReal x1953=(r11*sj4);
IkReal x1954=((1.0)*r11);
IkReal x1955=(r10*sj4);
IkReal x1956=(r20*sj5);
IkReal x1957=((1.0)*sj0);
IkReal x1958=((0.021)*r11);
IkReal x1959=(cj5*r21);
IkReal x1960=(cj5*r20);
IkReal x1961=((0.04225)*r10);
IkReal x1962=(cj1*x1937);
IkReal x1963=(sj1*x1937);
IkReal x1964=((0.0137)*x1936);
evalcond[0]=((((-1.0)*x1960))+x1963+x1944);
evalcond[1]=(((cj4*r22))+((sj1*x1936))+(((-1.0)*x1939*x1956))+(((-1.0)*x1939*x1959)));
evalcond[2]=((((-1.0)*r00*x1938))+(((-1.0)*x1940*x1954))+((r10*x1948))+x1936+((r01*x1947)));
evalcond[3]=((((-1.0)*x1947*x1954))+(((-1.0)*r01*x1940))+x1962+((r00*x1948))+((r10*x1938)));
evalcond[4]=((((-0.04225)*x1944))+(((-0.021)*x1956))+(((-0.021)*x1959))+((sj1*x1964))+(((0.04225)*x1960))+(((-0.26630543)*cj1))+(((0.24475)*x1963))+pz);
evalcond[5]=((((-1.0)*x1949*x1950))+((x1938*x1953))+(((-1.0)*x1952*x1957))+((cj1*x1936))+((r01*sj4*x1948))+((r00*sj4*x1940))+((x1947*x1955)));
evalcond[6]=((((-1.0)*x1950*x1952))+(((-1.0)*r00*x1939*x1947))+(((-1.0)*x1937))+((x1940*x1955))+((sj0*x1949))+((x1948*x1953))+(((-1.0)*r01*x1938*x1939)));
evalcond[7]=((0.22374884)+((x1938*x1943))+(((-1.0)*x1948*x1961))+(((-1.0)*x1945*x1947))+(((-1.0)*x1947*x1951))+((x1940*x1942))+((x1940*x1941))+(((-1.0)*py*x1950))+(((-1.0)*x1938*x1946))+(((-0.0137)*x1937))+((x1948*x1958))+((px*sj0))+(((0.24475)*x1936)));
evalcond[8]=(((x1938*x1958))+(((-1.0)*x1943*x1948))+((cj1*x1964))+(((-1.0)*px*x1950))+((x1946*x1948))+((x1940*x1945))+(((-1.0)*py*x1957))+(((0.24475)*x1962))+((x1940*x1951))+((x1941*x1947))+(((-1.0)*x1938*x1961))+((x1942*x1947))+(((0.26630543)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1965=((1.0)*sj5);
CheckValue<IkReal> x1966=IKPowWithIntegerCheck(sj1,-1);
if(!x1966.valid){
continue;
}
if( IKabs(((x1966.value)*((((cj5*r20))+(((-1.0)*r21*x1965)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r00*sj0))+(((-1.0)*r01*sj0*x1965))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1966.value)*((((cj5*r20))+(((-1.0)*r21*x1965))))))+IKsqr((((cj5*r00*sj0))+(((-1.0)*r01*sj0*x1965))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1966.value)*((((cj5*r20))+(((-1.0)*r21*x1965))))), (((cj5*r00*sj0))+(((-1.0)*r01*sj0*x1965))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1967=IKcos(j3);
IkReal x1968=IKsin(j3);
IkReal x1969=(cj5*sj0);
IkReal x1970=((1.0)*sj4);
IkReal x1971=(cj0*sj5);
IkReal x1972=((0.04225)*r11);
IkReal x1973=((0.021)*r10);
IkReal x1974=((0.04225)*r00);
IkReal x1975=(r21*sj5);
IkReal x1976=((0.021)*r00);
IkReal x1977=((0.021)*r01);
IkReal x1978=(sj0*sj5);
IkReal x1979=(cj0*cj5);
IkReal x1980=(cj4*r02);
IkReal x1981=((1.0)*cj0);
IkReal x1982=((0.04225)*r01);
IkReal x1983=(cj4*r12);
IkReal x1984=(r11*sj4);
IkReal x1985=((1.0)*r11);
IkReal x1986=(r10*sj4);
IkReal x1987=(r20*sj5);
IkReal x1988=((1.0)*sj0);
IkReal x1989=((0.021)*r11);
IkReal x1990=(cj5*r21);
IkReal x1991=(cj5*r20);
IkReal x1992=((0.04225)*r10);
IkReal x1993=(cj1*x1968);
IkReal x1994=(sj1*x1968);
IkReal x1995=((0.0137)*x1967);
evalcond[0]=(x1994+x1975+(((-1.0)*x1991)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x1970*x1987))+((sj1*x1967))+(((-1.0)*x1970*x1990)));
evalcond[2]=(((r10*x1979))+(((-1.0)*x1971*x1985))+(((-1.0)*r00*x1969))+x1967+((r01*x1978)));
evalcond[3]=(((r10*x1969))+((r00*x1979))+x1993+(((-1.0)*r01*x1971))+(((-1.0)*x1978*x1985)));
evalcond[4]=(((sj1*x1995))+(((-0.04225)*x1975))+(((0.24475)*x1994))+(((-0.021)*x1987))+(((-0.26630543)*cj1))+pz+(((0.04225)*x1991))+(((-0.021)*x1990)));
evalcond[5]=(((x1969*x1984))+(((-1.0)*x1983*x1988))+(((-1.0)*x1980*x1981))+((cj1*x1967))+((r01*sj4*x1979))+((x1978*x1986))+((r00*sj4*x1971)));
evalcond[6]=(((x1971*x1986))+(((-1.0)*x1981*x1983))+(((-1.0)*x1968))+((sj0*x1980))+(((-1.0)*r01*x1969*x1970))+((x1979*x1984))+(((-1.0)*r00*x1970*x1978)));
evalcond[7]=((0.22374884)+((x1969*x1974))+(((-1.0)*x1976*x1978))+(((-1.0)*x1979*x1992))+((x1971*x1972))+((x1971*x1973))+(((0.24475)*x1967))+((x1979*x1989))+(((-1.0)*py*x1981))+((px*sj0))+(((-0.0137)*x1968))+(((-1.0)*x1978*x1982))+(((-1.0)*x1969*x1977)));
evalcond[8]=(((x1971*x1982))+((x1969*x1989))+(((-1.0)*px*x1981))+((x1972*x1978))+(((-1.0)*x1974*x1979))+(((0.24475)*x1993))+((x1971*x1976))+((x1973*x1978))+((cj1*x1995))+(((-1.0)*py*x1988))+(((0.26630543)*sj1))+((x1977*x1979))+(((-1.0)*x1969*x1992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1996 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),(((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x1996.valid){
continue;
}
CheckValue<IkReal> x1997=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x1997.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1996.value)+(((1.5707963267949)*(x1997.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1998=IKcos(j3);
IkReal x1999=IKsin(j3);
IkReal x2000=(cj5*sj0);
IkReal x2001=((1.0)*sj4);
IkReal x2002=(cj0*sj5);
IkReal x2003=((0.04225)*r11);
IkReal x2004=((0.021)*r10);
IkReal x2005=((0.04225)*r00);
IkReal x2006=(r21*sj5);
IkReal x2007=((0.021)*r00);
IkReal x2008=((0.021)*r01);
IkReal x2009=(sj0*sj5);
IkReal x2010=(cj0*cj5);
IkReal x2011=(cj4*r02);
IkReal x2012=((1.0)*cj0);
IkReal x2013=((0.04225)*r01);
IkReal x2014=(cj4*r12);
IkReal x2015=(r11*sj4);
IkReal x2016=((1.0)*r11);
IkReal x2017=(r10*sj4);
IkReal x2018=(r20*sj5);
IkReal x2019=((1.0)*sj0);
IkReal x2020=((0.021)*r11);
IkReal x2021=(cj5*r21);
IkReal x2022=(cj5*r20);
IkReal x2023=((0.04225)*r10);
IkReal x2024=(cj1*x1999);
IkReal x2025=(sj1*x1999);
IkReal x2026=((0.0137)*x1998);
evalcond[0]=(x2025+x2006+(((-1.0)*x2022)));
evalcond[1]=(((sj1*x1998))+((cj4*r22))+(((-1.0)*x2001*x2021))+(((-1.0)*x2001*x2018)));
evalcond[2]=(((r01*x2009))+((r10*x2010))+(((-1.0)*x2002*x2016))+x1998+(((-1.0)*r00*x2000)));
evalcond[3]=((((-1.0)*x2009*x2016))+((r10*x2000))+x2024+((r00*x2010))+(((-1.0)*r01*x2002)));
evalcond[4]=((((-0.021)*x2021))+(((0.04225)*x2022))+(((-0.26630543)*cj1))+((sj1*x2026))+(((-0.04225)*x2006))+pz+(((-0.021)*x2018))+(((0.24475)*x2025)));
evalcond[5]=(((x2000*x2015))+((r00*sj4*x2002))+(((-1.0)*x2014*x2019))+(((-1.0)*x2011*x2012))+((cj1*x1998))+((x2009*x2017))+((r01*sj4*x2010)));
evalcond[6]=(((sj0*x2011))+((x2010*x2015))+(((-1.0)*r00*x2001*x2009))+((x2002*x2017))+(((-1.0)*x2012*x2014))+(((-1.0)*r01*x2000*x2001))+(((-1.0)*x1999)));
evalcond[7]=((0.22374884)+((x2002*x2003))+((x2002*x2004))+(((-1.0)*py*x2012))+(((-0.0137)*x1999))+(((-1.0)*x2009*x2013))+((x2000*x2005))+(((0.24475)*x1998))+(((-1.0)*x2007*x2009))+(((-1.0)*x2010*x2023))+(((-1.0)*x2000*x2008))+((x2010*x2020))+((px*sj0)));
evalcond[8]=(((x2002*x2007))+(((-1.0)*py*x2019))+((x2000*x2020))+(((-1.0)*x2005*x2010))+((x2002*x2013))+((x2008*x2010))+(((-1.0)*x2000*x2023))+((cj1*x2026))+(((0.26630543)*sj1))+((x2004*x2009))+((x2003*x2009))+(((0.24475)*x2024))+(((-1.0)*px*x2012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2027=((1.0)*sj0);
IkReal x2028=(r12*sj4);
IkReal x2029=(cj4*sj5);
IkReal x2030=((1.0)*cj0);
IkReal x2031=(r02*sj4);
IkReal x2032=(cj4*cj5);
IkReal x2033=(r01*x2032);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r21*x2032))+((r22*sj4))+((r20*x2029))+(((-1.0)*cj1)));
evalcond[2]=(((r00*sj0*x2029))+((sj0*x2031))+((sj0*x2033))+(((-1.0)*r10*x2029*x2030))+(((-1.0)*r11*x2030*x2032))+(((-1.0)*x2028*x2030)));
evalcond[3]=(sj1+(((-1.0)*r11*x2027*x2032))+(((-1.0)*x2030*x2031))+(((-1.0)*x2030*x2033))+(((-1.0)*x2027*x2028))+(((-1.0)*r10*x2027*x2029))+(((-1.0)*r00*x2029*x2030)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj1;
j3eval[1]=((IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j3eval[2]=IKsign(sj1);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=cj1;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2034=((1.0)*cj0);
IkReal x2035=((0.021)*cj0);
IkReal x2036=(cj5*r01);
IkReal x2037=(r00*sj5);
IkReal x2038=(sj0*sj4);
IkReal x2039=(cj4*cj5);
IkReal x2040=(sj0*sj5);
IkReal x2041=((0.04225)*cj0);
IkReal x2042=(r01*sj5);
IkReal x2043=(cj0*sj4);
IkReal x2044=((1.0)*r11);
IkReal x2045=(cj5*r00);
IkReal x2046=(cj4*r10);
IkReal x2047=((1.0)*sj0);
IkReal x2048=(cj5*r11);
IkReal x2049=(cj4*x2036);
IkReal x2050=(cj5*r10*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((r21*x2039))+((cj4*r20*sj5))+((r22*sj4)));
evalcond[2]=(((cj0*x2045))+x2050+(((-1.0)*x2034*x2042))+(((-1.0)*x2040*x2044)));
evalcond[3]=((((-1.0)*r12*sj4*x2034))+(((-1.0)*sj5*x2034*x2046))+((r02*x2038))+(((-1.0)*r11*x2034*x2039))+((sj0*x2049))+((cj4*sj0*x2037)));
evalcond[4]=((1.0)+(((-1.0)*x2040*x2046))+(((-1.0)*r02*sj4*x2034))+(((-1.0)*cj4*x2034*x2037))+(((-1.0)*x2034*x2049))+(((-1.0)*sj0*x2039*x2044))+(((-1.0)*r12*x2038)));
evalcond[5]=(((x2037*x2043))+((r10*sj5*x2038))+(((-1.0)*cj4*r02*x2034))+((x2036*x2043))+(((-1.0)*cj4*r12*x2047))+((x2038*x2048)));
evalcond[6]=((0.26630543)+((x2041*x2042))+(((-1.0)*px*x2034))+(((0.021)*r10*x2040))+(((-1.0)*x2041*x2045))+(((-1.0)*py*x2047))+((x2035*x2037))+((x2035*x2036))+(((-0.04225)*x2050))+(((0.04225)*r11*x2040))+(((0.021)*sj0*x2048)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((-1.0)*r21*sj5))))+IKsqr((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((-1.0)*r21*sj5))), (((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2051=IKcos(j3);
IkReal x2052=IKsin(j3);
IkReal x2053=(cj5*sj0);
IkReal x2054=(cj0*sj5);
IkReal x2055=(r21*sj5);
IkReal x2056=((1.0)*cj0);
IkReal x2057=((1.0)*sj4);
IkReal x2058=(sj0*sj5);
IkReal x2059=(r20*sj5);
IkReal x2060=(cj5*r21);
IkReal x2061=(cj5*r20);
IkReal x2062=(cj0*cj5*r11);
IkReal x2063=(cj0*cj5*r10);
evalcond[0]=(x2052+x2055+(((-1.0)*x2061)));
evalcond[1]=((((-1.0)*x2057*x2060))+((cj4*r22))+x2051+(((-1.0)*x2057*x2059)));
evalcond[2]=(((r01*x2058))+x2063+(((-1.0)*x2051))+(((-1.0)*r00*x2053))+(((-1.0)*r11*x2054)));
evalcond[3]=((((-0.021)*x2059))+(((-0.021)*x2060))+pz+(((-0.04225)*x2055))+(((0.04225)*x2061))+(((0.24475)*x2052))+(((0.0137)*x2051)));
evalcond[4]=(x2052+(((-1.0)*cj4*r12*x2056))+(((-1.0)*r00*x2057*x2058))+((sj4*x2062))+((cj4*r02*sj0))+(((-1.0)*r01*x2053*x2057))+((r10*sj4*x2054)));
evalcond[5]=((-0.22425116)+(((0.04225)*r00*x2053))+(((-0.24475)*x2051))+(((-1.0)*py*x2056))+(((-0.04225)*r01*x2058))+(((-0.04225)*x2063))+((px*sj0))+(((-0.021)*r01*x2053))+(((0.021)*x2062))+(((-0.021)*r00*x2058))+(((0.04225)*r11*x2054))+(((0.021)*r10*x2054))+(((0.0137)*x2052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2064=((1.0)*cj0);
IkReal x2065=((0.021)*cj0);
IkReal x2066=(cj5*r01);
IkReal x2067=(r00*sj5);
IkReal x2068=(sj0*sj4);
IkReal x2069=(cj4*cj5);
IkReal x2070=(sj0*sj5);
IkReal x2071=((0.04225)*cj0);
IkReal x2072=(r01*sj5);
IkReal x2073=(cj0*sj4);
IkReal x2074=((1.0)*r11);
IkReal x2075=(cj5*r00);
IkReal x2076=(cj4*r10);
IkReal x2077=((1.0)*sj0);
IkReal x2078=(cj5*r11);
IkReal x2079=(cj4*x2066);
IkReal x2080=(cj5*r10*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((r21*x2069))+((cj4*r20*sj5))+((r22*sj4)));
evalcond[2]=((((-1.0)*x2070*x2074))+(((-1.0)*x2064*x2072))+x2080+((cj0*x2075)));
evalcond[3]=((((-1.0)*r11*x2064*x2069))+(((-1.0)*r12*sj4*x2064))+((r02*x2068))+((cj4*sj0*x2067))+((sj0*x2079))+(((-1.0)*sj5*x2064*x2076)));
evalcond[4]=((-1.0)+(((-1.0)*cj4*x2064*x2067))+(((-1.0)*x2070*x2076))+(((-1.0)*x2064*x2079))+(((-1.0)*r12*x2068))+(((-1.0)*r02*sj4*x2064))+(((-1.0)*sj0*x2069*x2074)));
evalcond[5]=((((-1.0)*cj4*r12*x2077))+((x2066*x2073))+((x2068*x2078))+(((-1.0)*cj4*r02*x2064))+((r10*sj5*x2068))+((x2067*x2073)));
evalcond[6]=((-0.26630543)+(((-1.0)*px*x2064))+(((-1.0)*x2071*x2075))+(((0.021)*r10*x2070))+((x2071*x2072))+(((0.021)*sj0*x2078))+(((-1.0)*py*x2077))+(((0.04225)*r11*x2070))+((x2065*x2066))+((x2065*x2067))+(((-0.04225)*x2080)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2081=((1.0)*r20);
if( IKabs((((r21*sj5))+(((-1.0)*cj5*x2081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r22))+(((-1.0)*cj5*r21*sj4))+(((-1.0)*sj4*sj5*x2081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj5))+(((-1.0)*cj5*x2081))))+IKsqr((((cj4*r22))+(((-1.0)*cj5*r21*sj4))+(((-1.0)*sj4*sj5*x2081))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj5))+(((-1.0)*cj5*x2081))), (((cj4*r22))+(((-1.0)*cj5*r21*sj4))+(((-1.0)*sj4*sj5*x2081))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2082=IKsin(j3);
IkReal x2083=IKcos(j3);
IkReal x2084=(cj5*sj0);
IkReal x2085=(cj0*sj5);
IkReal x2086=(r21*sj5);
IkReal x2087=((1.0)*cj0);
IkReal x2088=((1.0)*sj4);
IkReal x2089=(sj0*sj5);
IkReal x2090=(r20*sj5);
IkReal x2091=(cj5*r21);
IkReal x2092=(cj5*r20);
IkReal x2093=((1.0)*x2083);
IkReal x2094=(cj0*cj5*r11);
IkReal x2095=(cj0*cj5*r10);
evalcond[0]=((((-1.0)*x2082))+x2086+(((-1.0)*x2092)));
evalcond[1]=((((-1.0)*x2093))+((cj4*r22))+(((-1.0)*x2088*x2090))+(((-1.0)*x2088*x2091)));
evalcond[2]=((((-1.0)*x2093))+(((-1.0)*r11*x2085))+x2095+((r01*x2089))+(((-1.0)*r00*x2084)));
evalcond[3]=((((-0.0137)*x2083))+(((0.04225)*x2092))+pz+(((-0.021)*x2090))+(((-0.021)*x2091))+(((-0.24475)*x2082))+(((-0.04225)*x2086)));
evalcond[4]=(((sj4*x2094))+x2082+(((-1.0)*cj4*r12*x2087))+((r10*sj4*x2085))+((cj4*r02*sj0))+(((-1.0)*r00*x2088*x2089))+(((-1.0)*r01*x2084*x2088)));
evalcond[5]=((-0.22425116)+(((-0.04225)*x2095))+(((0.021)*r10*x2085))+(((0.0137)*x2082))+(((0.021)*x2094))+(((-1.0)*py*x2087))+(((-0.021)*r00*x2089))+(((-0.04225)*r01*x2089))+((px*sj0))+(((-0.021)*r01*x2084))+(((0.04225)*r00*x2084))+(((0.04225)*r11*x2085))+(((-0.24475)*x2083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2096=((1.0)*cj5);
CheckValue<IkReal> x2097=IKPowWithIntegerCheck(cj1,-1);
if(!x2097.valid){
continue;
}
CheckValue<IkReal> x2098=IKPowWithIntegerCheck(sj1,-1);
if(!x2098.valid){
continue;
}
if( IKabs(((x2097.value)*((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2096))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2096)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2098.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2097.value)*((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2096))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2096))))))+IKsqr(((x2098.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x2097.value)*((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2096))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2096))))), ((x2098.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2099=IKcos(j3);
IkReal x2100=IKsin(j3);
IkReal x2101=(cj5*r01);
IkReal x2102=(cj0*sj4);
IkReal x2103=(cj0*sj5);
IkReal x2104=((0.04225)*r11);
IkReal x2105=((0.021)*r10);
IkReal x2106=(r21*sj5);
IkReal x2107=((0.021)*r00);
IkReal x2108=((0.021)*sj0);
IkReal x2109=(sj0*sj5);
IkReal x2110=(cj4*r02);
IkReal x2111=((1.0)*cj0);
IkReal x2112=((0.04225)*r01);
IkReal x2113=(cj4*r12);
IkReal x2114=((1.0)*sj4);
IkReal x2115=(cj5*r11);
IkReal x2116=((1.0)*r11);
IkReal x2117=((1.0)*sj0);
IkReal x2118=(cj5*r00);
IkReal x2119=(r20*sj5);
IkReal x2120=((0.021)*cj0);
IkReal x2121=(cj5*r21);
IkReal x2122=(cj5*r20);
IkReal x2123=(cj1*x2100);
IkReal x2124=((0.04225)*x2118);
IkReal x2125=(sj1*x2100);
IkReal x2126=((0.0137)*x2099);
IkReal x2127=(cj0*cj5*r10);
IkReal x2128=(cj5*r10*sj0);
evalcond[0]=(x2125+x2106+(((-1.0)*x2122)));
evalcond[1]=((((-1.0)*x2114*x2119))+((cj4*r22))+((sj1*x2099))+(((-1.0)*x2114*x2121)));
evalcond[2]=((((-1.0)*x2117*x2118))+(((-1.0)*x2103*x2116))+x2127+((r01*x2109))+(((-1.0)*x2099)));
evalcond[3]=(((cj0*x2118))+x2123+x2128+(((-1.0)*x2109*x2116))+(((-1.0)*r01*x2103)));
evalcond[4]=((((-0.021)*x2119))+(((0.04225)*x2122))+(((-0.021)*x2121))+((sj1*x2126))+(((-0.26630543)*cj1))+pz+(((-0.04225)*x2106))+(((0.24475)*x2125)));
evalcond[5]=(((sj0*x2110))+x2100+(((-1.0)*sj0*x2101*x2114))+(((-1.0)*r00*x2109*x2114))+((x2102*x2115))+(((-1.0)*x2111*x2113))+((r10*sj5*x2102)));
evalcond[6]=(((r00*sj5*x2102))+((cj1*x2099))+((r10*sj4*x2109))+((x2101*x2102))+(((-1.0)*x2110*x2111))+((sj0*sj4*x2115))+(((-1.0)*x2113*x2117)));
evalcond[7]=((-0.22425116)+(((-0.24475)*x2099))+(((-1.0)*x2107*x2109))+(((-0.04225)*x2127))+((sj0*x2124))+(((-1.0)*x2101*x2108))+((x2103*x2105))+((x2103*x2104))+(((-1.0)*py*x2111))+((x2115*x2120))+(((-1.0)*x2109*x2112))+(((0.0137)*x2100))+((px*sj0)));
evalcond[8]=(((x2104*x2109))+(((-0.04225)*x2128))+((x2103*x2107))+(((-1.0)*py*x2117))+((cj1*x2126))+((x2103*x2112))+((x2105*x2109))+(((0.26630543)*sj1))+((x2101*x2120))+(((-1.0)*cj0*x2124))+((x2108*x2115))+(((0.24475)*x2123))+(((-1.0)*px*x2111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2129=((1.0)*sj5);
CheckValue<IkReal> x2130=IKPowWithIntegerCheck(sj1,-1);
if(!x2130.valid){
continue;
}
if( IKabs(((x2130.value)*((((cj5*r20))+(((-1.0)*r21*x2129)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r11*x2129))+((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2130.value)*((((cj5*r20))+(((-1.0)*r21*x2129))))))+IKsqr(((((-1.0)*cj0*r11*x2129))+((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x2130.value)*((((cj5*r20))+(((-1.0)*r21*x2129))))), ((((-1.0)*cj0*r11*x2129))+((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2131=IKcos(j3);
IkReal x2132=IKsin(j3);
IkReal x2133=(cj5*r01);
IkReal x2134=(cj0*sj4);
IkReal x2135=(cj0*sj5);
IkReal x2136=((0.04225)*r11);
IkReal x2137=((0.021)*r10);
IkReal x2138=(r21*sj5);
IkReal x2139=((0.021)*r00);
IkReal x2140=((0.021)*sj0);
IkReal x2141=(sj0*sj5);
IkReal x2142=(cj4*r02);
IkReal x2143=((1.0)*cj0);
IkReal x2144=((0.04225)*r01);
IkReal x2145=(cj4*r12);
IkReal x2146=((1.0)*sj4);
IkReal x2147=(cj5*r11);
IkReal x2148=((1.0)*r11);
IkReal x2149=((1.0)*sj0);
IkReal x2150=(cj5*r00);
IkReal x2151=(r20*sj5);
IkReal x2152=((0.021)*cj0);
IkReal x2153=(cj5*r21);
IkReal x2154=(cj5*r20);
IkReal x2155=(cj1*x2132);
IkReal x2156=((0.04225)*x2150);
IkReal x2157=(sj1*x2132);
IkReal x2158=((0.0137)*x2131);
IkReal x2159=(cj0*cj5*r10);
IkReal x2160=(cj5*r10*sj0);
evalcond[0]=(x2138+x2157+(((-1.0)*x2154)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x2146*x2153))+(((-1.0)*x2146*x2151))+((sj1*x2131)));
evalcond[2]=((((-1.0)*x2149*x2150))+(((-1.0)*x2135*x2148))+x2159+((r01*x2141))+(((-1.0)*x2131)));
evalcond[3]=(x2160+x2155+((cj0*x2150))+(((-1.0)*r01*x2135))+(((-1.0)*x2141*x2148)));
evalcond[4]=((((-0.26630543)*cj1))+(((0.24475)*x2157))+((sj1*x2158))+pz+(((-0.021)*x2151))+(((-0.021)*x2153))+(((-0.04225)*x2138))+(((0.04225)*x2154)));
evalcond[5]=((((-1.0)*x2143*x2145))+x2132+((sj0*x2142))+(((-1.0)*sj0*x2133*x2146))+(((-1.0)*r00*x2141*x2146))+((r10*sj5*x2134))+((x2134*x2147)));
evalcond[6]=(((r10*sj4*x2141))+(((-1.0)*x2142*x2143))+((sj0*sj4*x2147))+((cj1*x2131))+((x2133*x2134))+(((-1.0)*x2145*x2149))+((r00*sj5*x2134)));
evalcond[7]=((-0.22425116)+(((-0.04225)*x2159))+((x2147*x2152))+(((-1.0)*x2133*x2140))+(((-1.0)*py*x2143))+((x2135*x2136))+((x2135*x2137))+((sj0*x2156))+(((0.0137)*x2132))+((px*sj0))+(((-0.24475)*x2131))+(((-1.0)*x2139*x2141))+(((-1.0)*x2141*x2144)));
evalcond[8]=((((-1.0)*cj0*x2156))+(((-1.0)*py*x2149))+(((-0.04225)*x2160))+((x2135*x2139))+(((0.24475)*x2155))+((x2140*x2147))+((x2137*x2141))+((x2136*x2141))+((x2135*x2144))+(((0.26630543)*sj1))+(((-1.0)*px*x2143))+((cj1*x2158))+((x2133*x2152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2161 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),(((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2161.valid){
continue;
}
CheckValue<IkReal> x2162=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x2162.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2161.value)+(((1.5707963267949)*(x2162.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2163=IKcos(j3);
IkReal x2164=IKsin(j3);
IkReal x2165=(cj5*r01);
IkReal x2166=(cj0*sj4);
IkReal x2167=(cj0*sj5);
IkReal x2168=((0.04225)*r11);
IkReal x2169=((0.021)*r10);
IkReal x2170=(r21*sj5);
IkReal x2171=((0.021)*r00);
IkReal x2172=((0.021)*sj0);
IkReal x2173=(sj0*sj5);
IkReal x2174=(cj4*r02);
IkReal x2175=((1.0)*cj0);
IkReal x2176=((0.04225)*r01);
IkReal x2177=(cj4*r12);
IkReal x2178=((1.0)*sj4);
IkReal x2179=(cj5*r11);
IkReal x2180=((1.0)*r11);
IkReal x2181=((1.0)*sj0);
IkReal x2182=(cj5*r00);
IkReal x2183=(r20*sj5);
IkReal x2184=((0.021)*cj0);
IkReal x2185=(cj5*r21);
IkReal x2186=(cj5*r20);
IkReal x2187=(cj1*x2164);
IkReal x2188=((0.04225)*x2182);
IkReal x2189=(sj1*x2164);
IkReal x2190=((0.0137)*x2163);
IkReal x2191=(cj0*cj5*r10);
IkReal x2192=(cj5*r10*sj0);
evalcond[0]=(x2170+x2189+(((-1.0)*x2186)));
evalcond[1]=(((cj4*r22))+((sj1*x2163))+(((-1.0)*x2178*x2185))+(((-1.0)*x2178*x2183)));
evalcond[2]=(((r01*x2173))+x2191+(((-1.0)*x2181*x2182))+(((-1.0)*x2163))+(((-1.0)*x2167*x2180)));
evalcond[3]=((((-1.0)*x2173*x2180))+x2192+x2187+((cj0*x2182))+(((-1.0)*r01*x2167)));
evalcond[4]=((((0.24475)*x2189))+((sj1*x2190))+(((-0.26630543)*cj1))+(((-0.021)*x2183))+(((-0.021)*x2185))+(((-0.04225)*x2170))+pz+(((0.04225)*x2186)));
evalcond[5]=((((-1.0)*sj0*x2165*x2178))+(((-1.0)*r00*x2173*x2178))+x2164+((x2166*x2179))+((r10*sj5*x2166))+(((-1.0)*x2175*x2177))+((sj0*x2174)));
evalcond[6]=((((-1.0)*x2174*x2175))+((r00*sj5*x2166))+((x2165*x2166))+(((-1.0)*x2177*x2181))+((cj1*x2163))+((sj0*sj4*x2179))+((r10*sj4*x2173)));
evalcond[7]=((-0.22425116)+(((-1.0)*x2171*x2173))+((x2179*x2184))+(((-0.24475)*x2163))+(((0.0137)*x2164))+(((-0.04225)*x2191))+((sj0*x2188))+(((-1.0)*py*x2175))+((x2167*x2169))+((x2167*x2168))+((px*sj0))+(((-1.0)*x2165*x2172))+(((-1.0)*x2173*x2176)));
evalcond[8]=(((x2172*x2179))+(((-1.0)*px*x2175))+(((-0.04225)*x2192))+((cj1*x2190))+(((0.24475)*x2187))+(((-1.0)*cj0*x2188))+(((-1.0)*py*x2181))+((x2167*x2176))+((x2167*x2171))+(((0.26630543)*sj1))+((x2168*x2173))+((x2169*x2173))+((x2165*x2184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2200=IKPowWithIntegerCheck(sj2,-1);
if(!x2200.valid){
continue;
}
IkReal x2193=x2200.value;
IkReal x2194=(cj1*cj2);
IkReal x2195=((1.0)*sj5);
IkReal x2196=(r01*sj0);
IkReal x2197=(cj0*r11*sj5);
IkReal x2198=(cj5*r00*sj0);
IkReal x2199=((1.0)*cj0*cj5*r10);
CheckValue<IkReal> x2201=IKPowWithIntegerCheck(sj1,-1);
if(!x2201.valid){
continue;
}
if( IKabs((x2193*(x2201.value)*(((((-1.0)*x2194*x2195*x2196))+((x2194*x2198))+((x2194*x2197))+((cj5*r20*sj2))+(((-1.0)*r21*sj2*x2195))+(((-1.0)*x2194*x2199)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2193*(((((-1.0)*x2195*x2196))+x2197+x2198+(((-1.0)*x2199)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2193*(x2201.value)*(((((-1.0)*x2194*x2195*x2196))+((x2194*x2198))+((x2194*x2197))+((cj5*r20*sj2))+(((-1.0)*r21*sj2*x2195))+(((-1.0)*x2194*x2199))))))+IKsqr((x2193*(((((-1.0)*x2195*x2196))+x2197+x2198+(((-1.0)*x2199))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x2193*(x2201.value)*(((((-1.0)*x2194*x2195*x2196))+((x2194*x2198))+((x2194*x2197))+((cj5*r20*sj2))+(((-1.0)*r21*sj2*x2195))+(((-1.0)*x2194*x2199))))), (x2193*(((((-1.0)*x2195*x2196))+x2197+x2198+(((-1.0)*x2199))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2202=IKcos(j3);
IkReal x2203=IKsin(j3);
IkReal x2204=(cj5*r01);
IkReal x2205=(cj0*sj4);
IkReal x2206=(cj0*sj5);
IkReal x2207=((0.04225)*r11);
IkReal x2208=((0.021)*r10);
IkReal x2209=(r21*sj5);
IkReal x2210=((0.021)*r00);
IkReal x2211=((0.021)*sj0);
IkReal x2212=((0.04225)*cj5);
IkReal x2213=(r10*sj0);
IkReal x2214=(sj0*sj5);
IkReal x2215=((1.0)*cj2);
IkReal x2216=((1.0)*sj0);
IkReal x2217=(cj0*r00);
IkReal x2218=(cj4*r02);
IkReal x2219=((1.0)*cj0);
IkReal x2220=((0.0137)*cj2);
IkReal x2221=((0.04225)*r01);
IkReal x2222=(cj4*r12);
IkReal x2223=((1.0)*sj4);
IkReal x2224=(cj5*r11);
IkReal x2225=((1.0)*r11);
IkReal x2226=(r20*sj5);
IkReal x2227=((0.021)*cj0);
IkReal x2228=((0.24475)*cj2);
IkReal x2229=(cj5*r21);
IkReal x2230=(cj0*r10);
IkReal x2231=((0.224)*cj2);
IkReal x2232=(cj1*x2203);
IkReal x2233=(cj1*x2202);
IkReal x2234=(sj1*x2203);
IkReal x2235=(sj2*x2202);
IkReal x2236=(sj2*x2203);
IkReal x2237=(sj1*x2202);
evalcond[0]=(x2234+x2209+(((-1.0)*x2215*x2233))+(((-1.0)*cj5*r20)));
evalcond[1]=(((r01*x2214))+x2235+(((-1.0)*cj5*r00*x2216))+((cj5*x2230))+(((-1.0)*x2206*x2225)));
evalcond[2]=(x2237+((cj4*r22))+(((-1.0)*x2223*x2226))+(((-1.0)*x2223*x2229))+((cj2*x2232)));
evalcond[3]=(x2232+((cj5*x2217))+((cj5*x2213))+(((-1.0)*r01*x2206))+(((-1.0)*x2214*x2225))+((cj2*x2237)));
evalcond[4]=((((-1.0)*x2219*x2222))+(((-1.0)*r00*x2214*x2223))+((r10*sj5*x2205))+(((-1.0)*sj4*x2204*x2216))+(((-1.0)*x2236))+((sj0*x2218))+((x2205*x2224)));
evalcond[5]=(x2233+(((-1.0)*x2218*x2219))+((sj0*sj4*x2224))+((r00*sj5*x2205))+((x2204*x2205))+((sj4*sj5*x2213))+(((-1.0)*x2215*x2234))+(((-1.0)*x2216*x2222)));
evalcond[6]=((((-0.021)*x2229))+(((-0.021)*x2226))+(((-1.0)*cj1*x2231))+((r20*x2212))+(((0.24475)*x2234))+(((0.0137)*x2237))+(((-0.26630543)*cj1))+(((-1.0)*x2228*x2233))+(((-0.04225)*x2209))+pz+((x2220*x2232)));
evalcond[7]=((-0.00025116)+(((-1.0)*x2210*x2214))+(((-1.0)*py*x2219))+(((0.224)*sj2))+(((-1.0)*x2204*x2211))+(((0.24475)*x2235))+((x2206*x2208))+((x2206*x2207))+(((-0.0137)*x2236))+((x2224*x2227))+(((-1.0)*x2212*x2230))+((r00*sj0*x2212))+((px*sj0))+(((-1.0)*x2214*x2221)));
evalcond[8]=((((-1.0)*py*x2216))+((x2211*x2224))+((x2228*x2237))+(((0.24475)*x2232))+(((-1.0)*px*x2219))+((sj1*x2231))+((x2206*x2210))+(((-1.0)*x2220*x2234))+(((0.0137)*x2233))+((x2207*x2214))+((x2206*x2221))+(((0.26630543)*sj1))+((x2204*x2227))+(((-1.0)*x2212*x2213))+(((-1.0)*x2212*x2217))+((x2208*x2214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2238=(sj1*sj5);
IkReal x2239=(r11*sj0);
IkReal x2240=(cj1*sj5);
IkReal x2241=(cj0*r01);
IkReal x2242=(r10*sj0);
IkReal x2243=(cj0*r00);
IkReal x2244=((1.0)*cj1*cj5);
IkReal x2245=((1.0)*cj5*sj1);
CheckValue<IkReal> x2246=IKPowWithIntegerCheck(cj2,-1);
if(!x2246.valid){
continue;
}
if( IKabs((((cj5*r20*sj1))+(((-1.0)*r21*x2238))+(((-1.0)*x2243*x2244))+(((-1.0)*x2242*x2244))+((x2239*x2240))+((x2240*x2241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2246.value)*((((x2238*x2239))+(((-1.0)*x2243*x2245))+(((-1.0)*x2242*x2245))+((r21*x2240))+((x2238*x2241))+(((-1.0)*r20*x2244)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20*sj1))+(((-1.0)*r21*x2238))+(((-1.0)*x2243*x2244))+(((-1.0)*x2242*x2244))+((x2239*x2240))+((x2240*x2241))))+IKsqr(((x2246.value)*((((x2238*x2239))+(((-1.0)*x2243*x2245))+(((-1.0)*x2242*x2245))+((r21*x2240))+((x2238*x2241))+(((-1.0)*r20*x2244))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20*sj1))+(((-1.0)*r21*x2238))+(((-1.0)*x2243*x2244))+(((-1.0)*x2242*x2244))+((x2239*x2240))+((x2240*x2241))), ((x2246.value)*((((x2238*x2239))+(((-1.0)*x2243*x2245))+(((-1.0)*x2242*x2245))+((r21*x2240))+((x2238*x2241))+(((-1.0)*r20*x2244))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2247=IKcos(j3);
IkReal x2248=IKsin(j3);
IkReal x2249=(cj5*r01);
IkReal x2250=(cj0*sj4);
IkReal x2251=(cj0*sj5);
IkReal x2252=((0.04225)*r11);
IkReal x2253=((0.021)*r10);
IkReal x2254=(r21*sj5);
IkReal x2255=((0.021)*r00);
IkReal x2256=((0.021)*sj0);
IkReal x2257=((0.04225)*cj5);
IkReal x2258=(r10*sj0);
IkReal x2259=(sj0*sj5);
IkReal x2260=((1.0)*cj2);
IkReal x2261=((1.0)*sj0);
IkReal x2262=(cj0*r00);
IkReal x2263=(cj4*r02);
IkReal x2264=((1.0)*cj0);
IkReal x2265=((0.0137)*cj2);
IkReal x2266=((0.04225)*r01);
IkReal x2267=(cj4*r12);
IkReal x2268=((1.0)*sj4);
IkReal x2269=(cj5*r11);
IkReal x2270=((1.0)*r11);
IkReal x2271=(r20*sj5);
IkReal x2272=((0.021)*cj0);
IkReal x2273=((0.24475)*cj2);
IkReal x2274=(cj5*r21);
IkReal x2275=(cj0*r10);
IkReal x2276=((0.224)*cj2);
IkReal x2277=(cj1*x2248);
IkReal x2278=(cj1*x2247);
IkReal x2279=(sj1*x2248);
IkReal x2280=(sj2*x2247);
IkReal x2281=(sj2*x2248);
IkReal x2282=(sj1*x2247);
evalcond[0]=(x2279+x2254+(((-1.0)*x2260*x2278))+(((-1.0)*cj5*r20)));
evalcond[1]=(x2280+((cj5*x2275))+(((-1.0)*cj5*r00*x2261))+(((-1.0)*x2251*x2270))+((r01*x2259)));
evalcond[2]=(x2282+((cj4*r22))+((cj2*x2277))+(((-1.0)*x2268*x2271))+(((-1.0)*x2268*x2274)));
evalcond[3]=(x2277+((cj2*x2282))+((cj5*x2262))+(((-1.0)*x2259*x2270))+((cj5*x2258))+(((-1.0)*r01*x2251)));
evalcond[4]=((((-1.0)*r00*x2259*x2268))+((sj0*x2263))+(((-1.0)*x2281))+((x2250*x2269))+((r10*sj5*x2250))+(((-1.0)*sj4*x2249*x2261))+(((-1.0)*x2264*x2267)));
evalcond[5]=(((sj0*sj4*x2269))+x2278+(((-1.0)*x2260*x2279))+((x2249*x2250))+(((-1.0)*x2263*x2264))+((r00*sj5*x2250))+(((-1.0)*x2261*x2267))+((sj4*sj5*x2258)));
evalcond[6]=((((0.0137)*x2282))+(((-1.0)*cj1*x2276))+(((-1.0)*x2273*x2278))+(((-0.26630543)*cj1))+((r20*x2257))+(((-0.04225)*x2254))+pz+((x2265*x2277))+(((0.24475)*x2279))+(((-0.021)*x2274))+(((-0.021)*x2271)));
evalcond[7]=((-0.00025116)+(((0.224)*sj2))+(((-1.0)*x2249*x2256))+(((-1.0)*x2255*x2259))+(((-0.0137)*x2281))+((r00*sj0*x2257))+(((-1.0)*py*x2264))+((x2269*x2272))+(((0.24475)*x2280))+(((-1.0)*x2259*x2266))+(((-1.0)*x2257*x2275))+((px*sj0))+((x2251*x2253))+((x2251*x2252)));
evalcond[8]=(((x2256*x2269))+((sj1*x2276))+(((-1.0)*py*x2261))+((x2253*x2259))+(((-1.0)*x2257*x2258))+((x2251*x2266))+(((-1.0)*px*x2264))+((x2252*x2259))+(((-1.0)*x2257*x2262))+(((0.0137)*x2278))+((x2273*x2282))+((x2251*x2255))+(((0.26630543)*sj1))+(((-1.0)*x2265*x2279))+(((0.24475)*x2277))+((x2249*x2272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2283=cj1*cj1;
IkReal x2284=(sj4*sj5);
IkReal x2285=(cj1*cj2);
IkReal x2286=(cj4*r22);
IkReal x2287=((1.0)*r21);
IkReal x2288=(cj5*sj4);
IkReal x2289=((1.0)*r20*sj1);
CheckValue<IkReal> x2290 = IKatan2WithCheck(IkReal(((((-1.0)*x2285*x2287*x2288))+((r21*sj1*sj5))+(((-1.0)*r20*x2284*x2285))+(((-1.0)*cj5*x2289))+((x2285*x2286)))),((((-1.0)*x2284*x2289))+((sj1*x2286))+(((-1.0)*sj5*x2285*x2287))+(((-1.0)*sj1*x2287*x2288))+((cj5*r20*x2285))),IKFAST_ATAN2_MAGTHRESH);
if(!x2290.valid){
continue;
}
CheckValue<IkReal> x2291=IKPowWithIntegerCheck(IKsign(((-1.0)+x2283+(((-1.0)*x2283*(cj2*cj2))))),-1);
if(!x2291.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2290.value)+(((1.5707963267949)*(x2291.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2292=IKcos(j3);
IkReal x2293=IKsin(j3);
IkReal x2294=(cj5*r01);
IkReal x2295=(cj0*sj4);
IkReal x2296=(cj0*sj5);
IkReal x2297=((0.04225)*r11);
IkReal x2298=((0.021)*r10);
IkReal x2299=(r21*sj5);
IkReal x2300=((0.021)*r00);
IkReal x2301=((0.021)*sj0);
IkReal x2302=((0.04225)*cj5);
IkReal x2303=(r10*sj0);
IkReal x2304=(sj0*sj5);
IkReal x2305=((1.0)*cj2);
IkReal x2306=((1.0)*sj0);
IkReal x2307=(cj0*r00);
IkReal x2308=(cj4*r02);
IkReal x2309=((1.0)*cj0);
IkReal x2310=((0.0137)*cj2);
IkReal x2311=((0.04225)*r01);
IkReal x2312=(cj4*r12);
IkReal x2313=((1.0)*sj4);
IkReal x2314=(cj5*r11);
IkReal x2315=((1.0)*r11);
IkReal x2316=(r20*sj5);
IkReal x2317=((0.021)*cj0);
IkReal x2318=((0.24475)*cj2);
IkReal x2319=(cj5*r21);
IkReal x2320=(cj0*r10);
IkReal x2321=((0.224)*cj2);
IkReal x2322=(cj1*x2293);
IkReal x2323=(cj1*x2292);
IkReal x2324=(sj1*x2293);
IkReal x2325=(sj2*x2292);
IkReal x2326=(sj2*x2293);
IkReal x2327=(sj1*x2292);
evalcond[0]=(x2299+x2324+(((-1.0)*cj5*r20))+(((-1.0)*x2305*x2323)));
evalcond[1]=((((-1.0)*x2296*x2315))+x2325+((cj5*x2320))+(((-1.0)*cj5*r00*x2306))+((r01*x2304)));
evalcond[2]=(((cj4*r22))+((cj2*x2322))+x2327+(((-1.0)*x2313*x2319))+(((-1.0)*x2313*x2316)));
evalcond[3]=(((cj2*x2327))+(((-1.0)*x2304*x2315))+x2322+((cj5*x2303))+((cj5*x2307))+(((-1.0)*r01*x2296)));
evalcond[4]=(((sj0*x2308))+(((-1.0)*x2309*x2312))+((x2295*x2314))+(((-1.0)*r00*x2304*x2313))+((r10*sj5*x2295))+(((-1.0)*sj4*x2294*x2306))+(((-1.0)*x2326)));
evalcond[5]=(x2323+(((-1.0)*x2308*x2309))+((sj0*sj4*x2314))+(((-1.0)*x2306*x2312))+((r00*sj5*x2295))+((sj4*sj5*x2303))+((x2294*x2295))+(((-1.0)*x2305*x2324)));
evalcond[6]=((((-0.021)*x2316))+(((-0.021)*x2319))+(((-0.04225)*x2299))+(((-1.0)*x2318*x2323))+((r20*x2302))+(((0.24475)*x2324))+(((-0.26630543)*cj1))+pz+(((-1.0)*cj1*x2321))+(((0.0137)*x2327))+((x2310*x2322)));
evalcond[7]=((-0.00025116)+((x2296*x2297))+((x2296*x2298))+(((0.224)*sj2))+(((-1.0)*x2304*x2311))+(((-1.0)*x2300*x2304))+(((0.24475)*x2325))+((x2314*x2317))+(((-1.0)*x2294*x2301))+((px*sj0))+((r00*sj0*x2302))+(((-1.0)*py*x2309))+(((-1.0)*x2302*x2320))+(((-0.0137)*x2326)));
evalcond[8]=(((x2298*x2304))+(((-1.0)*x2310*x2324))+(((0.24475)*x2322))+((x2297*x2304))+((sj1*x2321))+((x2296*x2300))+((x2318*x2327))+(((-1.0)*px*x2309))+((x2296*x2311))+((x2301*x2314))+(((-1.0)*x2302*x2303))+(((-1.0)*x2302*x2307))+((x2294*x2317))+(((0.26630543)*sj1))+(((0.0137)*x2323))+(((-1.0)*py*x2306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2328=(cj4*sj5);
IkReal x2329=(cj4*cj5);
IkReal x2330=((1.0)*sj0);
CheckValue<IkReal> x2331=IKPowWithIntegerCheck(cj1,-1);
if(!x2331.valid){
continue;
}
if( IKabs(((x2331.value)*(((((-1.0)*r20*x2328))+(((-1.0)*r22*sj4))+(((-1.0)*r21*x2329)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*sj4*x2330))+((cj0*r11*x2329))+(((-1.0)*r00*x2328*x2330))+((cj0*r12*sj4))+((cj0*r10*x2328))+(((-1.0)*r01*x2329*x2330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2331.value)*(((((-1.0)*r20*x2328))+(((-1.0)*r22*sj4))+(((-1.0)*r21*x2329))))))+IKsqr(((((-1.0)*r02*sj4*x2330))+((cj0*r11*x2329))+(((-1.0)*r00*x2328*x2330))+((cj0*r12*sj4))+((cj0*r10*x2328))+(((-1.0)*r01*x2329*x2330))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x2331.value)*(((((-1.0)*r20*x2328))+(((-1.0)*r22*sj4))+(((-1.0)*r21*x2329))))), ((((-1.0)*r02*sj4*x2330))+((cj0*r11*x2329))+(((-1.0)*r00*x2328*x2330))+((cj0*r12*sj4))+((cj0*r10*x2328))+(((-1.0)*r01*x2329*x2330))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x2332=IKsin(j2);
IkReal x2333=((1.0)*sj4);
IkReal x2334=(r00*sj5);
IkReal x2335=(cj5*r01);
IkReal x2336=(cj4*sj0);
IkReal x2337=(r10*sj5);
IkReal x2338=(cj5*r11);
IkReal x2339=((1.0)*cj0*cj4);
evalcond[0]=(((cj4*r20*sj5))+((r22*sj4))+((cj1*x2332))+((cj4*cj5*r21)));
evalcond[1]=(((r02*sj0*sj4))+(((-1.0)*x2338*x2339))+(((-1.0)*x2337*x2339))+((x2335*x2336))+((x2334*x2336))+(IKcos(j2))+(((-1.0)*cj0*r12*x2333)));
evalcond[2]=((((-1.0)*r12*sj0*x2333))+(((-1.0)*cj0*r02*x2333))+(((-1.0)*x2335*x2339))+(((-1.0)*x2334*x2339))+(((-1.0)*x2336*x2338))+(((-1.0)*x2336*x2337))+(((-1.0)*sj1*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
IkReal x2340=cj1*cj1;
IkReal x2341=(cj1*cj2);
IkReal x2342=(cj4*r22);
IkReal x2343=(cj5*r20);
IkReal x2344=((1.0)*r21);
IkReal x2345=(cj5*sj4);
IkReal x2346=((1.0)*r20*sj4*sj5);
IkReal x2347=((-1.0)+(((-1.0)*x2340*(cj2*cj2)))+x2340);
j3eval[0]=x2347;
j3eval[1]=((IKabs((((sj1*x2342))+((x2341*x2343))+(((-1.0)*sj1*x2346))+(((-1.0)*sj1*x2344*x2345))+(((-1.0)*sj5*x2341*x2344)))))+(IKabs((((x2341*x2342))+(((-1.0)*sj1*x2343))+(((-1.0)*x2341*x2346))+((r21*sj1*sj5))+(((-1.0)*x2341*x2344*x2345))))));
j3eval[2]=IKsign(x2347);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=sj1;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2348=(r00*sj5);
IkReal x2349=(cj5*r01);
IkReal x2350=(cj4*sj0);
IkReal x2351=(r02*sj4);
IkReal x2352=(r10*sj5);
IkReal x2353=(cj5*r11);
IkReal x2354=((1.0)*r12*sj4);
IkReal x2355=((1.0)*cj0*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+sj2+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=(((sj0*x2351))+cj2+((x2348*x2350))+(((-1.0)*x2352*x2355))+(((-1.0)*x2353*x2355))+((x2349*x2350))+(((-1.0)*cj0*x2354)));
evalcond[3]=((((-1.0)*x2348*x2355))+(((-1.0)*sj0*x2354))+(((-1.0)*cj0*x2351))+(((-1.0)*x2350*x2353))+(((-1.0)*x2350*x2352))+(((-1.0)*x2349*x2355)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
j3eval[2]=((IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*r20))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=0;
cj1=1.0;
j1=0;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2356=((1.0)*cj0);
IkReal x2357=(r21*sj5);
IkReal x2358=(sj0*sj4);
IkReal x2359=(cj4*cj5);
IkReal x2360=((1.0)*sj5);
IkReal x2361=(cj4*sj0);
IkReal x2362=(cj5*r21);
IkReal x2363=(r00*sj5);
IkReal x2364=(cj5*r20);
IkReal x2365=(cj4*sj5);
IkReal x2366=(r01*x2359);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x2365))+((r22*sj4))+((r21*x2359)));
evalcond[2]=(x2357+(((-1.0)*x2364)));
evalcond[3]=(((cj4*r22))+(((-1.0)*sj4*x2362))+(((-1.0)*r20*sj4*x2360)));
evalcond[4]=((((-1.0)*r10*x2356*x2365))+((sj0*x2366))+(((-1.0)*r12*sj4*x2356))+((x2361*x2363))+(((-1.0)*r11*x2356*x2359))+((r02*x2358)));
evalcond[5]=((((-1.0)*r10*x2360*x2361))+(((-1.0)*r02*sj4*x2356))+(((-1.0)*cj4*x2356*x2363))+(((-1.0)*x2356*x2366))+(((-1.0)*r12*x2358))+(((-1.0)*r11*sj0*x2359)));
evalcond[6]=((-0.26630543)+(((-0.04225)*x2357))+(((0.04225)*x2364))+(((-0.021)*r20*sj5))+pz+(((-0.021)*x2362)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2367=(cj5*r00);
IkReal x2368=((1.0)*cj0);
IkReal x2369=(cj0*sj5);
IkReal x2370=(cj5*r10);
IkReal x2371=(sj0*sj5);
if( IKabs(((((-1.0)*sj0*x2370))+(((-1.0)*x2367*x2368))+((r01*x2369))+((r11*x2371)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2369))+((sj0*x2367))+(((-1.0)*x2368*x2370))+(((-1.0)*r01*x2371)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x2370))+(((-1.0)*x2367*x2368))+((r01*x2369))+((r11*x2371))))+IKsqr((((r11*x2369))+((sj0*x2367))+(((-1.0)*x2368*x2370))+(((-1.0)*r01*x2371))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj0*x2370))+(((-1.0)*x2367*x2368))+((r01*x2369))+((r11*x2371))), (((r11*x2369))+((sj0*x2367))+(((-1.0)*x2368*x2370))+(((-1.0)*r01*x2371))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2372=IKcos(j3);
IkReal x2373=IKsin(j3);
IkReal x2374=(cj5*r01);
IkReal x2375=(cj0*sj4);
IkReal x2376=(cj0*sj5);
IkReal x2377=((0.04225)*r11);
IkReal x2378=((0.021)*r10);
IkReal x2379=(r00*sj0);
IkReal x2380=((0.04225)*cj5);
IkReal x2381=((0.021)*sj0);
IkReal x2382=(sj0*sj5);
IkReal x2383=((0.04225)*r01);
IkReal x2384=((1.0)*sj4);
IkReal x2385=((1.0)*r11);
IkReal x2386=(cj0*r00);
IkReal x2387=(cj4*sj0);
IkReal x2388=(cj5*r11);
IkReal x2389=((1.0)*py);
IkReal x2390=((0.021)*cj0);
IkReal x2391=(cj0*r10);
IkReal x2392=(r10*sj0);
IkReal x2393=((1.0)*cj0*cj4);
evalcond[0]=(((r01*x2382))+(((-1.0)*x2376*x2385))+x2372+(((-1.0)*cj5*x2379))+((cj5*x2391)));
evalcond[1]=(x2373+(((-1.0)*x2382*x2385))+(((-1.0)*r01*x2376))+((cj5*x2392))+((cj5*x2386)));
evalcond[2]=((((-1.0)*r12*x2387))+(((-1.0)*r02*x2393))+x2372+((sj0*sj4*x2388))+((r10*sj4*x2382))+((x2374*x2375))+((r00*sj5*x2375)));
evalcond[3]=((((-1.0)*x2373))+((r02*x2387))+((r10*sj5*x2375))+((x2375*x2388))+(((-1.0)*sj5*x2379*x2384))+(((-1.0)*sj0*x2374*x2384))+(((-1.0)*r12*x2393)));
evalcond[4]=((0.22374884)+(((-1.0)*x2374*x2381))+(((0.24475)*x2372))+(((-1.0)*x2380*x2391))+(((-0.0137)*x2373))+(((-1.0)*x2382*x2383))+(((-1.0)*cj0*x2389))+((x2379*x2380))+((px*sj0))+((x2388*x2390))+((x2376*x2377))+((x2376*x2378))+(((-0.021)*sj5*x2379)));
evalcond[5]=((((-1.0)*x2380*x2386))+(((0.24475)*x2373))+(((0.0137)*x2372))+(((-1.0)*x2380*x2392))+((x2381*x2388))+((x2376*x2383))+(((0.021)*r00*x2376))+(((-1.0)*sj0*x2389))+((x2374*x2390))+(((-1.0)*cj0*px))+((x2377*x2382))+((x2378*x2382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2394=((1.0)*cj0);
IkReal x2395=(r21*sj5);
IkReal x2396=(sj0*sj4);
IkReal x2397=(cj4*cj5);
IkReal x2398=((1.0)*sj5);
IkReal x2399=(cj4*sj0);
IkReal x2400=(cj5*r21);
IkReal x2401=(r00*sj5);
IkReal x2402=(cj5*r20);
IkReal x2403=(cj4*sj5);
IkReal x2404=(r01*x2397);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x2403))+((r22*sj4))+((r21*x2397)));
evalcond[2]=((((-1.0)*x2402))+x2395);
evalcond[3]=(((cj4*r22))+(((-1.0)*sj4*x2400))+(((-1.0)*r20*sj4*x2398)));
evalcond[4]=((((-1.0)*r10*x2394*x2403))+(((-1.0)*r11*x2394*x2397))+((x2399*x2401))+((r02*x2396))+((sj0*x2404))+(((-1.0)*r12*sj4*x2394)));
evalcond[5]=((((-1.0)*r12*x2396))+(((-1.0)*x2394*x2404))+(((-1.0)*r02*sj4*x2394))+(((-1.0)*r11*sj0*x2397))+(((-1.0)*cj4*x2394*x2401))+(((-1.0)*r10*x2398*x2399)));
evalcond[6]=((-0.26630543)+(((-0.04225)*x2395))+(((-0.021)*r20*sj5))+pz+(((0.04225)*x2402))+(((-0.021)*x2400)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2405=(r01*sj5);
IkReal x2406=(cj5*r10);
IkReal x2407=(r11*sj5);
IkReal x2408=((1.0)*cj5*r00);
if( IKabs((((cj0*x2405))+(((-1.0)*sj0*x2406))+((sj0*x2407))+(((-1.0)*cj0*x2408)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*x2406))+((sj0*x2405))+(((-1.0)*sj0*x2408))+(((-1.0)*cj0*x2407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*x2405))+(((-1.0)*sj0*x2406))+((sj0*x2407))+(((-1.0)*cj0*x2408))))+IKsqr((((cj0*x2406))+((sj0*x2405))+(((-1.0)*sj0*x2408))+(((-1.0)*cj0*x2407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj0*x2405))+(((-1.0)*sj0*x2406))+((sj0*x2407))+(((-1.0)*cj0*x2408))), (((cj0*x2406))+((sj0*x2405))+(((-1.0)*sj0*x2408))+(((-1.0)*cj0*x2407))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2409=IKcos(j3);
IkReal x2410=IKsin(j3);
IkReal x2411=(cj5*r01);
IkReal x2412=(cj0*sj4);
IkReal x2413=(cj0*sj5);
IkReal x2414=((0.04225)*r11);
IkReal x2415=((0.021)*r10);
IkReal x2416=(r00*sj0);
IkReal x2417=((0.04225)*cj5);
IkReal x2418=((0.021)*sj0);
IkReal x2419=(sj0*sj5);
IkReal x2420=((0.04225)*r01);
IkReal x2421=((1.0)*sj4);
IkReal x2422=((1.0)*r11);
IkReal x2423=(cj0*r00);
IkReal x2424=(cj4*sj0);
IkReal x2425=(cj5*r11);
IkReal x2426=((1.0)*py);
IkReal x2427=((0.021)*cj0);
IkReal x2428=(cj0*r10);
IkReal x2429=(r10*sj0);
IkReal x2430=((1.0)*cj0*cj4);
evalcond[0]=(x2410+((cj5*x2423))+((cj5*x2429))+(((-1.0)*r01*x2413))+(((-1.0)*x2419*x2422)));
evalcond[1]=((((-1.0)*x2409))+((r01*x2419))+((cj5*x2428))+(((-1.0)*x2413*x2422))+(((-1.0)*cj5*x2416)));
evalcond[2]=((((-1.0)*r12*x2424))+x2409+((sj0*sj4*x2425))+((r00*sj5*x2412))+(((-1.0)*r02*x2430))+((x2411*x2412))+((r10*sj4*x2419)));
evalcond[3]=(((r10*sj5*x2412))+x2410+((x2412*x2425))+(((-1.0)*sj5*x2416*x2421))+(((-1.0)*sj0*x2411*x2421))+(((-1.0)*r12*x2430))+((r02*x2424)));
evalcond[4]=((-0.22425116)+((x2413*x2415))+((x2413*x2414))+(((-1.0)*x2411*x2418))+((x2416*x2417))+(((-1.0)*cj0*x2426))+(((-1.0)*x2417*x2428))+((x2425*x2427))+((px*sj0))+(((-1.0)*x2419*x2420))+(((0.0137)*x2410))+(((-0.24475)*x2409))+(((-0.021)*sj5*x2416)));
evalcond[5]=(((x2413*x2420))+((x2418*x2425))+((x2414*x2419))+(((-1.0)*sj0*x2426))+(((0.0137)*x2409))+((x2415*x2419))+(((0.24475)*x2410))+((x2411*x2427))+(((-1.0)*x2417*x2429))+(((-1.0)*x2417*x2423))+(((0.021)*r00*x2413))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2431=((1.0)*cj0);
IkReal x2432=(cj0*sj5);
IkReal x2433=(cj5*sj0);
IkReal x2434=(sj0*sj4);
IkReal x2435=(cj5*r11);
IkReal x2436=(r00*sj5);
IkReal x2437=(cj4*sj0);
IkReal x2438=(r10*sj5);
IkReal x2439=(cj4*cj5*r01);
IkReal x2440=(r01*sj0*sj5);
IkReal x2441=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=(x2440+x2441+(((-1.0)*r00*x2433))+(((-1.0)*r11*sj5*x2431)));
evalcond[3]=((1.0)+((cj4*r01*x2433))+((r02*x2434))+(((-1.0)*r12*sj4*x2431))+((x2436*x2437))+(((-1.0)*cj4*x2431*x2435))+(((-1.0)*cj4*x2431*x2438)));
evalcond[4]=(((cj0*sj4*x2435))+(((-1.0)*r01*sj4*x2433))+((r02*x2437))+(((-1.0)*cj4*r12*x2431))+((r10*sj4*x2432))+(((-1.0)*x2434*x2436)));
evalcond[5]=((((-1.0)*x2431*x2439))+(((-1.0)*r12*x2434))+(((-1.0)*cj4*r11*x2433))+(((-1.0)*x2437*x2438))+(((-1.0)*r02*sj4*x2431))+(((-1.0)*cj4*x2431*x2436)));
evalcond[6]=((-0.00025116)+(((-0.021)*r01*x2433))+(((-0.04225)*x2440))+(((-0.04225)*x2441))+(((0.04225)*r11*x2432))+(((-1.0)*py*x2431))+(((0.021)*cj0*x2435))+(((-0.021)*sj0*x2436))+((px*sj0))+(((0.04225)*r00*x2433))+(((0.021)*r10*x2432)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))+IKsqr((((r21*sj5))+(((-1.0)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))), (((r21*sj5))+(((-1.0)*cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2442=IKsin(j3);
IkReal x2443=IKcos(j3);
IkReal x2444=(cj0*r01);
IkReal x2445=((0.021)*cj5);
IkReal x2446=(r21*sj5);
IkReal x2447=((1.0)*cj0);
IkReal x2448=((0.04225)*sj5);
IkReal x2449=(cj5*sj4);
IkReal x2450=((1.0)*sj5);
IkReal x2451=(r11*sj0);
IkReal x2452=((1.0)*sj0);
IkReal x2453=(cj5*r20);
IkReal x2454=((0.021)*sj5);
IkReal x2455=(r10*sj0);
IkReal x2456=(cj0*r00);
IkReal x2457=(sj4*sj5);
IkReal x2458=(cj5*x2456);
evalcond[0]=(x2446+(((-1.0)*x2443))+(((-1.0)*x2453)));
evalcond[1]=(x2442+((cj4*r22))+(((-1.0)*r21*x2449))+(((-1.0)*r20*sj4*x2450)));
evalcond[2]=((((-1.0)*x2450*x2451))+x2442+x2458+(((-1.0)*x2444*x2450))+((cj5*x2455)));
evalcond[3]=((-0.49030543)+(((0.0137)*x2442))+(((-0.04225)*x2446))+(((-0.24475)*x2443))+(((-1.0)*r21*x2445))+(((-1.0)*r20*x2454))+pz+(((0.04225)*x2453)));
evalcond[4]=(x2443+(((-1.0)*cj4*r12*x2452))+((x2456*x2457))+((x2449*x2451))+((x2444*x2449))+((x2455*x2457))+(((-1.0)*cj4*r02*x2447)));
evalcond[5]=((((-0.04225)*cj5*x2455))+(((0.0137)*x2443))+(((-1.0)*py*x2452))+(((0.24475)*x2442))+(((-0.04225)*x2458))+((x2454*x2456))+((x2454*x2455))+((x2448*x2451))+((x2444*x2448))+((x2444*x2445))+(((-1.0)*px*x2447))+((x2445*x2451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2459=((1.0)*cj0);
IkReal x2460=(cj0*sj5);
IkReal x2461=(cj5*sj0);
IkReal x2462=(sj0*sj4);
IkReal x2463=(cj5*r11);
IkReal x2464=(r00*sj5);
IkReal x2465=(cj4*sj0);
IkReal x2466=(r10*sj5);
IkReal x2467=(cj4*cj5*r01);
IkReal x2468=(r01*sj0*sj5);
IkReal x2469=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*r00*x2461))+x2468+x2469+(((-1.0)*r11*sj5*x2459)));
evalcond[3]=((-1.0)+((cj4*r01*x2461))+((x2464*x2465))+((r02*x2462))+(((-1.0)*cj4*x2459*x2466))+(((-1.0)*cj4*x2459*x2463))+(((-1.0)*r12*sj4*x2459)));
evalcond[4]=((((-1.0)*cj4*r12*x2459))+((cj0*sj4*x2463))+((r10*sj4*x2460))+((r02*x2465))+(((-1.0)*r01*sj4*x2461))+(((-1.0)*x2462*x2464)));
evalcond[5]=((((-1.0)*cj4*r11*x2461))+(((-1.0)*x2465*x2466))+(((-1.0)*cj4*x2459*x2464))+(((-1.0)*r02*sj4*x2459))+(((-1.0)*r12*x2462))+(((-1.0)*x2459*x2467)));
evalcond[6]=((-0.00025116)+(((-1.0)*py*x2459))+(((-0.04225)*x2468))+(((-0.04225)*x2469))+(((0.04225)*r11*x2460))+(((0.021)*r10*x2460))+(((-0.021)*sj0*x2464))+(((-0.021)*r01*x2461))+(((0.04225)*r00*x2461))+((px*sj0))+(((0.021)*cj0*x2463)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2470=((1.0)*sj4);
if( IKabs(((((-1.0)*r20*sj5*x2470))+((cj4*r22))+(((-1.0)*cj5*r21*x2470)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj5*x2470))+((cj4*r22))+(((-1.0)*cj5*r21*x2470))))+IKsqr((((cj5*r20))+(((-1.0)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r20*sj5*x2470))+((cj4*r22))+(((-1.0)*cj5*r21*x2470))), (((cj5*r20))+(((-1.0)*r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2471=IKsin(j3);
IkReal x2472=IKcos(j3);
IkReal x2473=(cj0*r01);
IkReal x2474=((0.021)*cj5);
IkReal x2475=(r21*sj5);
IkReal x2476=((1.0)*cj0);
IkReal x2477=((0.04225)*sj5);
IkReal x2478=(cj5*sj4);
IkReal x2479=((1.0)*sj5);
IkReal x2480=(r11*sj0);
IkReal x2481=((1.0)*sj0);
IkReal x2482=(cj5*r20);
IkReal x2483=((0.021)*sj5);
IkReal x2484=(r10*sj0);
IkReal x2485=(cj0*r00);
IkReal x2486=(sj4*sj5);
IkReal x2487=(cj5*x2485);
evalcond[0]=(x2475+x2472+(((-1.0)*x2482)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x2471))+(((-1.0)*r20*sj4*x2479))+(((-1.0)*r21*x2478)));
evalcond[2]=(x2487+x2471+(((-1.0)*x2473*x2479))+((cj5*x2484))+(((-1.0)*x2479*x2480)));
evalcond[3]=((-0.04230543)+(((-1.0)*r21*x2474))+(((0.24475)*x2472))+(((0.04225)*x2482))+(((-1.0)*r20*x2483))+pz+(((-0.04225)*x2475))+(((-0.0137)*x2471)));
evalcond[4]=(x2472+((x2485*x2486))+(((-1.0)*cj4*r12*x2481))+((x2484*x2486))+(((-1.0)*cj4*r02*x2476))+((x2478*x2480))+((x2473*x2478)));
evalcond[5]=((((-0.04225)*x2487))+((x2477*x2480))+(((0.24475)*x2471))+((x2483*x2485))+((x2483*x2484))+(((-1.0)*py*x2481))+((x2474*x2480))+(((0.0137)*x2472))+(((-1.0)*px*x2476))+((x2473*x2474))+((x2473*x2477))+(((-0.04225)*cj5*x2484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2488=IKPowWithIntegerCheck(cj2,-1);
if(!x2488.valid){
continue;
}
CheckValue<IkReal> x2489=IKPowWithIntegerCheck(sj2,-1);
if(!x2489.valid){
continue;
}
if( IKabs(((x2488.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2489.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2488.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))))+IKsqr(((x2489.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x2488.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))), ((x2489.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2490=IKsin(j3);
IkReal x2491=IKcos(j3);
IkReal x2492=(cj0*sj5);
IkReal x2493=((0.04225)*r11);
IkReal x2494=((0.021)*r10);
IkReal x2495=(r21*sj5);
IkReal x2496=(sj0*sj5);
IkReal x2497=(cj0*cj5);
IkReal x2498=((0.04225)*r00);
IkReal x2499=((0.04225)*r01);
IkReal x2500=(cj4*r02);
IkReal x2501=((1.0)*cj0);
IkReal x2502=(cj4*r12);
IkReal x2503=((1.0)*r00);
IkReal x2504=(r01*sj4);
IkReal x2505=(r11*sj4);
IkReal x2506=((1.0)*r11);
IkReal x2507=(cj5*sj0);
IkReal x2508=(r10*sj4);
IkReal x2509=((1.0)*r20);
IkReal x2510=((1.0)*sj0);
IkReal x2511=((0.021)*r11);
IkReal x2512=(cj5*r21);
IkReal x2513=((0.04225)*r10);
IkReal x2514=((0.021)*r00);
IkReal x2515=((0.021)*cj5*r01);
IkReal x2516=(sj2*x2490);
IkReal x2517=(sj2*x2491);
IkReal x2518=(cj2*x2491);
IkReal x2519=(cj2*x2490);
evalcond[0]=(x2495+(((-1.0)*cj5*x2509))+(((-1.0)*x2518)));
evalcond[1]=(x2519+((cj4*r22))+(((-1.0)*sj4*x2512))+(((-1.0)*sj4*sj5*x2509)));
evalcond[2]=(((r00*x2497))+x2490+((r10*x2507))+(((-1.0)*x2496*x2506))+(((-1.0)*r01*x2492)));
evalcond[3]=(x2517+(((-1.0)*x2503*x2507))+(((-1.0)*x2492*x2506))+((r01*x2496))+((r10*x2497)));
evalcond[4]=((-0.26630543)+(((0.0137)*x2519))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+(((-0.24475)*x2518))+(((-0.021)*x2512))+pz+(((-0.224)*cj2))+(((-0.04225)*x2495)));
evalcond[5]=(x2491+((x2497*x2504))+(((-1.0)*x2502*x2510))+((x2496*x2508))+((x2505*x2507))+(((-1.0)*x2500*x2501))+((r00*sj4*x2492)));
evalcond[6]=(((x2497*x2505))+((x2492*x2508))+(((-1.0)*sj4*x2496*x2503))+(((-1.0)*x2504*x2507))+((sj0*x2500))+(((-1.0)*x2501*x2502))+(((-1.0)*x2516)));
evalcond[7]=(((x2492*x2499))+((x2494*x2496))+(((-1.0)*x2497*x2498))+(((0.021)*r01*x2497))+((x2493*x2496))+(((0.24475)*x2490))+(((-1.0)*px*x2501))+((x2507*x2511))+(((0.0137)*x2491))+(((-1.0)*py*x2510))+(((-1.0)*x2507*x2513))+((x2492*x2514)));
evalcond[8]=((-0.00025116)+((x2492*x2494))+((x2492*x2493))+(((0.224)*sj2))+((x2497*x2511))+(((-1.0)*x2496*x2499))+(((-1.0)*x2497*x2513))+(((0.24475)*x2517))+(((-1.0)*x2496*x2514))+((px*sj0))+(((-0.0137)*x2516))+(((-1.0)*py*x2501))+(((-0.021)*r01*x2507))+((x2498*x2507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2520=((1.0)*cj5);
CheckValue<IkReal> x2521=IKPowWithIntegerCheck(cj2,-1);
if(!x2521.valid){
continue;
}
if( IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2520))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2520)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2521.value)*((((r21*sj5))+(((-1.0)*r20*x2520)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2520))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2520))))+IKsqr(((x2521.value)*((((r21*sj5))+(((-1.0)*r20*x2520))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2520))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x2520))), ((x2521.value)*((((r21*sj5))+(((-1.0)*r20*x2520))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2522=IKsin(j3);
IkReal x2523=IKcos(j3);
IkReal x2524=(cj0*sj5);
IkReal x2525=((0.04225)*r11);
IkReal x2526=((0.021)*r10);
IkReal x2527=(r21*sj5);
IkReal x2528=(sj0*sj5);
IkReal x2529=(cj0*cj5);
IkReal x2530=((0.04225)*r00);
IkReal x2531=((0.04225)*r01);
IkReal x2532=(cj4*r02);
IkReal x2533=((1.0)*cj0);
IkReal x2534=(cj4*r12);
IkReal x2535=((1.0)*r00);
IkReal x2536=(r01*sj4);
IkReal x2537=(r11*sj4);
IkReal x2538=((1.0)*r11);
IkReal x2539=(cj5*sj0);
IkReal x2540=(r10*sj4);
IkReal x2541=((1.0)*r20);
IkReal x2542=((1.0)*sj0);
IkReal x2543=((0.021)*r11);
IkReal x2544=(cj5*r21);
IkReal x2545=((0.04225)*r10);
IkReal x2546=((0.021)*r00);
IkReal x2547=((0.021)*cj5*r01);
IkReal x2548=(sj2*x2522);
IkReal x2549=(sj2*x2523);
IkReal x2550=(cj2*x2523);
IkReal x2551=(cj2*x2522);
evalcond[0]=(x2527+(((-1.0)*x2550))+(((-1.0)*cj5*x2541)));
evalcond[1]=(x2551+(((-1.0)*sj4*sj5*x2541))+((cj4*r22))+(((-1.0)*sj4*x2544)));
evalcond[2]=((((-1.0)*x2528*x2538))+x2522+(((-1.0)*r01*x2524))+((r10*x2539))+((r00*x2529)));
evalcond[3]=(x2549+(((-1.0)*x2524*x2538))+(((-1.0)*x2535*x2539))+((r01*x2528))+((r10*x2529)));
evalcond[4]=((-0.26630543)+(((0.0137)*x2551))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+pz+(((-0.224)*cj2))+(((-0.24475)*x2550))+(((-0.021)*x2544))+(((-0.04225)*x2527)));
evalcond[5]=(x2523+((x2528*x2540))+((r00*sj4*x2524))+(((-1.0)*x2532*x2533))+((x2529*x2536))+((x2537*x2539))+(((-1.0)*x2534*x2542)));
evalcond[6]=((((-1.0)*x2533*x2534))+((sj0*x2532))+(((-1.0)*x2548))+(((-1.0)*sj4*x2528*x2535))+((x2524*x2540))+(((-1.0)*x2536*x2539))+((x2529*x2537)));
evalcond[7]=((((-1.0)*py*x2542))+((x2539*x2543))+(((-1.0)*px*x2533))+((x2524*x2531))+(((-1.0)*x2539*x2545))+(((0.24475)*x2522))+((x2526*x2528))+((x2525*x2528))+((x2524*x2546))+(((0.021)*r01*x2529))+(((-1.0)*x2529*x2530))+(((0.0137)*x2523)));
evalcond[8]=((-0.00025116)+(((-1.0)*x2528*x2531))+(((0.224)*sj2))+((x2530*x2539))+((x2529*x2543))+(((-1.0)*x2528*x2546))+(((-1.0)*x2529*x2545))+(((-0.0137)*x2548))+(((0.24475)*x2549))+((px*sj0))+(((-1.0)*py*x2533))+((x2524*x2526))+((x2524*x2525))+(((-0.021)*r01*x2539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2552 = IKatan2WithCheck(IkReal((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))),(((r21*sj5))+(((-1.0)*cj5*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x2552.valid){
continue;
}
CheckValue<IkReal> x2553=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x2553.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2552.value)+(((1.5707963267949)*(x2553.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2554=IKsin(j3);
IkReal x2555=IKcos(j3);
IkReal x2556=(cj0*sj5);
IkReal x2557=((0.04225)*r11);
IkReal x2558=((0.021)*r10);
IkReal x2559=(r21*sj5);
IkReal x2560=(sj0*sj5);
IkReal x2561=(cj0*cj5);
IkReal x2562=((0.04225)*r00);
IkReal x2563=((0.04225)*r01);
IkReal x2564=(cj4*r02);
IkReal x2565=((1.0)*cj0);
IkReal x2566=(cj4*r12);
IkReal x2567=((1.0)*r00);
IkReal x2568=(r01*sj4);
IkReal x2569=(r11*sj4);
IkReal x2570=((1.0)*r11);
IkReal x2571=(cj5*sj0);
IkReal x2572=(r10*sj4);
IkReal x2573=((1.0)*r20);
IkReal x2574=((1.0)*sj0);
IkReal x2575=((0.021)*r11);
IkReal x2576=(cj5*r21);
IkReal x2577=((0.04225)*r10);
IkReal x2578=((0.021)*r00);
IkReal x2579=((0.021)*cj5*r01);
IkReal x2580=(sj2*x2554);
IkReal x2581=(sj2*x2555);
IkReal x2582=(cj2*x2555);
IkReal x2583=(cj2*x2554);
evalcond[0]=(x2559+(((-1.0)*x2582))+(((-1.0)*cj5*x2573)));
evalcond[1]=((((-1.0)*sj4*sj5*x2573))+x2583+((cj4*r22))+(((-1.0)*sj4*x2576)));
evalcond[2]=(((r10*x2571))+x2554+((r00*x2561))+(((-1.0)*r01*x2556))+(((-1.0)*x2560*x2570)));
evalcond[3]=(x2581+((r01*x2560))+(((-1.0)*x2556*x2570))+((r10*x2561))+(((-1.0)*x2567*x2571)));
evalcond[4]=((-0.26630543)+(((-0.021)*x2576))+(((-0.24475)*x2582))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+pz+(((-0.224)*cj2))+(((0.0137)*x2583))+(((-0.04225)*x2559)));
evalcond[5]=(x2555+(((-1.0)*x2566*x2574))+((x2560*x2572))+((r00*sj4*x2556))+(((-1.0)*x2564*x2565))+((x2569*x2571))+((x2561*x2568)));
evalcond[6]=((((-1.0)*x2568*x2571))+(((-1.0)*x2580))+((x2556*x2572))+(((-1.0)*x2565*x2566))+((sj0*x2564))+((x2561*x2569))+(((-1.0)*sj4*x2560*x2567)));
evalcond[7]=(((x2571*x2575))+(((0.0137)*x2555))+(((-1.0)*py*x2574))+(((-1.0)*x2571*x2577))+((x2556*x2563))+((x2557*x2560))+((x2558*x2560))+(((-1.0)*x2561*x2562))+((x2556*x2578))+(((0.24475)*x2554))+(((0.021)*r01*x2561))+(((-1.0)*px*x2565)));
evalcond[8]=((-0.00025116)+(((0.24475)*x2581))+(((0.224)*sj2))+(((-0.0137)*x2580))+((x2561*x2575))+(((-0.021)*r01*x2571))+((x2556*x2558))+((x2556*x2557))+(((-1.0)*x2560*x2563))+((px*sj0))+(((-1.0)*py*x2565))+(((-1.0)*x2560*x2578))+((x2562*x2571))+(((-1.0)*x2561*x2577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2584=(r00*sj5);
IkReal x2585=(cj5*r01);
IkReal x2586=(cj4*sj0);
IkReal x2587=(r02*sj4);
IkReal x2588=(r10*sj5);
IkReal x2589=(cj5*r11);
IkReal x2590=((1.0)*r12*sj4);
IkReal x2591=((1.0)*cj0*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=(((x2584*x2586))+cj2+(((-1.0)*x2589*x2591))+(((-1.0)*x2588*x2591))+(((-1.0)*cj0*x2590))+((sj0*x2587))+((x2585*x2586)));
evalcond[3]=((((-1.0)*cj0*x2587))+(((-1.0)*x2585*x2591))+(((-1.0)*sj0*x2590))+(((-1.0)*x2586*x2588))+(((-1.0)*x2586*x2589))+(((-1.0)*x2584*x2591)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x2592=((1.0)*r21);
j3eval[0]=cj2;
j3eval[1]=((IKabs((((cj5*r20))+(((-1.0)*sj5*x2592)))))+(IKabs((((cj4*r22))+(((-1.0)*cj5*sj4*x2592))+(((-1.0)*r20*sj4*sj5))))));
j3eval[2]=IKsign(cj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2593=((1.0)*cj0);
IkReal x2594=(r21*sj5);
IkReal x2595=(sj0*sj4);
IkReal x2596=(cj4*cj5);
IkReal x2597=((1.0)*sj5);
IkReal x2598=(cj4*sj0);
IkReal x2599=(cj5*r21);
IkReal x2600=(r00*sj5);
IkReal x2601=(cj5*r20);
IkReal x2602=(cj4*sj5);
IkReal x2603=(r01*x2596);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((r20*x2602))+((r22*sj4))+((r21*x2596)));
evalcond[2]=(x2594+(((-1.0)*x2601)));
evalcond[3]=(((cj4*r22))+(((-1.0)*sj4*x2599))+(((-1.0)*r20*sj4*x2597)));
evalcond[4]=((((-1.0)*r10*x2593*x2602))+(((-1.0)*r11*x2593*x2596))+((x2598*x2600))+((sj0*x2603))+(((-1.0)*r12*sj4*x2593))+((r02*x2595)));
evalcond[5]=((((-1.0)*x2593*x2603))+(((-1.0)*r12*x2595))+(((-1.0)*r02*sj4*x2593))+(((-1.0)*cj4*x2593*x2600))+(((-1.0)*r11*sj0*x2596))+(((-1.0)*r10*x2597*x2598)));
evalcond[6]=((0.26630543)+(((0.04225)*x2601))+(((-0.021)*x2599))+(((-0.021)*r20*sj5))+pz+(((-0.04225)*x2594)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2604=(r11*sj5);
IkReal x2605=(cj5*sj0);
IkReal x2606=((1.0)*sj0);
IkReal x2607=(r01*sj5);
IkReal x2608=(cj0*cj5);
if( IKabs(((((-1.0)*cj0*x2607))+((r10*x2605))+((r00*x2608))+(((-1.0)*x2604*x2606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2608))+((cj0*x2604))+(((-1.0)*x2606*x2607))+((r00*x2605)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x2607))+((r10*x2605))+((r00*x2608))+(((-1.0)*x2604*x2606))))+IKsqr(((((-1.0)*r10*x2608))+((cj0*x2604))+(((-1.0)*x2606*x2607))+((r00*x2605))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*x2607))+((r10*x2605))+((r00*x2608))+(((-1.0)*x2604*x2606))), ((((-1.0)*r10*x2608))+((cj0*x2604))+(((-1.0)*x2606*x2607))+((r00*x2605))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2609=IKcos(j3);
IkReal x2610=IKsin(j3);
IkReal x2611=(cj5*r01);
IkReal x2612=(cj0*sj4);
IkReal x2613=(cj0*sj5);
IkReal x2614=((0.04225)*r11);
IkReal x2615=((0.021)*r10);
IkReal x2616=(r00*sj0);
IkReal x2617=((0.04225)*cj5);
IkReal x2618=((0.021)*sj0);
IkReal x2619=(sj0*sj5);
IkReal x2620=((0.04225)*r01);
IkReal x2621=((1.0)*sj4);
IkReal x2622=((1.0)*r11);
IkReal x2623=(cj0*r00);
IkReal x2624=(cj4*sj0);
IkReal x2625=(cj5*r11);
IkReal x2626=((1.0)*py);
IkReal x2627=((0.021)*cj0);
IkReal x2628=(cj0*r10);
IkReal x2629=(r10*sj0);
IkReal x2630=((1.0)*x2610);
IkReal x2631=((1.0)*cj0*cj4);
evalcond[0]=(((r01*x2619))+((cj5*x2628))+(((-1.0)*x2613*x2622))+(((-1.0)*cj5*x2616))+x2609);
evalcond[1]=((((-1.0)*x2619*x2622))+((cj5*x2629))+((cj5*x2623))+(((-1.0)*r01*x2613))+(((-1.0)*x2630)));
evalcond[2]=(((r10*sj4*x2619))+((sj0*sj4*x2625))+(((-1.0)*r02*x2631))+(((-1.0)*x2609))+((r00*sj5*x2612))+((x2611*x2612))+(((-1.0)*r12*x2624)));
evalcond[3]=((((-1.0)*sj5*x2616*x2621))+(((-1.0)*x2630))+((r02*x2624))+(((-1.0)*sj0*x2611*x2621))+((r10*sj5*x2612))+((x2612*x2625))+(((-1.0)*r12*x2631)));
evalcond[4]=((0.22374884)+((x2613*x2614))+((x2613*x2615))+(((-1.0)*x2619*x2620))+(((-1.0)*x2617*x2628))+(((-1.0)*x2611*x2618))+(((-1.0)*cj0*x2626))+((x2616*x2617))+(((-0.021)*sj5*x2616))+(((-0.0137)*x2610))+((px*sj0))+(((0.24475)*x2609))+((x2625*x2627)));
evalcond[5]=((((-0.24475)*x2610))+(((-1.0)*x2617*x2623))+(((-1.0)*x2617*x2629))+((x2615*x2619))+((x2614*x2619))+((x2618*x2625))+(((-0.0137)*x2609))+((x2611*x2627))+(((0.021)*r00*x2613))+(((-1.0)*sj0*x2626))+(((-1.0)*cj0*px))+((x2613*x2620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2632=((1.0)*cj0);
IkReal x2633=(r21*sj5);
IkReal x2634=(sj0*sj4);
IkReal x2635=(cj4*cj5);
IkReal x2636=((1.0)*sj5);
IkReal x2637=(cj4*sj0);
IkReal x2638=(cj5*r21);
IkReal x2639=(r00*sj5);
IkReal x2640=(cj5*r20);
IkReal x2641=(cj4*sj5);
IkReal x2642=(r01*x2635);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r22*sj4))+((r21*x2635))+((r20*x2641)));
evalcond[2]=((((-1.0)*x2640))+x2633);
evalcond[3]=(((cj4*r22))+(((-1.0)*r20*sj4*x2636))+(((-1.0)*sj4*x2638)));
evalcond[4]=(((sj0*x2642))+((x2637*x2639))+(((-1.0)*r12*sj4*x2632))+(((-1.0)*r11*x2632*x2635))+(((-1.0)*r10*x2632*x2641))+((r02*x2634)));
evalcond[5]=((((-1.0)*x2632*x2642))+(((-1.0)*r11*sj0*x2635))+(((-1.0)*r12*x2634))+(((-1.0)*r10*x2636*x2637))+(((-1.0)*cj4*x2632*x2639))+(((-1.0)*r02*sj4*x2632)));
evalcond[6]=((0.26630543)+(((-0.021)*x2638))+(((-0.021)*r20*sj5))+pz+(((-0.04225)*x2633))+(((0.04225)*x2640)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2643=((1.0)*sj0);
IkReal x2644=(r11*sj5);
IkReal x2645=(cj5*r00);
IkReal x2646=(cj5*r10);
IkReal x2647=(r01*sj5);
IkReal x2648=((1.0)*cj0);
if( IKabs((((sj0*x2646))+(((-1.0)*x2647*x2648))+((cj0*x2645))+(((-1.0)*x2643*x2644)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x2647))+(((-1.0)*x2644*x2648))+((cj0*x2646))+(((-1.0)*x2643*x2645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x2646))+(((-1.0)*x2647*x2648))+((cj0*x2645))+(((-1.0)*x2643*x2644))))+IKsqr((((sj0*x2647))+(((-1.0)*x2644*x2648))+((cj0*x2646))+(((-1.0)*x2643*x2645))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj0*x2646))+(((-1.0)*x2647*x2648))+((cj0*x2645))+(((-1.0)*x2643*x2644))), (((sj0*x2647))+(((-1.0)*x2644*x2648))+((cj0*x2646))+(((-1.0)*x2643*x2645))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2649=IKsin(j3);
IkReal x2650=IKcos(j3);
IkReal x2651=(cj5*sj0);
IkReal x2652=((1.0)*sj4);
IkReal x2653=(cj0*sj5);
IkReal x2654=((0.04225)*r11);
IkReal x2655=((0.021)*r10);
IkReal x2656=((0.04225)*r00);
IkReal x2657=((0.021)*r00);
IkReal x2658=((0.021)*r01);
IkReal x2659=(sj0*sj5);
IkReal x2660=((0.04225)*r01);
IkReal x2661=(r10*sj4);
IkReal x2662=(cj0*cj5);
IkReal x2663=((1.0)*r11);
IkReal x2664=(cj4*sj0);
IkReal x2665=(r11*sj4);
IkReal x2666=((1.0)*py);
IkReal x2667=((0.021)*r11);
IkReal x2668=((0.04225)*r10);
IkReal x2669=((1.0)*x2650);
IkReal x2670=((1.0)*cj0*cj4);
evalcond[0]=((((-1.0)*x2653*x2663))+((r10*x2662))+(((-1.0)*x2669))+((r01*x2659))+(((-1.0)*r00*x2651)));
evalcond[1]=((((-1.0)*r01*x2653))+((r10*x2651))+(((-1.0)*x2659*x2663))+((r00*x2662))+(((-1.0)*x2649)));
evalcond[2]=((((-1.0)*r12*x2670))+((x2662*x2665))+((x2653*x2661))+((r02*x2664))+(((-1.0)*r01*x2651*x2652))+(((-1.0)*r00*x2652*x2659))+x2649);
evalcond[3]=(((x2659*x2661))+(((-1.0)*r02*x2670))+(((-1.0)*x2669))+((x2651*x2665))+((r00*sj4*x2653))+((r01*sj4*x2662))+(((-1.0)*r12*x2664)));
evalcond[4]=((-0.22425116)+(((-1.0)*cj0*x2666))+(((0.0137)*x2649))+(((-1.0)*x2651*x2658))+((x2662*x2667))+(((-0.24475)*x2650))+(((-1.0)*x2662*x2668))+((x2653*x2654))+((x2653*x2655))+(((-1.0)*x2659*x2660))+((px*sj0))+(((-1.0)*x2657*x2659))+((x2651*x2656)));
evalcond[5]=(((x2658*x2662))+(((-1.0)*sj0*x2666))+(((-0.24475)*x2649))+(((-0.0137)*x2650))+((x2655*x2659))+((x2653*x2660))+((x2654*x2659))+((x2653*x2657))+((x2651*x2667))+(((-1.0)*x2651*x2668))+(((-1.0)*cj0*px))+(((-1.0)*x2656*x2662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2671=((1.0)*cj0);
IkReal x2672=(cj0*sj5);
IkReal x2673=(cj5*sj0);
IkReal x2674=(sj0*sj4);
IkReal x2675=(cj5*r11);
IkReal x2676=(r00*sj5);
IkReal x2677=(cj4*sj0);
IkReal x2678=(r10*sj5);
IkReal x2679=(cj4*cj5*r01);
IkReal x2680=(r01*sj0*sj5);
IkReal x2681=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*r00*x2673))+x2680+x2681+(((-1.0)*r11*sj5*x2671)));
evalcond[3]=((1.0)+(((-1.0)*r12*sj4*x2671))+(((-1.0)*cj4*x2671*x2675))+(((-1.0)*cj4*x2671*x2678))+((r02*x2674))+((cj4*r01*x2673))+((x2676*x2677)));
evalcond[4]=(((cj0*sj4*x2675))+(((-1.0)*x2674*x2676))+((r02*x2677))+((r10*sj4*x2672))+(((-1.0)*r01*sj4*x2673))+(((-1.0)*cj4*r12*x2671)));
evalcond[5]=((((-1.0)*cj4*r11*x2673))+(((-1.0)*r02*sj4*x2671))+(((-1.0)*cj4*x2671*x2676))+(((-1.0)*x2671*x2679))+(((-1.0)*x2677*x2678))+(((-1.0)*r12*x2674)));
evalcond[6]=((-0.00025116)+(((-0.021)*sj0*x2676))+(((0.04225)*r00*x2673))+(((0.021)*cj0*x2675))+(((-0.021)*r01*x2673))+(((0.04225)*r11*x2672))+(((-0.04225)*x2680))+(((-0.04225)*x2681))+((px*sj0))+(((0.021)*r10*x2672))+(((-1.0)*py*x2671)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2682=((1.0)*sj4);
if( IKabs((((cj4*r22))+(((-1.0)*cj5*r21*x2682))+(((-1.0)*r20*sj5*x2682)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r22))+(((-1.0)*cj5*r21*x2682))+(((-1.0)*r20*sj5*x2682))))+IKsqr((((cj5*r20))+(((-1.0)*r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj4*r22))+(((-1.0)*cj5*r21*x2682))+(((-1.0)*r20*sj5*x2682))), (((cj5*r20))+(((-1.0)*r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2683=IKcos(j3);
IkReal x2684=IKsin(j3);
IkReal x2685=(cj0*r01);
IkReal x2686=((0.021)*cj5);
IkReal x2687=(r21*sj5);
IkReal x2688=((1.0)*cj0);
IkReal x2689=((0.04225)*sj5);
IkReal x2690=(cj5*sj4);
IkReal x2691=((1.0)*sj5);
IkReal x2692=(r11*sj0);
IkReal x2693=((1.0)*sj0);
IkReal x2694=(cj5*r20);
IkReal x2695=((0.021)*sj5);
IkReal x2696=(r10*sj0);
IkReal x2697=(cj0*r00);
IkReal x2698=(sj4*sj5);
IkReal x2699=((1.0)*x2684);
IkReal x2700=(cj5*x2697);
evalcond[0]=((((-1.0)*x2694))+x2687+x2683);
evalcond[1]=(((cj4*r22))+(((-1.0)*r20*sj4*x2691))+(((-1.0)*x2699))+(((-1.0)*r21*x2690)));
evalcond[2]=(x2700+(((-1.0)*x2691*x2692))+((cj5*x2696))+(((-1.0)*x2699))+(((-1.0)*x2685*x2691)));
evalcond[3]=((0.49030543)+(((0.24475)*x2683))+pz+(((0.04225)*x2694))+(((-0.04225)*x2687))+(((-1.0)*r21*x2686))+(((-1.0)*r20*x2695))+(((-0.0137)*x2684)));
evalcond[4]=((((-1.0)*cj4*r12*x2693))+((x2697*x2698))+(((-1.0)*x2683))+((x2685*x2690))+((x2696*x2698))+((x2690*x2692))+(((-1.0)*cj4*r02*x2688)));
evalcond[5]=((((-1.0)*py*x2693))+((x2689*x2692))+(((-0.24475)*x2684))+(((-0.04225)*x2700))+((x2685*x2686))+((x2685*x2689))+((x2686*x2692))+((x2695*x2696))+((x2695*x2697))+(((-1.0)*px*x2688))+(((-0.0137)*x2683))+(((-0.04225)*cj5*x2696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2701=((1.0)*cj0);
IkReal x2702=(cj0*sj5);
IkReal x2703=(cj5*sj0);
IkReal x2704=(sj0*sj4);
IkReal x2705=(cj5*r11);
IkReal x2706=(r00*sj5);
IkReal x2707=(cj4*sj0);
IkReal x2708=(r10*sj5);
IkReal x2709=(cj4*cj5*r01);
IkReal x2710=(r01*sj0*sj5);
IkReal x2711=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=(x2710+x2711+(((-1.0)*r11*sj5*x2701))+(((-1.0)*r00*x2703)));
evalcond[3]=((-1.0)+(((-1.0)*r12*sj4*x2701))+((cj4*r01*x2703))+((x2706*x2707))+((r02*x2704))+(((-1.0)*cj4*x2701*x2708))+(((-1.0)*cj4*x2701*x2705)));
evalcond[4]=(((cj0*sj4*x2705))+(((-1.0)*cj4*r12*x2701))+((r10*sj4*x2702))+(((-1.0)*x2704*x2706))+(((-1.0)*r01*sj4*x2703))+((r02*x2707)));
evalcond[5]=((((-1.0)*x2707*x2708))+(((-1.0)*r12*x2704))+(((-1.0)*cj4*r11*x2703))+(((-1.0)*x2701*x2709))+(((-1.0)*r02*sj4*x2701))+(((-1.0)*cj4*x2701*x2706)));
evalcond[6]=((-0.00025116)+(((0.04225)*r11*x2702))+(((-0.04225)*x2710))+(((-0.04225)*x2711))+(((-1.0)*py*x2701))+(((0.021)*cj0*x2705))+(((0.021)*r10*x2702))+(((-0.021)*sj0*x2706))+((px*sj0))+(((0.04225)*r00*x2703))+(((-0.021)*r01*x2703)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))+IKsqr((((r21*sj5))+(((-1.0)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))), (((r21*sj5))+(((-1.0)*cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2712=IKsin(j3);
IkReal x2713=IKcos(j3);
IkReal x2714=(cj0*r01);
IkReal x2715=((0.021)*cj5);
IkReal x2716=(r21*sj5);
IkReal x2717=((1.0)*cj0);
IkReal x2718=((0.04225)*sj5);
IkReal x2719=(cj5*sj4);
IkReal x2720=((1.0)*sj5);
IkReal x2721=(r11*sj0);
IkReal x2722=((1.0)*sj0);
IkReal x2723=(cj5*r20);
IkReal x2724=((0.021)*sj5);
IkReal x2725=(r10*sj0);
IkReal x2726=(cj0*r00);
IkReal x2727=(sj4*sj5);
IkReal x2728=((1.0)*x2713);
IkReal x2729=(cj5*x2726);
evalcond[0]=(x2716+(((-1.0)*x2723))+(((-1.0)*x2728)));
evalcond[1]=(x2712+((cj4*r22))+(((-1.0)*r21*x2719))+(((-1.0)*r20*sj4*x2720)));
evalcond[2]=(x2729+(((-1.0)*x2712))+(((-1.0)*x2720*x2721))+(((-1.0)*x2714*x2720))+((cj5*x2725)));
evalcond[3]=((0.04230543)+(((-0.04225)*x2716))+(((0.0137)*x2712))+(((-1.0)*r21*x2715))+pz+(((-0.24475)*x2713))+(((0.04225)*x2723))+(((-1.0)*r20*x2724)));
evalcond[4]=((((-1.0)*cj4*r12*x2722))+((x2726*x2727))+((x2725*x2727))+((x2719*x2721))+(((-1.0)*x2728))+((x2714*x2719))+(((-1.0)*cj4*r02*x2717)));
evalcond[5]=(((x2715*x2721))+((x2724*x2725))+((x2724*x2726))+(((-0.04225)*cj5*x2725))+(((-1.0)*px*x2717))+(((-0.04225)*x2729))+((x2718*x2721))+(((-0.24475)*x2712))+(((-0.0137)*x2713))+(((-1.0)*py*x2722))+((x2714*x2715))+((x2714*x2718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2730=((1.0)*sj4);
CheckValue<IkReal> x2731=IKPowWithIntegerCheck(cj2,-1);
if(!x2731.valid){
continue;
}
CheckValue<IkReal> x2732=IKPowWithIntegerCheck(sj2,-1);
if(!x2732.valid){
continue;
}
if( IKabs(((x2731.value)*((((cj4*r22))+(((-1.0)*r20*sj5*x2730))+(((-1.0)*cj5*r21*x2730)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2732.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2731.value)*((((cj4*r22))+(((-1.0)*r20*sj5*x2730))+(((-1.0)*cj5*r21*x2730))))))+IKsqr(((x2732.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x2731.value)*((((cj4*r22))+(((-1.0)*r20*sj5*x2730))+(((-1.0)*cj5*r21*x2730))))), ((x2732.value)*((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2733=IKcos(j3);
IkReal x2734=IKsin(j3);
IkReal x2735=(cj0*sj5);
IkReal x2736=((0.04225)*r11);
IkReal x2737=((0.021)*r10);
IkReal x2738=(r21*sj5);
IkReal x2739=(sj0*sj5);
IkReal x2740=(cj0*cj5);
IkReal x2741=((0.04225)*r00);
IkReal x2742=((0.04225)*r01);
IkReal x2743=(cj4*r02);
IkReal x2744=((1.0)*cj0);
IkReal x2745=(cj4*r12);
IkReal x2746=((1.0)*r00);
IkReal x2747=(r01*sj4);
IkReal x2748=(r11*sj4);
IkReal x2749=((1.0)*r11);
IkReal x2750=(cj5*sj0);
IkReal x2751=(r10*sj4);
IkReal x2752=((1.0)*r20);
IkReal x2753=((1.0)*sj0);
IkReal x2754=((0.021)*r11);
IkReal x2755=(cj5*r21);
IkReal x2756=((0.04225)*r10);
IkReal x2757=((0.021)*r00);
IkReal x2758=((0.021)*cj5*r01);
IkReal x2759=(cj2*x2734);
IkReal x2760=(sj2*x2733);
IkReal x2761=((1.0)*x2734);
IkReal x2762=(cj2*x2733);
evalcond[0]=(x2762+x2738+(((-1.0)*cj5*x2752)));
evalcond[1]=(((cj4*r22))+(((-1.0)*sj4*sj5*x2752))+(((-1.0)*x2759))+(((-1.0)*sj4*x2755)));
evalcond[2]=(x2760+((r10*x2740))+((r01*x2739))+(((-1.0)*x2735*x2749))+(((-1.0)*x2746*x2750)));
evalcond[3]=(((r10*x2750))+(((-1.0)*x2739*x2749))+(((-1.0)*x2761))+((r00*x2740))+(((-1.0)*r01*x2735)));
evalcond[4]=((0.26630543)+(((0.24475)*x2762))+(((0.224)*cj2))+(((-0.021)*x2755))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+pz+(((-0.0137)*x2759))+(((-0.04225)*x2738)));
evalcond[5]=((((-1.0)*x2743*x2744))+(((-1.0)*x2745*x2753))+(((-1.0)*x2733))+((x2739*x2751))+((r00*sj4*x2735))+((x2740*x2747))+((x2748*x2750)));
evalcond[6]=((((-1.0)*x2744*x2745))+(((-1.0)*x2747*x2750))+((sj0*x2743))+(((-1.0)*sj4*x2739*x2746))+((x2740*x2748))+(((-1.0)*sj2*x2761))+((x2735*x2751)));
evalcond[7]=((((-0.24475)*x2734))+(((-1.0)*py*x2753))+((x2750*x2754))+(((-1.0)*x2740*x2741))+(((-1.0)*x2750*x2756))+(((0.021)*r01*x2740))+((x2736*x2739))+((x2737*x2739))+(((-0.0137)*x2733))+(((-1.0)*px*x2744))+((x2735*x2742))+((x2735*x2757)));
evalcond[8]=((-0.00025116)+(((0.224)*sj2))+(((0.24475)*x2760))+(((-1.0)*py*x2744))+(((-1.0)*x2739*x2757))+(((-1.0)*x2739*x2742))+((x2735*x2736))+((x2735*x2737))+(((-0.0137)*sj2*x2734))+(((-1.0)*x2740*x2756))+((x2740*x2754))+(((-0.021)*r01*x2750))+((px*sj0))+((x2741*x2750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2763=((1.0)*sj5);
CheckValue<IkReal> x2764=IKPowWithIntegerCheck(cj2,-1);
if(!x2764.valid){
continue;
}
if( IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x2763))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2763)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2764.value)*((((cj5*r20))+(((-1.0)*r21*x2763)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x2763))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2763))))+IKsqr(((x2764.value)*((((cj5*r20))+(((-1.0)*r21*x2763))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj0*cj5*r00))+(((-1.0)*r11*sj0*x2763))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2763))), ((x2764.value)*((((cj5*r20))+(((-1.0)*r21*x2763))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2765=IKcos(j3);
IkReal x2766=IKsin(j3);
IkReal x2767=(cj0*sj5);
IkReal x2768=((0.04225)*r11);
IkReal x2769=((0.021)*r10);
IkReal x2770=(r21*sj5);
IkReal x2771=(sj0*sj5);
IkReal x2772=(cj0*cj5);
IkReal x2773=((0.04225)*r00);
IkReal x2774=((0.04225)*r01);
IkReal x2775=(cj4*r02);
IkReal x2776=((1.0)*cj0);
IkReal x2777=(cj4*r12);
IkReal x2778=((1.0)*r00);
IkReal x2779=(r01*sj4);
IkReal x2780=(r11*sj4);
IkReal x2781=((1.0)*r11);
IkReal x2782=(cj5*sj0);
IkReal x2783=(r10*sj4);
IkReal x2784=((1.0)*r20);
IkReal x2785=((1.0)*sj0);
IkReal x2786=((0.021)*r11);
IkReal x2787=(cj5*r21);
IkReal x2788=((0.04225)*r10);
IkReal x2789=((0.021)*r00);
IkReal x2790=((0.021)*cj5*r01);
IkReal x2791=(cj2*x2766);
IkReal x2792=(sj2*x2765);
IkReal x2793=((1.0)*x2766);
IkReal x2794=(cj2*x2765);
evalcond[0]=(x2770+x2794+(((-1.0)*cj5*x2784)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x2791))+(((-1.0)*sj4*sj5*x2784))+(((-1.0)*sj4*x2787)));
evalcond[2]=(x2792+((r01*x2771))+(((-1.0)*x2778*x2782))+((r10*x2772))+(((-1.0)*x2767*x2781)));
evalcond[3]=((((-1.0)*x2793))+((r00*x2772))+(((-1.0)*r01*x2767))+((r10*x2782))+(((-1.0)*x2771*x2781)));
evalcond[4]=((0.26630543)+(((0.224)*cj2))+(((-0.04225)*x2770))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+pz+(((-0.021)*x2787))+(((0.24475)*x2794))+(((-0.0137)*x2791)));
evalcond[5]=(((x2780*x2782))+(((-1.0)*x2765))+(((-1.0)*x2775*x2776))+((x2771*x2783))+((r00*sj4*x2767))+(((-1.0)*x2777*x2785))+((x2772*x2779)));
evalcond[6]=((((-1.0)*x2776*x2777))+(((-1.0)*x2779*x2782))+((x2767*x2783))+(((-1.0)*sj2*x2793))+((x2772*x2780))+(((-1.0)*sj4*x2771*x2778))+((sj0*x2775)));
evalcond[7]=(((x2769*x2771))+((x2767*x2789))+((x2768*x2771))+(((0.021)*r01*x2772))+((x2782*x2786))+(((-0.24475)*x2766))+(((-1.0)*x2782*x2788))+(((-1.0)*x2772*x2773))+(((-0.0137)*x2765))+(((-1.0)*px*x2776))+((x2767*x2774))+(((-1.0)*py*x2785)));
evalcond[8]=((-0.00025116)+(((0.224)*sj2))+(((-0.0137)*sj2*x2766))+(((-1.0)*py*x2776))+((x2773*x2782))+(((-1.0)*x2771*x2774))+((x2772*x2786))+(((-0.021)*r01*x2782))+((x2767*x2769))+((x2767*x2768))+((px*sj0))+(((0.24475)*x2792))+(((-1.0)*x2772*x2788))+(((-1.0)*x2771*x2789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2795=((1.0)*sj4);
CheckValue<IkReal> x2796=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x2796.valid){
continue;
}
CheckValue<IkReal> x2797 = IKatan2WithCheck(IkReal((((cj4*r22))+(((-1.0)*r20*sj5*x2795))+(((-1.0)*cj5*r21*x2795)))),(((cj5*r20))+(((-1.0)*r21*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2797.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2796.value)))+(x2797.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2798=IKcos(j3);
IkReal x2799=IKsin(j3);
IkReal x2800=(cj0*sj5);
IkReal x2801=((0.04225)*r11);
IkReal x2802=((0.021)*r10);
IkReal x2803=(r21*sj5);
IkReal x2804=(sj0*sj5);
IkReal x2805=(cj0*cj5);
IkReal x2806=((0.04225)*r00);
IkReal x2807=((0.04225)*r01);
IkReal x2808=(cj4*r02);
IkReal x2809=((1.0)*cj0);
IkReal x2810=(cj4*r12);
IkReal x2811=((1.0)*r00);
IkReal x2812=(r01*sj4);
IkReal x2813=(r11*sj4);
IkReal x2814=((1.0)*r11);
IkReal x2815=(cj5*sj0);
IkReal x2816=(r10*sj4);
IkReal x2817=((1.0)*r20);
IkReal x2818=((1.0)*sj0);
IkReal x2819=((0.021)*r11);
IkReal x2820=(cj5*r21);
IkReal x2821=((0.04225)*r10);
IkReal x2822=((0.021)*r00);
IkReal x2823=((0.021)*cj5*r01);
IkReal x2824=(cj2*x2799);
IkReal x2825=(sj2*x2798);
IkReal x2826=((1.0)*x2799);
IkReal x2827=(cj2*x2798);
evalcond[0]=((((-1.0)*cj5*x2817))+x2803+x2827);
evalcond[1]=((((-1.0)*sj4*sj5*x2817))+((cj4*r22))+(((-1.0)*x2824))+(((-1.0)*sj4*x2820)));
evalcond[2]=((((-1.0)*x2800*x2814))+((r10*x2805))+x2825+((r01*x2804))+(((-1.0)*x2811*x2815)));
evalcond[3]=((((-1.0)*x2804*x2814))+(((-1.0)*r01*x2800))+((r10*x2815))+(((-1.0)*x2826))+((r00*x2805)));
evalcond[4]=((0.26630543)+(((-0.04225)*x2803))+(((0.224)*cj2))+(((-0.021)*r20*sj5))+(((0.04225)*cj5*r20))+(((-0.0137)*x2824))+(((-0.021)*x2820))+pz+(((0.24475)*x2827)));
evalcond[5]=((((-1.0)*x2810*x2818))+((x2813*x2815))+((r00*sj4*x2800))+(((-1.0)*x2808*x2809))+(((-1.0)*x2798))+((x2804*x2816))+((x2805*x2812)));
evalcond[6]=((((-1.0)*x2809*x2810))+(((-1.0)*sj2*x2826))+(((-1.0)*sj4*x2804*x2811))+((x2805*x2813))+(((-1.0)*x2812*x2815))+((x2800*x2816))+((sj0*x2808)));
evalcond[7]=((((-1.0)*x2805*x2806))+(((-1.0)*py*x2818))+((x2815*x2819))+((x2801*x2804))+((x2802*x2804))+((x2800*x2822))+(((-0.24475)*x2799))+(((-0.0137)*x2798))+((x2800*x2807))+(((0.021)*r01*x2805))+(((-1.0)*px*x2809))+(((-1.0)*x2815*x2821)));
evalcond[8]=((-0.00025116)+(((-1.0)*x2804*x2822))+(((0.224)*sj2))+(((-1.0)*py*x2809))+(((-1.0)*x2805*x2821))+(((-0.0137)*sj2*x2799))+(((-1.0)*x2804*x2807))+((x2805*x2819))+(((0.24475)*x2825))+((px*sj0))+((x2800*x2802))+((x2800*x2801))+(((-0.021)*r01*x2815))+((x2806*x2815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2828=((1.0)*cj0);
IkReal x2829=(cj0*sj5);
IkReal x2830=(cj5*sj0);
IkReal x2831=(sj0*sj4);
IkReal x2832=(cj5*r11);
IkReal x2833=(r00*sj5);
IkReal x2834=(cj4*sj0);
IkReal x2835=(r10*sj5);
IkReal x2836=(cj4*cj5*r01);
IkReal x2837=(r01*sj0*sj5);
IkReal x2838=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*r00*x2830))+(((-1.0)*r11*sj5*x2828))+x2838+x2837);
evalcond[3]=((1.0)+(((-1.0)*r12*sj4*x2828))+((r02*x2831))+((cj4*r01*x2830))+(((-1.0)*cj4*x2828*x2832))+(((-1.0)*cj4*x2828*x2835))+((x2833*x2834)));
evalcond[4]=((((-1.0)*x2831*x2833))+(((-1.0)*r01*sj4*x2830))+((r02*x2834))+(((-1.0)*cj4*r12*x2828))+((r10*sj4*x2829))+((cj0*sj4*x2832)));
evalcond[5]=((((-1.0)*x2834*x2835))+(((-1.0)*r12*x2831))+(((-1.0)*cj4*r11*x2830))+(((-1.0)*cj4*x2828*x2833))+(((-1.0)*x2828*x2836))+(((-1.0)*r02*sj4*x2828)));
evalcond[6]=((-0.00025116)+(((-0.021)*r01*x2830))+(((-0.04225)*x2838))+(((-0.04225)*x2837))+(((0.021)*r10*x2829))+(((-1.0)*py*x2828))+(((0.04225)*r00*x2830))+(((-0.021)*sj0*x2833))+(((0.021)*cj0*x2832))+((px*sj0))+(((0.04225)*r11*x2829)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2839=((1.0)*cj1);
IkReal x2840=(cj4*r22);
IkReal x2841=(cj5*r20);
IkReal x2842=((1.0)*sj1);
IkReal x2843=(r21*sj5);
IkReal x2844=(cj5*r21*sj4);
IkReal x2845=(r20*sj4*sj5);
if( IKabs(((((-1.0)*x2842*x2843))+((sj1*x2841))+(((-1.0)*x2839*x2840))+((cj1*x2845))+((cj1*x2844)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2845))+((sj1*x2844))+(((-1.0)*x2840*x2842))+(((-1.0)*x2839*x2841))+((cj1*x2843)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2842*x2843))+((sj1*x2841))+(((-1.0)*x2839*x2840))+((cj1*x2845))+((cj1*x2844))))+IKsqr((((sj1*x2845))+((sj1*x2844))+(((-1.0)*x2840*x2842))+(((-1.0)*x2839*x2841))+((cj1*x2843))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x2842*x2843))+((sj1*x2841))+(((-1.0)*x2839*x2840))+((cj1*x2845))+((cj1*x2844))), (((sj1*x2845))+((sj1*x2844))+(((-1.0)*x2840*x2842))+(((-1.0)*x2839*x2841))+((cj1*x2843))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2846=IKcos(j3);
IkReal x2847=IKsin(j3);
IkReal x2848=(cj0*r01);
IkReal x2849=((0.021)*cj5);
IkReal x2850=(r21*sj5);
IkReal x2851=((1.0)*cj0);
IkReal x2852=((0.04225)*sj5);
IkReal x2853=(cj5*sj4);
IkReal x2854=(r11*sj0);
IkReal x2855=((1.0)*sj5);
IkReal x2856=(cj5*r20);
IkReal x2857=((1.0)*sj0);
IkReal x2858=((0.021)*sj5);
IkReal x2859=(r10*sj0);
IkReal x2860=(cj0*r00);
IkReal x2861=(sj4*sj5);
IkReal x2862=(sj1*x2846);
IkReal x2863=(cj1*x2847);
IkReal x2864=(sj1*x2847);
IkReal x2865=((0.0137)*x2846);
IkReal x2866=(cj1*x2846);
IkReal x2867=(cj5*x2860);
IkReal x2868=(x2862+x2863);
evalcond[0]=((((-1.0)*x2866))+(((-1.0)*x2856))+x2850+x2864);
evalcond[1]=(((cj4*r22))+(((-1.0)*r21*x2853))+x2868+(((-1.0)*r20*sj4*x2855)));
evalcond[2]=(((cj5*x2859))+(((-1.0)*x2848*x2855))+(((-1.0)*x2854*x2855))+x2867+x2868);
evalcond[3]=((((-1.0)*x2864))+((x2848*x2853))+((x2853*x2854))+(((-1.0)*cj4*r02*x2851))+((x2859*x2861))+x2866+((x2860*x2861))+(((-1.0)*cj4*r12*x2857)));
evalcond[4]=((((0.0137)*x2863))+(((0.0137)*x2862))+(((-0.24475)*x2866))+(((-1.0)*r21*x2849))+(((-1.0)*r20*x2858))+(((-0.49030543)*cj1))+pz+(((0.24475)*x2864))+(((-0.04225)*x2850))+(((0.04225)*x2856)));
evalcond[5]=((((0.49030543)*sj1))+((x2858*x2859))+(((-1.0)*px*x2851))+((x2849*x2854))+((cj1*x2865))+((x2848*x2852))+((x2852*x2854))+((x2848*x2849))+(((-1.0)*py*x2857))+(((-0.04225)*x2867))+(((-0.04225)*cj5*x2859))+((x2858*x2860))+(((0.24475)*x2862))+(((0.24475)*x2863))+(((-0.0137)*x2864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2869=((1.0)*cj0);
IkReal x2870=(cj0*sj5);
IkReal x2871=(cj5*sj0);
IkReal x2872=(sj0*sj4);
IkReal x2873=(cj5*r11);
IkReal x2874=(r00*sj5);
IkReal x2875=(cj4*sj0);
IkReal x2876=(r10*sj5);
IkReal x2877=(cj4*cj5*r01);
IkReal x2878=(r01*sj0*sj5);
IkReal x2879=(cj0*cj5*r10);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*r00*x2871))+(((-1.0)*r11*sj5*x2869))+x2879+x2878);
evalcond[3]=((-1.0)+(((-1.0)*r12*sj4*x2869))+(((-1.0)*cj4*x2869*x2873))+(((-1.0)*cj4*x2869*x2876))+((r02*x2872))+((x2874*x2875))+((cj4*r01*x2871)));
evalcond[4]=(((r10*sj4*x2870))+((cj0*sj4*x2873))+(((-1.0)*cj4*r12*x2869))+((r02*x2875))+(((-1.0)*r01*sj4*x2871))+(((-1.0)*x2872*x2874)));
evalcond[5]=((((-1.0)*x2875*x2876))+(((-1.0)*cj4*r11*x2871))+(((-1.0)*cj4*x2869*x2874))+(((-1.0)*r02*sj4*x2869))+(((-1.0)*x2869*x2877))+(((-1.0)*r12*x2872)));
evalcond[6]=((-0.00025116)+(((-1.0)*py*x2869))+(((0.021)*cj0*x2873))+(((-0.04225)*x2879))+(((-0.04225)*x2878))+(((0.021)*r10*x2870))+(((-0.021)*r01*x2871))+(((0.04225)*r11*x2870))+((px*sj0))+(((0.04225)*r00*x2871))+(((-0.021)*sj0*x2874)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2880=((1.0)*sj5);
IkReal x2881=(cj1*r20);
IkReal x2882=(r21*sj1);
IkReal x2883=(cj4*r22);
IkReal x2884=(r20*sj1);
IkReal x2885=(cj1*r21);
IkReal x2886=(cj5*sj4);
if( IKabs(((((-1.0)*sj4*x2880*x2881))+((cj1*x2883))+((cj5*x2884))+(((-1.0)*x2885*x2886))+(((-1.0)*x2880*x2882)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x2883))+((cj5*x2881))+((sj4*sj5*x2884))+(((-1.0)*x2880*x2885))+((x2882*x2886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x2880*x2881))+((cj1*x2883))+((cj5*x2884))+(((-1.0)*x2885*x2886))+(((-1.0)*x2880*x2882))))+IKsqr(((((-1.0)*sj1*x2883))+((cj5*x2881))+((sj4*sj5*x2884))+(((-1.0)*x2880*x2885))+((x2882*x2886))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj4*x2880*x2881))+((cj1*x2883))+((cj5*x2884))+(((-1.0)*x2885*x2886))+(((-1.0)*x2880*x2882))), ((((-1.0)*sj1*x2883))+((cj5*x2881))+((sj4*sj5*x2884))+(((-1.0)*x2880*x2885))+((x2882*x2886))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2887=IKcos(j3);
IkReal x2888=IKsin(j3);
IkReal x2889=(cj0*r01);
IkReal x2890=((0.021)*cj5);
IkReal x2891=(r21*sj5);
IkReal x2892=((0.24475)*sj1);
IkReal x2893=((1.0)*cj0);
IkReal x2894=((0.04225)*sj5);
IkReal x2895=(cj5*sj4);
IkReal x2896=((1.0)*sj5);
IkReal x2897=(r11*sj0);
IkReal x2898=((1.0)*sj0);
IkReal x2899=(cj5*r20);
IkReal x2900=((0.021)*sj5);
IkReal x2901=(r10*sj0);
IkReal x2902=(cj0*r00);
IkReal x2903=(sj4*sj5);
IkReal x2904=(cj1*x2887);
IkReal x2905=(sj1*x2888);
IkReal x2906=(cj1*x2888);
IkReal x2907=(sj1*x2887);
IkReal x2908=(cj5*x2902);
IkReal x2909=(x2905+x2904);
evalcond[0]=((((-1.0)*x2899))+x2891+x2909);
evalcond[1]=(((cj4*r22))+(((-1.0)*r20*sj4*x2896))+(((-1.0)*x2906))+(((-1.0)*r21*x2895))+x2907);
evalcond[2]=((((-1.0)*x2889*x2896))+(((-1.0)*x2896*x2897))+((cj5*x2901))+(((-1.0)*x2907))+x2906+x2908);
evalcond[3]=(((x2902*x2903))+((x2901*x2903))+(((-1.0)*cj4*r12*x2898))+((x2895*x2897))+((x2889*x2895))+x2909+(((-1.0)*cj4*r02*x2893)));
evalcond[4]=((((-0.04230543)*cj1))+(((0.0137)*x2907))+((x2888*x2892))+(((-0.04225)*x2891))+pz+(((0.04225)*x2899))+(((-0.0137)*x2906))+(((-1.0)*r21*x2890))+(((0.24475)*x2904))+(((-1.0)*r20*x2900)));
evalcond[5]=(((x2890*x2897))+(((-0.04225)*x2908))+(((-1.0)*x2887*x2892))+((x2900*x2901))+((x2900*x2902))+((x2889*x2890))+((x2889*x2894))+(((0.0137)*x2905))+(((0.0137)*x2904))+(((-1.0)*px*x2893))+(((-1.0)*py*x2898))+((x2894*x2897))+(((-0.04225)*cj5*x2901))+(((0.24475)*x2906))+(((0.04230543)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2910=(r00*sj5);
IkReal x2911=(cj5*r01);
IkReal x2912=(cj4*sj0);
IkReal x2913=(r02*sj4);
IkReal x2914=(r10*sj5);
IkReal x2915=(cj5*r11);
IkReal x2916=((1.0)*r12*sj4);
IkReal x2917=((1.0)*cj0*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+cj1+((r22*sj4))+((cj4*cj5*r21)));
evalcond[2]=((((-1.0)*x2915*x2917))+((sj0*x2913))+(((-1.0)*x2914*x2917))+((x2911*x2912))+(((-1.0)*cj0*x2916))+((x2910*x2912)));
evalcond[3]=((((-1.0)*sj1))+(((-1.0)*x2912*x2914))+(((-1.0)*x2912*x2915))+(((-1.0)*sj0*x2916))+(((-1.0)*x2911*x2917))+(((-1.0)*x2910*x2917))+(((-1.0)*cj0*x2913)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj1;
j3eval[1]=((IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j3eval[2]=IKsign(sj1);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=cj1;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2918=((1.0)*cj0);
IkReal x2919=((0.021)*cj0);
IkReal x2920=(cj5*r01);
IkReal x2921=(r00*sj5);
IkReal x2922=(sj0*sj4);
IkReal x2923=(cj4*cj5);
IkReal x2924=(sj0*sj5);
IkReal x2925=((0.04225)*cj0);
IkReal x2926=(r01*sj5);
IkReal x2927=(cj0*sj4);
IkReal x2928=((1.0)*r11);
IkReal x2929=(cj5*r00);
IkReal x2930=(cj4*r10);
IkReal x2931=((1.0)*sj0);
IkReal x2932=(cj5*r11);
IkReal x2933=(cj4*x2920);
IkReal x2934=(cj5*r10*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((r21*x2923)));
evalcond[2]=((((-1.0)*x2918*x2926))+((cj0*x2929))+(((-1.0)*x2924*x2928))+x2934);
evalcond[3]=((((-1.0)*sj5*x2918*x2930))+((cj4*sj0*x2921))+(((-1.0)*r11*x2918*x2923))+(((-1.0)*r12*sj4*x2918))+((sj0*x2933))+((r02*x2922)));
evalcond[4]=((-1.0)+(((-1.0)*sj0*x2923*x2928))+(((-1.0)*x2918*x2933))+(((-1.0)*x2924*x2930))+(((-1.0)*r12*x2922))+(((-1.0)*cj4*x2918*x2921))+(((-1.0)*r02*sj4*x2918)));
evalcond[5]=((((-1.0)*cj4*r02*x2918))+((x2921*x2927))+(((-1.0)*cj4*r12*x2931))+((x2922*x2932))+((x2920*x2927))+((r10*sj5*x2922)));
evalcond[6]=((0.26630543)+(((-0.04225)*x2934))+((x2925*x2926))+(((0.021)*r10*x2924))+((x2919*x2921))+((x2919*x2920))+(((-1.0)*px*x2918))+(((0.04225)*r11*x2924))+(((-1.0)*x2925*x2929))+(((0.021)*sj0*x2932))+(((-1.0)*py*x2931)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((-1.0)*r21*sj5))))+IKsqr((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((-1.0)*r21*sj5))), (((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2935=IKcos(j3);
IkReal x2936=IKsin(j3);
IkReal x2937=(cj5*sj0);
IkReal x2938=(cj0*sj5);
IkReal x2939=(r21*sj5);
IkReal x2940=((1.0)*cj0);
IkReal x2941=((1.0)*sj4);
IkReal x2942=(sj0*sj5);
IkReal x2943=(r20*sj5);
IkReal x2944=(cj5*r21);
IkReal x2945=(cj5*r20);
IkReal x2946=(cj0*cj5*r11);
IkReal x2947=(cj0*cj5*r10);
evalcond[0]=((((-1.0)*x2945))+x2939+x2936);
evalcond[1]=(((cj4*r22))+x2935+(((-1.0)*x2941*x2944))+(((-1.0)*x2941*x2943)));
evalcond[2]=((((-1.0)*r00*x2937))+(((-1.0)*r11*x2938))+((r01*x2942))+x2935+x2947);
evalcond[3]=((((-0.04225)*x2939))+(((0.04225)*x2945))+(((0.0137)*x2935))+pz+(((-0.021)*x2944))+(((-0.021)*x2943))+(((0.24475)*x2936)));
evalcond[4]=(((sj4*x2946))+(((-1.0)*r01*x2937*x2941))+(((-1.0)*r00*x2941*x2942))+(((-1.0)*cj4*r12*x2940))+((cj4*r02*sj0))+((r10*sj4*x2938))+(((-1.0)*x2936)));
evalcond[5]=((0.22374884)+(((0.021)*r10*x2938))+(((-0.04225)*x2947))+(((-0.021)*r00*x2942))+(((-0.021)*r01*x2937))+(((0.04225)*r11*x2938))+(((0.021)*x2946))+(((-0.0137)*x2936))+((px*sj0))+(((-1.0)*py*x2940))+(((0.04225)*r00*x2937))+(((0.24475)*x2935))+(((-0.04225)*r01*x2942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2948=((1.0)*cj0);
IkReal x2949=((0.021)*cj0);
IkReal x2950=(cj5*r01);
IkReal x2951=(r00*sj5);
IkReal x2952=(sj0*sj4);
IkReal x2953=(cj4*cj5);
IkReal x2954=(sj0*sj5);
IkReal x2955=((0.04225)*cj0);
IkReal x2956=(r01*sj5);
IkReal x2957=(cj0*sj4);
IkReal x2958=((1.0)*r11);
IkReal x2959=(cj5*r00);
IkReal x2960=(cj4*r10);
IkReal x2961=((1.0)*sj0);
IkReal x2962=(cj5*r11);
IkReal x2963=(cj4*x2950);
IkReal x2964=(cj5*r10*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((r21*x2953)));
evalcond[2]=((((-1.0)*x2948*x2956))+((cj0*x2959))+(((-1.0)*x2954*x2958))+x2964);
evalcond[3]=(((sj0*x2963))+((cj4*sj0*x2951))+(((-1.0)*r12*sj4*x2948))+(((-1.0)*sj5*x2948*x2960))+(((-1.0)*r11*x2948*x2953))+((r02*x2952)));
evalcond[4]=((1.0)+(((-1.0)*r02*sj4*x2948))+(((-1.0)*x2948*x2963))+(((-1.0)*r12*x2952))+(((-1.0)*cj4*x2948*x2951))+(((-1.0)*sj0*x2953*x2958))+(((-1.0)*x2954*x2960)));
evalcond[5]=(((x2951*x2957))+(((-1.0)*cj4*r02*x2948))+((x2950*x2957))+(((-1.0)*cj4*r12*x2961))+((x2952*x2962))+((r10*sj5*x2952)));
evalcond[6]=((-0.26630543)+(((-1.0)*px*x2948))+(((0.021)*r10*x2954))+(((-0.04225)*x2964))+(((0.04225)*r11*x2954))+(((-1.0)*x2955*x2959))+(((-1.0)*py*x2961))+((x2949*x2951))+((x2949*x2950))+(((0.021)*sj0*x2962))+((x2955*x2956)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2965=((1.0)*r20);
if( IKabs((((r21*sj5))+(((-1.0)*cj5*x2965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*sj5*x2965))+((cj4*r22))+(((-1.0)*cj5*r21*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj5))+(((-1.0)*cj5*x2965))))+IKsqr(((((-1.0)*sj4*sj5*x2965))+((cj4*r22))+(((-1.0)*cj5*r21*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r21*sj5))+(((-1.0)*cj5*x2965))), ((((-1.0)*sj4*sj5*x2965))+((cj4*r22))+(((-1.0)*cj5*r21*sj4))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2966=IKcos(j3);
IkReal x2967=IKsin(j3);
IkReal x2968=(cj5*sj0);
IkReal x2969=(cj0*sj5);
IkReal x2970=(r21*sj5);
IkReal x2971=((1.0)*cj0);
IkReal x2972=((1.0)*sj4);
IkReal x2973=(sj0*sj5);
IkReal x2974=(r20*sj5);
IkReal x2975=(cj5*r21);
IkReal x2976=(cj5*r20);
IkReal x2977=((1.0)*x2967);
IkReal x2978=(cj0*cj5*r11);
IkReal x2979=(cj0*cj5*r10);
evalcond[0]=((((-1.0)*x2976))+(((-1.0)*x2977))+x2970);
evalcond[1]=((((-1.0)*x2972*x2974))+(((-1.0)*x2972*x2975))+((cj4*r22))+(((-1.0)*x2966)));
evalcond[2]=(((r01*x2973))+(((-1.0)*r00*x2968))+(((-1.0)*r11*x2969))+x2979+x2966);
evalcond[3]=((((0.04225)*x2976))+(((-0.04225)*x2970))+(((-0.24475)*x2967))+pz+(((-0.021)*x2974))+(((-0.021)*x2975))+(((-0.0137)*x2966)));
evalcond[4]=(((sj4*x2978))+(((-1.0)*cj4*r12*x2971))+((r10*sj4*x2969))+(((-1.0)*r01*x2968*x2972))+(((-1.0)*x2977))+((cj4*r02*sj0))+(((-1.0)*r00*x2972*x2973)));
evalcond[5]=((0.22374884)+(((-0.04225)*r01*x2973))+(((0.04225)*r00*x2968))+(((-0.021)*r01*x2968))+(((-0.021)*r00*x2973))+(((-0.04225)*x2979))+(((0.021)*r10*x2969))+(((0.04225)*r11*x2969))+(((0.24475)*x2966))+(((0.021)*x2978))+((px*sj0))+(((-1.0)*py*x2971))+(((-0.0137)*x2967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2980=((1.0)*cj5);
CheckValue<IkReal> x2981=IKPowWithIntegerCheck(cj1,-1);
if(!x2981.valid){
continue;
}
CheckValue<IkReal> x2982=IKPowWithIntegerCheck(sj1,-1);
if(!x2982.valid){
continue;
}
if( IKabs(((x2981.value)*((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2980))+(((-1.0)*r10*sj0*x2980))+((cj0*r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2982.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2981.value)*((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2980))+(((-1.0)*r10*sj0*x2980))+((cj0*r01*sj5))))))+IKsqr(((x2982.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x2981.value)*((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x2980))+(((-1.0)*r10*sj0*x2980))+((cj0*r01*sj5))))), ((x2982.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2983=IKcos(j3);
IkReal x2984=IKsin(j3);
IkReal x2985=(cj5*sj0);
IkReal x2986=((1.0)*sj4);
IkReal x2987=(cj0*sj5);
IkReal x2988=((0.04225)*r11);
IkReal x2989=((0.021)*r10);
IkReal x2990=((0.04225)*r00);
IkReal x2991=(r21*sj5);
IkReal x2992=((0.021)*r00);
IkReal x2993=((0.021)*r01);
IkReal x2994=(sj0*sj5);
IkReal x2995=(cj0*cj5);
IkReal x2996=(cj4*r02);
IkReal x2997=((1.0)*cj0);
IkReal x2998=((0.04225)*r01);
IkReal x2999=(cj4*r12);
IkReal x3000=(r11*sj4);
IkReal x3001=((1.0)*r11);
IkReal x3002=(r10*sj4);
IkReal x3003=(r20*sj5);
IkReal x3004=((1.0)*sj0);
IkReal x3005=((0.021)*r11);
IkReal x3006=(cj5*r21);
IkReal x3007=(cj5*r20);
IkReal x3008=((0.04225)*r10);
IkReal x3009=(cj1*x2984);
IkReal x3010=(sj1*x2984);
IkReal x3011=((0.0137)*x2983);
evalcond[0]=((((-1.0)*x3007))+x3010+x2991);
evalcond[1]=(((cj4*r22))+(((-1.0)*x2986*x3003))+(((-1.0)*x2986*x3006))+((sj1*x2983)));
evalcond[2]=(((r01*x2994))+(((-1.0)*r00*x2985))+(((-1.0)*x2987*x3001))+x2983+((r10*x2995)));
evalcond[3]=(((r00*x2995))+x3009+(((-1.0)*r01*x2987))+(((-1.0)*x2994*x3001))+((r10*x2985)));
evalcond[4]=((((0.04225)*x3007))+(((0.24475)*x3010))+(((-0.26630543)*cj1))+((sj1*x3011))+pz+(((-0.021)*x3006))+(((-0.021)*x3003))+(((-0.04225)*x2991)));
evalcond[5]=((((-1.0)*x2996*x2997))+((x2985*x3000))+((x2994*x3002))+((r00*sj4*x2987))+((cj1*x2983))+((r01*sj4*x2995))+(((-1.0)*x2999*x3004)));
evalcond[6]=(((x2987*x3002))+(((-1.0)*x2984))+((x2995*x3000))+((sj0*x2996))+(((-1.0)*x2997*x2999))+(((-1.0)*r00*x2986*x2994))+(((-1.0)*r01*x2985*x2986)));
evalcond[7]=((0.22374884)+(((0.24475)*x2983))+(((-1.0)*py*x2997))+(((-1.0)*x2992*x2994))+(((-1.0)*x2985*x2993))+((x2985*x2990))+((x2995*x3005))+(((-1.0)*x2995*x3008))+((x2987*x2989))+((x2987*x2988))+(((-0.0137)*x2984))+(((-1.0)*x2994*x2998))+((px*sj0)));
evalcond[8]=(((x2985*x3005))+((x2987*x2992))+((x2987*x2998))+(((0.24475)*x3009))+(((-1.0)*px*x2997))+(((-1.0)*x2985*x3008))+((x2993*x2995))+((x2989*x2994))+((x2988*x2994))+((cj1*x3011))+(((0.26630543)*sj1))+(((-1.0)*x2990*x2995))+(((-1.0)*py*x3004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3012=((1.0)*sj5);
CheckValue<IkReal> x3013=IKPowWithIntegerCheck(sj1,-1);
if(!x3013.valid){
continue;
}
if( IKabs(((x3013.value)*((((cj5*r20))+(((-1.0)*r21*x3012)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x3012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3013.value)*((((cj5*r20))+(((-1.0)*r21*x3012))))))+IKsqr((((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x3012))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x3013.value)*((((cj5*r20))+(((-1.0)*r21*x3012))))), (((cj5*r00*sj0))+((cj0*r11*sj5))+(((-1.0)*cj0*cj5*r10))+(((-1.0)*r01*sj0*x3012))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3014=IKcos(j3);
IkReal x3015=IKsin(j3);
IkReal x3016=(cj5*sj0);
IkReal x3017=((1.0)*sj4);
IkReal x3018=(cj0*sj5);
IkReal x3019=((0.04225)*r11);
IkReal x3020=((0.021)*r10);
IkReal x3021=((0.04225)*r00);
IkReal x3022=(r21*sj5);
IkReal x3023=((0.021)*r00);
IkReal x3024=((0.021)*r01);
IkReal x3025=(sj0*sj5);
IkReal x3026=(cj0*cj5);
IkReal x3027=(cj4*r02);
IkReal x3028=((1.0)*cj0);
IkReal x3029=((0.04225)*r01);
IkReal x3030=(cj4*r12);
IkReal x3031=(r11*sj4);
IkReal x3032=((1.0)*r11);
IkReal x3033=(r10*sj4);
IkReal x3034=(r20*sj5);
IkReal x3035=((1.0)*sj0);
IkReal x3036=((0.021)*r11);
IkReal x3037=(cj5*r21);
IkReal x3038=(cj5*r20);
IkReal x3039=((0.04225)*r10);
IkReal x3040=(cj1*x3015);
IkReal x3041=(sj1*x3015);
IkReal x3042=((0.0137)*x3014);
evalcond[0]=(x3041+x3022+(((-1.0)*x3038)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x3017*x3034))+(((-1.0)*x3017*x3037))+((sj1*x3014)));
evalcond[2]=(((r10*x3026))+x3014+(((-1.0)*r00*x3016))+((r01*x3025))+(((-1.0)*x3018*x3032)));
evalcond[3]=((((-1.0)*x3025*x3032))+x3040+((r10*x3016))+((r00*x3026))+(((-1.0)*r01*x3018)));
evalcond[4]=((((-0.26630543)*cj1))+(((0.04225)*x3038))+(((0.24475)*x3041))+(((-0.04225)*x3022))+pz+(((-0.021)*x3034))+(((-0.021)*x3037))+((sj1*x3042)));
evalcond[5]=((((-1.0)*x3027*x3028))+((r00*sj4*x3018))+(((-1.0)*x3030*x3035))+((r01*sj4*x3026))+((x3025*x3033))+((x3016*x3031))+((cj1*x3014)));
evalcond[6]=(((x3018*x3033))+((x3026*x3031))+((sj0*x3027))+(((-1.0)*x3028*x3030))+(((-1.0)*r01*x3016*x3017))+(((-1.0)*r00*x3017*x3025))+(((-1.0)*x3015)));
evalcond[7]=((0.22374884)+((x3026*x3036))+(((-1.0)*py*x3028))+((x3018*x3019))+(((0.24475)*x3014))+(((-1.0)*x3016*x3024))+(((-1.0)*x3026*x3039))+(((-0.0137)*x3015))+(((-1.0)*x3025*x3029))+(((-1.0)*x3023*x3025))+((px*sj0))+((x3016*x3021))+((x3018*x3020)));
evalcond[8]=((((-1.0)*px*x3028))+((x3019*x3025))+(((-1.0)*x3021*x3026))+((x3020*x3025))+(((-1.0)*py*x3035))+((cj1*x3042))+(((0.24475)*x3040))+(((-1.0)*x3016*x3039))+((x3016*x3036))+((x3024*x3026))+((x3018*x3023))+((x3018*x3029))+(((0.26630543)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x3043 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),(((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3043.valid){
continue;
}
CheckValue<IkReal> x3044=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x3044.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x3043.value)+(((1.5707963267949)*(x3044.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3045=IKcos(j3);
IkReal x3046=IKsin(j3);
IkReal x3047=(cj5*sj0);
IkReal x3048=((1.0)*sj4);
IkReal x3049=(cj0*sj5);
IkReal x3050=((0.04225)*r11);
IkReal x3051=((0.021)*r10);
IkReal x3052=((0.04225)*r00);
IkReal x3053=(r21*sj5);
IkReal x3054=((0.021)*r00);
IkReal x3055=((0.021)*r01);
IkReal x3056=(sj0*sj5);
IkReal x3057=(cj0*cj5);
IkReal x3058=(cj4*r02);
IkReal x3059=((1.0)*cj0);
IkReal x3060=((0.04225)*r01);
IkReal x3061=(cj4*r12);
IkReal x3062=(r11*sj4);
IkReal x3063=((1.0)*r11);
IkReal x3064=(r10*sj4);
IkReal x3065=(r20*sj5);
IkReal x3066=((1.0)*sj0);
IkReal x3067=((0.021)*r11);
IkReal x3068=(cj5*r21);
IkReal x3069=(cj5*r20);
IkReal x3070=((0.04225)*r10);
IkReal x3071=(cj1*x3046);
IkReal x3072=(sj1*x3046);
IkReal x3073=((0.0137)*x3045);
evalcond[0]=((((-1.0)*x3069))+x3072+x3053);
evalcond[1]=(((cj4*r22))+(((-1.0)*x3048*x3068))+(((-1.0)*x3048*x3065))+((sj1*x3045)));
evalcond[2]=((((-1.0)*x3049*x3063))+x3045+((r01*x3056))+((r10*x3057))+(((-1.0)*r00*x3047)));
evalcond[3]=(x3071+((r10*x3047))+((r00*x3057))+(((-1.0)*r01*x3049))+(((-1.0)*x3056*x3063)));
evalcond[4]=((((0.04225)*x3069))+(((0.24475)*x3072))+(((-0.04225)*x3053))+(((-0.26630543)*cj1))+pz+((sj1*x3073))+(((-0.021)*x3068))+(((-0.021)*x3065)));
evalcond[5]=(((r00*sj4*x3049))+(((-1.0)*x3058*x3059))+(((-1.0)*x3061*x3066))+((cj1*x3045))+((x3047*x3062))+((x3056*x3064))+((r01*sj4*x3057)));
evalcond[6]=((((-1.0)*r00*x3048*x3056))+((sj0*x3058))+(((-1.0)*r01*x3047*x3048))+(((-1.0)*x3046))+((x3057*x3062))+((x3049*x3064))+(((-1.0)*x3059*x3061)));
evalcond[7]=((0.22374884)+(((-1.0)*x3057*x3070))+(((-1.0)*x3047*x3055))+(((-0.0137)*x3046))+(((0.24475)*x3045))+(((-1.0)*x3054*x3056))+((x3057*x3067))+(((-1.0)*py*x3059))+((px*sj0))+((x3047*x3052))+((x3049*x3051))+((x3049*x3050))+(((-1.0)*x3056*x3060)));
evalcond[8]=((((-1.0)*x3052*x3057))+(((0.24475)*x3071))+(((-1.0)*x3047*x3070))+((x3051*x3056))+((x3047*x3067))+((x3049*x3060))+((x3055*x3057))+((cj1*x3073))+(((0.26630543)*sj1))+(((-1.0)*py*x3066))+(((-1.0)*px*x3059))+((x3049*x3054))+((x3050*x3056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3074=((1.0)*sj0);
IkReal x3075=(r12*sj4);
IkReal x3076=(cj4*sj5);
IkReal x3077=((1.0)*cj0);
IkReal x3078=(r02*sj4);
IkReal x3079=(cj4*cj5);
IkReal x3080=(r01*x3079);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r22*sj4))+((r20*x3076))+((r21*x3079))+(((-1.0)*cj1)));
evalcond[2]=(((sj0*x3080))+(((-1.0)*r10*x3076*x3077))+((r00*sj0*x3076))+((sj0*x3078))+(((-1.0)*x3075*x3077))+(((-1.0)*r11*x3077*x3079)));
evalcond[3]=(sj1+(((-1.0)*x3074*x3075))+(((-1.0)*r10*x3074*x3076))+(((-1.0)*x3077*x3080))+(((-1.0)*r11*x3074*x3079))+(((-1.0)*r00*x3076*x3077))+(((-1.0)*x3077*x3078)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj1;
j3eval[1]=((IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j3eval[2]=IKsign(sj1);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=cj1;
j3eval[1]=sj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3081=((1.0)*cj0);
IkReal x3082=((0.021)*cj0);
IkReal x3083=(cj5*r01);
IkReal x3084=(r00*sj5);
IkReal x3085=(sj0*sj4);
IkReal x3086=(cj4*cj5);
IkReal x3087=(sj0*sj5);
IkReal x3088=((0.04225)*cj0);
IkReal x3089=(r01*sj5);
IkReal x3090=(cj0*sj4);
IkReal x3091=((1.0)*r11);
IkReal x3092=(cj5*r00);
IkReal x3093=(cj4*r10);
IkReal x3094=((1.0)*sj0);
IkReal x3095=(cj5*r11);
IkReal x3096=(cj4*x3083);
IkReal x3097=(cj5*r10*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((r21*x3086)));
evalcond[2]=(((cj0*x3092))+x3097+(((-1.0)*x3087*x3091))+(((-1.0)*x3081*x3089)));
evalcond[3]=(((cj4*sj0*x3084))+(((-1.0)*r12*sj4*x3081))+((r02*x3085))+(((-1.0)*sj5*x3081*x3093))+(((-1.0)*r11*x3081*x3086))+((sj0*x3096)));
evalcond[4]=((1.0)+(((-1.0)*r02*sj4*x3081))+(((-1.0)*sj0*x3086*x3091))+(((-1.0)*x3081*x3096))+(((-1.0)*r12*x3085))+(((-1.0)*x3087*x3093))+(((-1.0)*cj4*x3081*x3084)));
evalcond[5]=(((x3084*x3090))+((x3085*x3095))+(((-1.0)*cj4*r12*x3094))+((r10*sj5*x3085))+(((-1.0)*cj4*r02*x3081))+((x3083*x3090)));
evalcond[6]=((0.26630543)+((x3082*x3084))+((x3082*x3083))+(((0.021)*sj0*x3095))+(((-1.0)*x3088*x3092))+(((0.021)*r10*x3087))+(((-0.04225)*x3097))+(((-1.0)*px*x3081))+((x3088*x3089))+(((-1.0)*py*x3094))+(((0.04225)*r11*x3087)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r20))+(((-1.0)*r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((-1.0)*r21*sj5))))+IKsqr((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((-1.0)*r21*sj5))), (((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x3098=IKcos(j3);
IkReal x3099=IKsin(j3);
IkReal x3100=(cj5*sj0);
IkReal x3101=(cj0*sj5);
IkReal x3102=(r21*sj5);
IkReal x3103=((1.0)*cj0);
IkReal x3104=((1.0)*sj4);
IkReal x3105=(sj0*sj5);
IkReal x3106=(r20*sj5);
IkReal x3107=(cj5*r21);
IkReal x3108=(cj5*r20);
IkReal x3109=(cj0*cj5*r11);
IkReal x3110=(cj0*cj5*r10);
evalcond[0]=(x3102+x3099+(((-1.0)*x3108)));
evalcond[1]=(((cj4*r22))+x3098+(((-1.0)*x3104*x3107))+(((-1.0)*x3104*x3106)));
evalcond[2]=(x3110+(((-1.0)*r00*x3100))+(((-1.0)*r11*x3101))+((r01*x3105))+(((-1.0)*x3098)));
evalcond[3]=((((-0.04225)*x3102))+(((-0.021)*x3106))+(((-0.021)*x3107))+(((0.24475)*x3099))+(((0.0137)*x3098))+pz+(((0.04225)*x3108)));
evalcond[4]=((((-1.0)*cj4*r12*x3103))+x3099+((r10*sj4*x3101))+((cj4*r02*sj0))+(((-1.0)*r00*x3104*x3105))+(((-1.0)*r01*x3100*x3104))+((sj4*x3109)));
evalcond[5]=((-0.22425116)+(((0.04225)*r00*x3100))+(((0.021)*x3109))+(((-0.021)*r00*x3105))+(((-0.021)*r01*x3100))+(((-0.24475)*x3098))+(((0.021)*r10*x3101))+(((-0.04225)*r01*x3105))+(((0.0137)*x3099))+(((-1.0)*py*x3103))+((px*sj0))+(((0.04225)*r11*x3101))+(((-0.04225)*x3110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3111=((1.0)*cj0);
IkReal x3112=((0.021)*cj0);
IkReal x3113=(cj5*r01);
IkReal x3114=(r00*sj5);
IkReal x3115=(sj0*sj4);
IkReal x3116=(cj4*cj5);
IkReal x3117=(sj0*sj5);
IkReal x3118=((0.04225)*cj0);
IkReal x3119=(r01*sj5);
IkReal x3120=(cj0*sj4);
IkReal x3121=((1.0)*r11);
IkReal x3122=(cj5*r00);
IkReal x3123=(cj4*r10);
IkReal x3124=((1.0)*sj0);
IkReal x3125=(cj5*r11);
IkReal x3126=(cj4*x3113);
IkReal x3127=(cj5*r10*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*r20*sj5))+((r22*sj4))+((r21*x3116)));
evalcond[2]=(x3127+(((-1.0)*x3117*x3121))+(((-1.0)*x3111*x3119))+((cj0*x3122)));
evalcond[3]=((((-1.0)*r11*x3111*x3116))+((r02*x3115))+(((-1.0)*sj5*x3111*x3123))+((cj4*sj0*x3114))+((sj0*x3126))+(((-1.0)*r12*sj4*x3111)));
evalcond[4]=((-1.0)+(((-1.0)*r02*sj4*x3111))+(((-1.0)*sj0*x3116*x3121))+(((-1.0)*x3111*x3126))+(((-1.0)*r12*x3115))+(((-1.0)*cj4*x3111*x3114))+(((-1.0)*x3117*x3123)));
evalcond[5]=(((x3115*x3125))+(((-1.0)*cj4*r12*x3124))+(((-1.0)*cj4*r02*x3111))+((x3114*x3120))+((x3113*x3120))+((r10*sj5*x3115)));
evalcond[6]=((-0.26630543)+(((-1.0)*py*x3124))+(((-0.04225)*x3127))+((x3112*x3113))+((x3112*x3114))+(((0.021)*sj0*x3125))+((x3118*x3119))+(((0.021)*r10*x3117))+(((-1.0)*px*x3111))+(((0.04225)*r11*x3117))+(((-1.0)*x3118*x3122)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3128=((1.0)*r20);
if( IKabs(((((-1.0)*cj5*x3128))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r22))+(((-1.0)*sj4*sj5*x3128))+(((-1.0)*cj5*r21*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x3128))+((r21*sj5))))+IKsqr((((cj4*r22))+(((-1.0)*sj4*sj5*x3128))+(((-1.0)*cj5*r21*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj5*x3128))+((r21*sj5))), (((cj4*r22))+(((-1.0)*sj4*sj5*x3128))+(((-1.0)*cj5*r21*sj4))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x3129=IKsin(j3);
IkReal x3130=IKcos(j3);
IkReal x3131=(cj5*sj0);
IkReal x3132=(cj0*sj5);
IkReal x3133=(r21*sj5);
IkReal x3134=((1.0)*cj0);
IkReal x3135=((1.0)*sj4);
IkReal x3136=(sj0*sj5);
IkReal x3137=(r20*sj5);
IkReal x3138=(cj5*r21);
IkReal x3139=(cj5*r20);
IkReal x3140=((1.0)*x3130);
IkReal x3141=(cj0*cj5*r11);
IkReal x3142=(cj0*cj5*r10);
evalcond[0]=(x3133+(((-1.0)*x3129))+(((-1.0)*x3139)));
evalcond[1]=((((-1.0)*x3140))+((cj4*r22))+(((-1.0)*x3135*x3138))+(((-1.0)*x3135*x3137)));
evalcond[2]=(x3142+(((-1.0)*x3140))+((r01*x3136))+(((-1.0)*r11*x3132))+(((-1.0)*r00*x3131)));
evalcond[3]=((((-0.24475)*x3129))+(((-0.04225)*x3133))+(((-0.0137)*x3130))+pz+(((-0.021)*x3138))+(((-0.021)*x3137))+(((0.04225)*x3139)));
evalcond[4]=(((r10*sj4*x3132))+x3129+(((-1.0)*r00*x3135*x3136))+(((-1.0)*r01*x3131*x3135))+(((-1.0)*cj4*r12*x3134))+((sj4*x3141))+((cj4*r02*sj0)));
evalcond[5]=((-0.22425116)+(((-1.0)*py*x3134))+(((-0.24475)*x3130))+(((-0.04225)*r01*x3136))+(((0.021)*x3141))+(((0.04225)*r00*x3131))+(((0.04225)*r11*x3132))+(((-0.04225)*x3142))+((px*sj0))+(((-0.021)*r01*x3131))+(((0.0137)*x3129))+(((-0.021)*r00*x3136))+(((0.021)*r10*x3132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3143=((1.0)*cj5);
CheckValue<IkReal> x3144=IKPowWithIntegerCheck(cj1,-1);
if(!x3144.valid){
continue;
}
CheckValue<IkReal> x3145=IKPowWithIntegerCheck(sj1,-1);
if(!x3145.valid){
continue;
}
if( IKabs(((x3144.value)*(((((-1.0)*r10*sj0*x3143))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x3143)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3145.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3144.value)*(((((-1.0)*r10*sj0*x3143))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x3143))))))+IKsqr(((x3145.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x3144.value)*(((((-1.0)*r10*sj0*x3143))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x3143))))), ((x3145.value)*((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3146=IKcos(j3);
IkReal x3147=IKsin(j3);
IkReal x3148=(cj5*r01);
IkReal x3149=(cj0*sj4);
IkReal x3150=(cj0*sj5);
IkReal x3151=((0.04225)*r11);
IkReal x3152=((0.021)*r10);
IkReal x3153=(r21*sj5);
IkReal x3154=((0.021)*r00);
IkReal x3155=((0.021)*sj0);
IkReal x3156=(sj0*sj5);
IkReal x3157=(cj4*r02);
IkReal x3158=((1.0)*cj0);
IkReal x3159=((0.04225)*r01);
IkReal x3160=(cj4*r12);
IkReal x3161=((1.0)*sj4);
IkReal x3162=(cj5*r11);
IkReal x3163=((1.0)*r11);
IkReal x3164=((1.0)*sj0);
IkReal x3165=(cj5*r00);
IkReal x3166=(r20*sj5);
IkReal x3167=((0.021)*cj0);
IkReal x3168=(cj5*r21);
IkReal x3169=(cj5*r20);
IkReal x3170=(cj1*x3147);
IkReal x3171=((0.04225)*x3165);
IkReal x3172=(sj1*x3147);
IkReal x3173=((0.0137)*x3146);
IkReal x3174=(cj0*cj5*r10);
IkReal x3175=(cj5*r10*sj0);
evalcond[0]=(x3153+x3172+(((-1.0)*x3169)));
evalcond[1]=((((-1.0)*x3161*x3166))+(((-1.0)*x3161*x3168))+((cj4*r22))+((sj1*x3146)));
evalcond[2]=(x3174+(((-1.0)*x3146))+(((-1.0)*x3150*x3163))+(((-1.0)*x3164*x3165))+((r01*x3156)));
evalcond[3]=(x3170+x3175+(((-1.0)*x3156*x3163))+((cj0*x3165))+(((-1.0)*r01*x3150)));
evalcond[4]=(((sj1*x3173))+(((-0.26630543)*cj1))+(((-0.021)*x3168))+(((-0.021)*x3166))+(((0.04225)*x3169))+pz+(((-0.04225)*x3153))+(((0.24475)*x3172)));
evalcond[5]=((((-1.0)*r00*x3156*x3161))+x3147+((r10*sj5*x3149))+((x3149*x3162))+(((-1.0)*sj0*x3148*x3161))+(((-1.0)*x3158*x3160))+((sj0*x3157)));
evalcond[6]=(((r00*sj5*x3149))+(((-1.0)*x3157*x3158))+((x3148*x3149))+(((-1.0)*x3160*x3164))+((r10*sj4*x3156))+((sj0*sj4*x3162))+((cj1*x3146)));
evalcond[7]=((-0.22425116)+(((-1.0)*x3148*x3155))+((sj0*x3171))+(((-0.04225)*x3174))+(((-1.0)*x3156*x3159))+((x3150*x3151))+((x3150*x3152))+(((0.0137)*x3147))+((x3162*x3167))+(((-1.0)*py*x3158))+(((-1.0)*x3154*x3156))+((px*sj0))+(((-0.24475)*x3146)));
evalcond[8]=(((x3151*x3156))+((x3155*x3162))+(((-0.04225)*x3175))+((cj1*x3173))+((x3148*x3167))+((x3150*x3154))+((x3150*x3159))+(((-1.0)*py*x3164))+(((0.24475)*x3170))+(((0.26630543)*sj1))+((x3152*x3156))+(((-1.0)*cj0*x3171))+(((-1.0)*px*x3158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3176=((1.0)*sj5);
CheckValue<IkReal> x3177=IKPowWithIntegerCheck(sj1,-1);
if(!x3177.valid){
continue;
}
if( IKabs(((x3177.value)*(((((-1.0)*r21*x3176))+((cj5*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x3176))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3177.value)*(((((-1.0)*r21*x3176))+((cj5*r20))))))+IKsqr((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x3176))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x3177.value)*(((((-1.0)*r21*x3176))+((cj5*r20))))), (((cj0*cj5*r10))+(((-1.0)*cj0*r11*x3176))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3178=IKcos(j3);
IkReal x3179=IKsin(j3);
IkReal x3180=(cj5*r01);
IkReal x3181=(cj0*sj4);
IkReal x3182=(cj0*sj5);
IkReal x3183=((0.04225)*r11);
IkReal x3184=((0.021)*r10);
IkReal x3185=(r21*sj5);
IkReal x3186=((0.021)*r00);
IkReal x3187=((0.021)*sj0);
IkReal x3188=(sj0*sj5);
IkReal x3189=(cj4*r02);
IkReal x3190=((1.0)*cj0);
IkReal x3191=((0.04225)*r01);
IkReal x3192=(cj4*r12);
IkReal x3193=((1.0)*sj4);
IkReal x3194=(cj5*r11);
IkReal x3195=((1.0)*r11);
IkReal x3196=((1.0)*sj0);
IkReal x3197=(cj5*r00);
IkReal x3198=(r20*sj5);
IkReal x3199=((0.021)*cj0);
IkReal x3200=(cj5*r21);
IkReal x3201=(cj5*r20);
IkReal x3202=(cj1*x3179);
IkReal x3203=((0.04225)*x3197);
IkReal x3204=(sj1*x3179);
IkReal x3205=((0.0137)*x3178);
IkReal x3206=(cj0*cj5*r10);
IkReal x3207=(cj5*r10*sj0);
evalcond[0]=(x3185+x3204+(((-1.0)*x3201)));
evalcond[1]=(((sj1*x3178))+((cj4*r22))+(((-1.0)*x3193*x3200))+(((-1.0)*x3193*x3198)));
evalcond[2]=((((-1.0)*x3196*x3197))+((r01*x3188))+(((-1.0)*x3178))+x3206+(((-1.0)*x3182*x3195)));
evalcond[3]=(((cj0*x3197))+x3207+x3202+(((-1.0)*x3188*x3195))+(((-1.0)*r01*x3182)));
evalcond[4]=((((0.04225)*x3201))+(((0.24475)*x3204))+(((-0.021)*x3200))+(((-0.26630543)*cj1))+(((-0.04225)*x3185))+pz+(((-0.021)*x3198))+((sj1*x3205)));
evalcond[5]=((((-1.0)*x3190*x3192))+x3179+((r10*sj5*x3181))+(((-1.0)*r00*x3188*x3193))+((sj0*x3189))+((x3181*x3194))+(((-1.0)*sj0*x3180*x3193)));
evalcond[6]=(((r00*sj5*x3181))+((cj1*x3178))+((sj0*sj4*x3194))+(((-1.0)*x3192*x3196))+((x3180*x3181))+((r10*sj4*x3188))+(((-1.0)*x3189*x3190)));
evalcond[7]=((-0.22425116)+((sj0*x3203))+(((-0.04225)*x3206))+(((-1.0)*x3180*x3187))+(((-0.24475)*x3178))+((x3182*x3184))+((x3182*x3183))+(((-1.0)*x3188*x3191))+(((-1.0)*x3186*x3188))+(((0.0137)*x3179))+((x3194*x3199))+((px*sj0))+(((-1.0)*py*x3190)));
evalcond[8]=((((0.24475)*x3202))+(((-0.04225)*x3207))+(((-1.0)*cj0*x3203))+(((-1.0)*px*x3190))+((x3184*x3188))+((x3182*x3186))+((x3182*x3191))+((x3183*x3188))+((x3187*x3194))+((cj1*x3205))+((x3180*x3199))+(((-1.0)*py*x3196))+(((0.26630543)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x3208 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),(((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3208.valid){
continue;
}
CheckValue<IkReal> x3209=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x3209.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x3208.value)+(((1.5707963267949)*(x3209.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3210=IKcos(j3);
IkReal x3211=IKsin(j3);
IkReal x3212=(cj5*r01);
IkReal x3213=(cj0*sj4);
IkReal x3214=(cj0*sj5);
IkReal x3215=((0.04225)*r11);
IkReal x3216=((0.021)*r10);
IkReal x3217=(r21*sj5);
IkReal x3218=((0.021)*r00);
IkReal x3219=((0.021)*sj0);
IkReal x3220=(sj0*sj5);
IkReal x3221=(cj4*r02);
IkReal x3222=((1.0)*cj0);
IkReal x3223=((0.04225)*r01);
IkReal x3224=(cj4*r12);
IkReal x3225=((1.0)*sj4);
IkReal x3226=(cj5*r11);
IkReal x3227=((1.0)*r11);
IkReal x3228=((1.0)*sj0);
IkReal x3229=(cj5*r00);
IkReal x3230=(r20*sj5);
IkReal x3231=((0.021)*cj0);
IkReal x3232=(cj5*r21);
IkReal x3233=(cj5*r20);
IkReal x3234=(cj1*x3211);
IkReal x3235=((0.04225)*x3229);
IkReal x3236=(sj1*x3211);
IkReal x3237=((0.0137)*x3210);
IkReal x3238=(cj0*cj5*r10);
IkReal x3239=(cj5*r10*sj0);
evalcond[0]=(x3217+x3236+(((-1.0)*x3233)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x3225*x3232))+(((-1.0)*x3225*x3230))+((sj1*x3210)));
evalcond[2]=(x3238+(((-1.0)*x3210))+((r01*x3220))+(((-1.0)*x3228*x3229))+(((-1.0)*x3214*x3227)));
evalcond[3]=(((cj0*x3229))+x3234+x3239+(((-1.0)*x3220*x3227))+(((-1.0)*r01*x3214)));
evalcond[4]=(((sj1*x3237))+(((0.04225)*x3233))+(((0.24475)*x3236))+(((-0.04225)*x3217))+(((-0.021)*x3232))+(((-0.021)*x3230))+(((-0.26630543)*cj1))+pz);
evalcond[5]=(((r10*sj5*x3213))+(((-1.0)*sj0*x3212*x3225))+x3211+((sj0*x3221))+(((-1.0)*r00*x3220*x3225))+(((-1.0)*x3222*x3224))+((x3213*x3226)));
evalcond[6]=(((x3212*x3213))+((sj0*sj4*x3226))+((r10*sj4*x3220))+((r00*sj5*x3213))+(((-1.0)*x3224*x3228))+((cj1*x3210))+(((-1.0)*x3221*x3222)));
evalcond[7]=((-0.22425116)+(((-0.04225)*x3238))+(((-0.24475)*x3210))+((x3214*x3215))+((x3214*x3216))+(((-1.0)*py*x3222))+(((-1.0)*x3212*x3219))+(((-1.0)*x3220*x3223))+((x3226*x3231))+((px*sj0))+(((-1.0)*x3218*x3220))+(((0.0137)*x3211))+((sj0*x3235)));
evalcond[8]=((((-0.04225)*x3239))+(((0.24475)*x3234))+((x3216*x3220))+(((-1.0)*cj0*x3235))+((x3214*x3218))+(((-1.0)*py*x3228))+(((-1.0)*px*x3222))+((x3219*x3226))+(((0.26630543)*sj1))+((cj1*x3237))+((x3212*x3231))+((x3215*x3220))+((x3214*x3223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x3247=IKPowWithIntegerCheck(sj2,-1);
if(!x3247.valid){
continue;
}
IkReal x3240=x3247.value;
IkReal x3241=(cj1*cj2);
IkReal x3242=((1.0)*sj5);
IkReal x3243=(r01*sj0);
IkReal x3244=(cj0*r11*sj5);
IkReal x3245=(cj5*r00*sj0);
IkReal x3246=((1.0)*cj0*cj5*r10);
CheckValue<IkReal> x3248=IKPowWithIntegerCheck(sj1,-1);
if(!x3248.valid){
continue;
}
if( IKabs((x3240*(x3248.value)*((((cj5*r20*sj2))+(((-1.0)*x3241*x3242*x3243))+((x3241*x3244))+((x3241*x3245))+(((-1.0)*r21*sj2*x3242))+(((-1.0)*x3241*x3246)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3240*((x3245+x3244+(((-1.0)*x3246))+(((-1.0)*x3242*x3243)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3240*(x3248.value)*((((cj5*r20*sj2))+(((-1.0)*x3241*x3242*x3243))+((x3241*x3244))+((x3241*x3245))+(((-1.0)*r21*sj2*x3242))+(((-1.0)*x3241*x3246))))))+IKsqr((x3240*((x3245+x3244+(((-1.0)*x3246))+(((-1.0)*x3242*x3243))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x3240*(x3248.value)*((((cj5*r20*sj2))+(((-1.0)*x3241*x3242*x3243))+((x3241*x3244))+((x3241*x3245))+(((-1.0)*r21*sj2*x3242))+(((-1.0)*x3241*x3246))))), (x3240*((x3245+x3244+(((-1.0)*x3246))+(((-1.0)*x3242*x3243))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3249=IKcos(j3);
IkReal x3250=IKsin(j3);
IkReal x3251=(cj5*r01);
IkReal x3252=(cj0*sj4);
IkReal x3253=(cj0*sj5);
IkReal x3254=((0.04225)*r11);
IkReal x3255=((0.021)*r10);
IkReal x3256=(r21*sj5);
IkReal x3257=((0.021)*r00);
IkReal x3258=((0.021)*sj0);
IkReal x3259=((0.04225)*cj5);
IkReal x3260=(r10*sj0);
IkReal x3261=(sj0*sj5);
IkReal x3262=((1.0)*cj2);
IkReal x3263=((1.0)*sj0);
IkReal x3264=(cj0*r00);
IkReal x3265=(cj4*r02);
IkReal x3266=((1.0)*cj0);
IkReal x3267=((0.0137)*cj2);
IkReal x3268=((0.04225)*r01);
IkReal x3269=(cj4*r12);
IkReal x3270=((1.0)*sj4);
IkReal x3271=(cj5*r11);
IkReal x3272=((1.0)*r11);
IkReal x3273=(r20*sj5);
IkReal x3274=((0.021)*cj0);
IkReal x3275=((0.24475)*cj2);
IkReal x3276=(cj5*r21);
IkReal x3277=(cj0*r10);
IkReal x3278=((0.224)*cj2);
IkReal x3279=(cj1*x3250);
IkReal x3280=(cj1*x3249);
IkReal x3281=(sj1*x3250);
IkReal x3282=(sj2*x3249);
IkReal x3283=(sj2*x3250);
IkReal x3284=(sj1*x3249);
evalcond[0]=((((-1.0)*x3262*x3280))+x3256+x3281+(((-1.0)*cj5*r20)));
evalcond[1]=(((cj5*x3277))+((r01*x3261))+(((-1.0)*cj5*r00*x3263))+x3282+(((-1.0)*x3253*x3272)));
evalcond[2]=(((cj4*r22))+x3284+((cj2*x3279))+(((-1.0)*x3270*x3273))+(((-1.0)*x3270*x3276)));
evalcond[3]=(((cj5*x3260))+((cj5*x3264))+(((-1.0)*x3261*x3272))+(((-1.0)*r01*x3253))+x3279+((cj2*x3284)));
evalcond[4]=(((x3252*x3271))+(((-1.0)*r00*x3261*x3270))+(((-1.0)*sj4*x3251*x3263))+((sj0*x3265))+(((-1.0)*x3266*x3269))+((r10*sj5*x3252))+(((-1.0)*x3283)));
evalcond[5]=((((-1.0)*x3262*x3281))+((sj4*sj5*x3260))+x3280+((sj0*sj4*x3271))+(((-1.0)*x3265*x3266))+((x3251*x3252))+(((-1.0)*x3263*x3269))+((r00*sj5*x3252)));
evalcond[6]=((((0.0137)*x3284))+((x3267*x3279))+(((-0.04225)*x3256))+(((-1.0)*cj1*x3278))+(((-0.26630543)*cj1))+(((-0.021)*x3276))+(((-0.021)*x3273))+(((0.24475)*x3281))+pz+(((-1.0)*x3275*x3280))+((r20*x3259)));
evalcond[7]=((-0.00025116)+(((0.224)*sj2))+(((-1.0)*x3257*x3261))+(((-1.0)*x3261*x3268))+((r00*sj0*x3259))+(((-0.0137)*x3283))+(((0.24475)*x3282))+(((-1.0)*x3251*x3258))+((px*sj0))+((x3253*x3255))+((x3253*x3254))+(((-1.0)*py*x3266))+(((-1.0)*x3259*x3277))+((x3271*x3274)));
evalcond[8]=(((sj1*x3278))+(((-1.0)*x3267*x3281))+((x3255*x3261))+(((-1.0)*px*x3266))+((x3254*x3261))+(((0.0137)*x3280))+((x3253*x3268))+(((0.24475)*x3279))+((x3275*x3284))+((x3258*x3271))+((x3253*x3257))+(((-1.0)*py*x3263))+(((0.26630543)*sj1))+(((-1.0)*x3259*x3264))+(((-1.0)*x3259*x3260))+((x3251*x3274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3285=(sj1*sj5);
IkReal x3286=(r11*sj0);
IkReal x3287=(cj1*sj5);
IkReal x3288=(cj0*r01);
IkReal x3289=(r10*sj0);
IkReal x3290=(cj0*r00);
IkReal x3291=((1.0)*cj1*cj5);
IkReal x3292=((1.0)*cj5*sj1);
CheckValue<IkReal> x3293=IKPowWithIntegerCheck(cj2,-1);
if(!x3293.valid){
continue;
}
if( IKabs((((x3286*x3287))+((x3287*x3288))+((cj5*r20*sj1))+(((-1.0)*r21*x3285))+(((-1.0)*x3289*x3291))+(((-1.0)*x3290*x3291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3293.value)*((((x3285*x3286))+((x3285*x3288))+(((-1.0)*r20*x3291))+((r21*x3287))+(((-1.0)*x3289*x3292))+(((-1.0)*x3290*x3292)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3286*x3287))+((x3287*x3288))+((cj5*r20*sj1))+(((-1.0)*r21*x3285))+(((-1.0)*x3289*x3291))+(((-1.0)*x3290*x3291))))+IKsqr(((x3293.value)*((((x3285*x3286))+((x3285*x3288))+(((-1.0)*r20*x3291))+((r21*x3287))+(((-1.0)*x3289*x3292))+(((-1.0)*x3290*x3292))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x3286*x3287))+((x3287*x3288))+((cj5*r20*sj1))+(((-1.0)*r21*x3285))+(((-1.0)*x3289*x3291))+(((-1.0)*x3290*x3291))), ((x3293.value)*((((x3285*x3286))+((x3285*x3288))+(((-1.0)*r20*x3291))+((r21*x3287))+(((-1.0)*x3289*x3292))+(((-1.0)*x3290*x3292))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3294=IKcos(j3);
IkReal x3295=IKsin(j3);
IkReal x3296=(cj5*r01);
IkReal x3297=(cj0*sj4);
IkReal x3298=(cj0*sj5);
IkReal x3299=((0.04225)*r11);
IkReal x3300=((0.021)*r10);
IkReal x3301=(r21*sj5);
IkReal x3302=((0.021)*r00);
IkReal x3303=((0.021)*sj0);
IkReal x3304=((0.04225)*cj5);
IkReal x3305=(r10*sj0);
IkReal x3306=(sj0*sj5);
IkReal x3307=((1.0)*cj2);
IkReal x3308=((1.0)*sj0);
IkReal x3309=(cj0*r00);
IkReal x3310=(cj4*r02);
IkReal x3311=((1.0)*cj0);
IkReal x3312=((0.0137)*cj2);
IkReal x3313=((0.04225)*r01);
IkReal x3314=(cj4*r12);
IkReal x3315=((1.0)*sj4);
IkReal x3316=(cj5*r11);
IkReal x3317=((1.0)*r11);
IkReal x3318=(r20*sj5);
IkReal x3319=((0.021)*cj0);
IkReal x3320=((0.24475)*cj2);
IkReal x3321=(cj5*r21);
IkReal x3322=(cj0*r10);
IkReal x3323=((0.224)*cj2);
IkReal x3324=(cj1*x3295);
IkReal x3325=(cj1*x3294);
IkReal x3326=(sj1*x3295);
IkReal x3327=(sj2*x3294);
IkReal x3328=(sj2*x3295);
IkReal x3329=(sj1*x3294);
evalcond[0]=(x3326+x3301+(((-1.0)*x3307*x3325))+(((-1.0)*cj5*r20)));
evalcond[1]=(x3327+(((-1.0)*cj5*r00*x3308))+(((-1.0)*x3298*x3317))+((r01*x3306))+((cj5*x3322)));
evalcond[2]=(((cj4*r22))+x3329+((cj2*x3324))+(((-1.0)*x3315*x3318))+(((-1.0)*x3315*x3321)));
evalcond[3]=(x3324+((cj2*x3329))+(((-1.0)*x3306*x3317))+(((-1.0)*r01*x3298))+((cj5*x3309))+((cj5*x3305)));
evalcond[4]=(((x3297*x3316))+(((-1.0)*x3328))+((r10*sj5*x3297))+(((-1.0)*sj4*x3296*x3308))+(((-1.0)*r00*x3306*x3315))+(((-1.0)*x3311*x3314))+((sj0*x3310)));
evalcond[5]=(((sj4*sj5*x3305))+((sj0*sj4*x3316))+x3325+(((-1.0)*x3307*x3326))+((x3296*x3297))+(((-1.0)*x3308*x3314))+(((-1.0)*x3310*x3311))+((r00*sj5*x3297)));
evalcond[6]=((((0.0137)*x3329))+(((-0.26630543)*cj1))+(((-1.0)*x3320*x3325))+pz+(((-1.0)*cj1*x3323))+(((-0.04225)*x3301))+(((-0.021)*x3318))+((x3312*x3324))+((r20*x3304))+(((0.24475)*x3326))+(((-0.021)*x3321)));
evalcond[7]=((-0.00025116)+(((-0.0137)*x3328))+((x3316*x3319))+(((0.224)*sj2))+((x3298*x3299))+((x3298*x3300))+(((-1.0)*x3306*x3313))+(((-1.0)*x3302*x3306))+(((-1.0)*x3296*x3303))+(((-1.0)*x3304*x3322))+((r00*sj0*x3304))+((px*sj0))+(((0.24475)*x3327))+(((-1.0)*py*x3311)));
evalcond[8]=(((x3300*x3306))+(((-1.0)*py*x3308))+(((0.0137)*x3325))+(((-1.0)*x3304*x3305))+(((-1.0)*x3304*x3309))+((sj1*x3323))+((x3298*x3313))+(((-1.0)*px*x3311))+((x3298*x3302))+((x3296*x3319))+(((-1.0)*x3312*x3326))+((x3320*x3329))+((x3299*x3306))+(((0.26630543)*sj1))+((x3303*x3316))+(((0.24475)*x3324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3330=cj1*cj1;
IkReal x3331=(sj4*sj5);
IkReal x3332=(cj1*cj2);
IkReal x3333=(cj4*r22);
IkReal x3334=((1.0)*r21);
IkReal x3335=(cj5*sj4);
IkReal x3336=((1.0)*r20*sj1);
CheckValue<IkReal> x3337=IKPowWithIntegerCheck(IKsign(((-1.0)+x3330+(((-1.0)*x3330*(cj2*cj2))))),-1);
if(!x3337.valid){
continue;
}
CheckValue<IkReal> x3338 = IKatan2WithCheck(IkReal((((x3332*x3333))+(((-1.0)*x3332*x3334*x3335))+(((-1.0)*r20*x3331*x3332))+(((-1.0)*cj5*x3336))+((r21*sj1*sj5)))),((((-1.0)*sj5*x3332*x3334))+(((-1.0)*x3331*x3336))+(((-1.0)*sj1*x3334*x3335))+((cj5*r20*x3332))+((sj1*x3333))),IKFAST_ATAN2_MAGTHRESH);
if(!x3338.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3337.value)))+(x3338.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x3339=IKcos(j3);
IkReal x3340=IKsin(j3);
IkReal x3341=(cj5*r01);
IkReal x3342=(cj0*sj4);
IkReal x3343=(cj0*sj5);
IkReal x3344=((0.04225)*r11);
IkReal x3345=((0.021)*r10);
IkReal x3346=(r21*sj5);
IkReal x3347=((0.021)*r00);
IkReal x3348=((0.021)*sj0);
IkReal x3349=((0.04225)*cj5);
IkReal x3350=(r10*sj0);
IkReal x3351=(sj0*sj5);
IkReal x3352=((1.0)*cj2);
IkReal x3353=((1.0)*sj0);
IkReal x3354=(cj0*r00);
IkReal x3355=(cj4*r02);
IkReal x3356=((1.0)*cj0);
IkReal x3357=((0.0137)*cj2);
IkReal x3358=((0.04225)*r01);
IkReal x3359=(cj4*r12);
IkReal x3360=((1.0)*sj4);
IkReal x3361=(cj5*r11);
IkReal x3362=((1.0)*r11);
IkReal x3363=(r20*sj5);
IkReal x3364=((0.021)*cj0);
IkReal x3365=((0.24475)*cj2);
IkReal x3366=(cj5*r21);
IkReal x3367=(cj0*r10);
IkReal x3368=((0.224)*cj2);
IkReal x3369=(cj1*x3340);
IkReal x3370=(cj1*x3339);
IkReal x3371=(sj1*x3340);
IkReal x3372=(sj2*x3339);
IkReal x3373=(sj2*x3340);
IkReal x3374=(sj1*x3339);
evalcond[0]=(x3371+x3346+(((-1.0)*cj5*r20))+(((-1.0)*x3352*x3370)));
evalcond[1]=(x3372+((r01*x3351))+(((-1.0)*cj5*r00*x3353))+((cj5*x3367))+(((-1.0)*x3343*x3362)));
evalcond[2]=((((-1.0)*x3360*x3366))+(((-1.0)*x3360*x3363))+((cj4*r22))+x3374+((cj2*x3369)));
evalcond[3]=((((-1.0)*r01*x3343))+x3369+((cj2*x3374))+((cj5*x3354))+((cj5*x3350))+(((-1.0)*x3351*x3362)));
evalcond[4]=((((-1.0)*x3373))+((r10*sj5*x3342))+((sj0*x3355))+(((-1.0)*x3356*x3359))+((x3342*x3361))+(((-1.0)*r00*x3351*x3360))+(((-1.0)*sj4*x3341*x3353)));
evalcond[5]=(((sj4*sj5*x3350))+x3370+((sj0*sj4*x3361))+((r00*sj5*x3342))+(((-1.0)*x3355*x3356))+((x3341*x3342))+(((-1.0)*x3353*x3359))+(((-1.0)*x3352*x3371)));
evalcond[6]=((((-0.04225)*x3346))+(((-1.0)*x3365*x3370))+(((-0.26630543)*cj1))+(((0.24475)*x3371))+pz+(((0.0137)*x3374))+((x3357*x3369))+(((-0.021)*x3366))+(((-0.021)*x3363))+((r20*x3349))+(((-1.0)*cj1*x3368)));
evalcond[7]=((-0.00025116)+(((0.224)*sj2))+((x3343*x3344))+((x3343*x3345))+(((-1.0)*x3341*x3348))+(((-1.0)*x3347*x3351))+(((-1.0)*x3349*x3367))+((x3361*x3364))+(((-1.0)*py*x3356))+(((-0.0137)*x3373))+(((-1.0)*x3351*x3358))+(((0.24475)*x3372))+((r00*sj0*x3349))+((px*sj0)));
evalcond[8]=(((x3341*x3364))+((x3343*x3358))+((x3344*x3351))+((x3343*x3347))+(((-1.0)*x3349*x3350))+(((-1.0)*x3349*x3354))+((x3348*x3361))+(((-1.0)*x3357*x3371))+(((-1.0)*py*x3353))+((x3345*x3351))+(((0.0137)*x3370))+((x3365*x3374))+(((0.24475)*x3369))+(((-1.0)*px*x3356))+(((0.26630543)*sj1))+((sj1*x3368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - komodo_arm (e83948d1b482a8c168aaa0bbfa0644c4)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
