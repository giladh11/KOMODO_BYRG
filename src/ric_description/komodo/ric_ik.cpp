/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-09-07 13:08:09.486990
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[3]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[2]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.224)*x3);
x11=((0.05525)*x1);
x12=((0.26630543)*x3);
x13=((0.278775)*x7);
x14=((0.05525)*x3);
x15=((1.0)*x7);
x16=((1.0)*x3);
x17=((0.0137)*x2);
x18=((0.0137)*x3);
x19=((0.05525)*x7);
x20=((1.0)*x2);
x21=((0.278775)*x3);
x22=(x4*x6);
x23=(x0*x5);
x24=(x4*x8);
x25=(x1*x6);
x26=(x0*x1);
x27=(x1*x5);
x28=(x0*x4);
x29=(x5*x6);
x30=(x27*x7);
x31=((((-1.0)*x16*x23))+x22);
x32=((((-1.0)*x28))+(((-1.0)*x16*x29)));
x33=(x31*x7);
eetrans[0]=((-0.096278)+((x0*x12))+((x8*(((((0.05525)*x29))+((x14*x28))))))+((x2*((((x21*x23))+(((-0.278775)*x22))))))+((x7*(((((-1.0)*x18*x23))+(((0.0137)*x22))))))+((x9*(((((-1.0)*x19*x31))+(((-1.0)*x0*x11*x2))))))+(((-0.224)*x22))+((x17*x26))+(((0.00025116)*x6))+((x10*x23))+((x13*x26)));
eetrans[1]=(((x7*(((((-0.0137)*x28))+(((-1.0)*x18*x29))))))+(((-0.00025116)*x0))+(((0.224)*x28))+((x8*(((((-0.05525)*x23))+((x14*x22))))))+((x17*x25))+((x9*(((((-1.0)*x11*x2*x6))+(((-1.0)*x19*x32))))))+((x10*x29))+((x2*((((x21*x29))+(((0.278775)*x28))))))+((x13*x25))+((x12*x6)));
IkReal x34=((1.0)*x3);
eetrans[2]=((0.1384)+((x9*((((x14*x2))+((x11*x5*x7))))))+(((0.278775)*x2*x27))+(((-0.0137)*x30))+(((0.224)*x27))+((x11*x24))+(((0.26630543)*x1))+(((-1.0)*x17*x34))+(((-1.0)*x13*x34)));
eerot[0]=(((x9*(((((-1.0)*x15*x31))+(((-1.0)*x20*x26))))))+((x8*(((((1.0)*x29))+((x16*x28)))))));
eerot[1]=(((x8*(((((-1.0)*x23))+((x16*x22))))))+((x9*(((((-1.0)*x15*x32))+(((-1.0)*x20*x25)))))));
eerot[2]=(((x1*x24))+((x9*((((x16*x2))+((x15*x27)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((0.096278)+px);
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.1384)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
IkReal op[72], zeror[48];
int numroots;;
IkReal x35=((35333.2792854729)*pz);
IkReal x36=((18.0995475113122)*py);
IkReal x37=((1.0)*r01);
IkReal x38=((1952.16368052238)*r02);
IkReal x39=((16142.2943244702)*py);
IkReal x40=((891.861761426979)*r01);
IkReal x41=((168.440157668419)*r02);
IkReal x42=((3048.69063653246)*pz);
IkReal x43=py*py;
IkReal x44=px*px;
IkReal x45=pz*pz;
IkReal x46=((5.83026305876777)*py);
IkReal x47=((4156.77161760842)*r02);
IkReal x48=((5.97270654947333)*r01);
IkReal x49=((6181.83911004247)*pz);
IkReal x50=((255.536202787557)*px);
IkReal x51=((221.063729043594)*r00);
IkReal x52=((3438.02224616942)*r01);
IkReal x53=((6458.91954274932)*r01);
IkReal x54=((4476.25753728975)*py);
IkReal x55=((9.97699972614964)*r02);
IkReal x56=((4476.25753728975)*pz);
IkReal x57=((219.979296066253)*px);
IkReal x58=((4119.70730296205)*r02);
IkReal x59=((5.41892673344891)*r01);
IkReal x60=((190.303538090919)*r00);
IkReal x61=((2.0)*r00);
IkReal x62=((1783.72352285396)*r00);
IkReal x63=((32284.5886489404)*px);
IkReal x64=((36.1990950226244)*px);
IkReal x65=((11.9454130989467)*r00);
IkReal x66=((442.127458087189)*r01);
IkReal x67=((511.072405575114)*py);
IkReal x68=((11.6605261175355)*px);
IkReal x69=((6876.04449233884)*r00);
IkReal x70=((8952.5150745795)*px);
IkReal x71=((12917.8390854986)*r00);
IkReal x72=((10.8378534668978)*r00);
IkReal x73=((380.607076181838)*r01);
IkReal x74=((439.958592132505)*py);
IkReal x75=((70666.5585709457)*px);
IkReal x76=((3904.32736104475)*r00);
IkReal x77=((336.880315336837)*r00);
IkReal x78=((6097.38127306492)*px);
IkReal x79=((12363.6782200849)*px);
IkReal x80=((8313.54323521684)*r00);
IkReal x81=((442.127458087189)*r02);
IkReal x82=((511.072405575114)*pz);
IkReal x83=((1.0)*r02);
IkReal x84=(py*r00);
IkReal x85=((19.9539994522993)*r00);
IkReal x86=((380.607076181838)*r02);
IkReal x87=((8239.41460592409)*r00);
IkReal x88=((439.958592132505)*pz);
IkReal x89=(px*r01);
IkReal x90=((162036.47193809)*r01);
IkReal x91=((47056.9111418576)*r01);
IkReal x92=(py*r02);
IkReal x93=(px*r02);
IkReal x94=((3981.52572065616)*pz);
IkReal x95=(pz*r01);
IkReal x96=((9250.1792864274)*py);
IkReal x97=(pz*r00);
IkReal x98=(py*r01);
IkReal x99=((4625.0896432137)*r02);
IkReal x100=((94113.8222837152)*px);
IkReal x101=((81018.2359690452)*r00);
IkReal x102=((81018.2359690452)*px);
IkReal x103=((7963.05144131231)*px);
IkReal x104=(pz*r02);
IkReal x105=(px*r00);
IkReal x106=((36031.9069742639)*x43);
IkReal x107=((36031.9069742639)*x44);
IkReal x108=((36031.9069742639)*x45);
IkReal x109=((3981.52572065616)*x105);
IkReal x110=((3981.52572065616)*x98);
IkReal x111=(r02*x94);
IkReal x112=((23780.4847486596)*x105);
IkReal x113=((11606.6711633377)*x44);
IkReal x114=((23780.4847486596)*x98);
IkReal x115=((11606.6711633377)*x45);
IkReal x116=((11606.6711633377)*x43);
IkReal x117=((23780.4847486596)*x104);
IkReal x118=((1231.68648622457)*x93);
IkReal x119=((23.6376276047779)*x95);
IkReal x120=((1.16163751478955)*x89);
IkReal x121=((1.16163751478955)*x84);
IkReal x122=((23.6376276047779)*x92);
IkReal x123=((1231.68648622457)*x97);
IkReal x124=(r01*x94);
IkReal x125=((3981.52572065616)*x92);
IkReal x126=((23.6376276047779)*x105);
IkReal x127=((23.6376276047779)*x98);
IkReal x128=((23.6376276047779)*x104);
IkReal x129=((39723.6810246442)*x95);
IkReal x130=((39723.6810246442)*x92);
IkReal x131=((20.3485401459854)*x105);
IkReal x132=((20.3485401459854)*x104);
IkReal x133=((20.3485401459854)*x98);
IkReal x134=((1060.3019190954)*x93);
IkReal x135=((20.3485401459854)*x92);
IkReal x136=((21575.5961675781)*x105);
IkReal x137=((1060.3019190954)*x97);
IkReal x138=((21575.5961675781)*x104);
IkReal x139=((21575.5961675781)*x98);
IkReal x140=((20.3485401459854)*x95);
IkReal x141=(x61+(((-1.0)*x64)));
IkReal x142=(x63+(((-1.0)*x62)));
IkReal x143=(x62+(((-1.0)*x63)));
IkReal x144=(x64+(((-1.0)*x61)));
IkReal x145=((2463.37297244914)*x92);
IkReal x146=((47.2752552095558)*x93);
IkReal x147=((2463.37297244914)*x95);
IkReal x148=((47.2752552095558)*x97);
IkReal x149=((7963.05144131231)*x93);
IkReal x150=((7963.05144131231)*x97);
IkReal x151=((79447.3620492884)*x93);
IkReal x152=((79447.3620492884)*x97);
IkReal x153=((2120.60383819079)*x92);
IkReal x154=((40.6970802919708)*x97);
IkReal x155=((40.6970802919708)*x93);
IkReal x156=((2120.60383819079)*x95);
IkReal x157=((2.32327502957911)*x92);
IkReal x158=((47.2752552095558)*x84);
IkReal x159=((47.2752552095558)*x89);
IkReal x160=((2.32327502957911)*x95);
IkReal x161=((7963.05144131231)*x84);
IkReal x162=((7963.05144131231)*x89);
IkReal x163=(px*x37);
IkReal x164=((79447.3620492884)*x84);
IkReal x165=((79447.3620492884)*x89);
IkReal x166=((40.6970802919708)*x89);
IkReal x167=((2.0)*x92);
IkReal x168=((2.0)*x95);
IkReal x169=((40.6970802919708)*x84);
IkReal x170=((1.0)*x84);
IkReal x171=((5965.04075006289)+x35);
IkReal x172=((5965.04075006289)+x38);
IkReal x173=((2632.5205124663)+x42);
IkReal x174=((2632.5205124663)+x41);
IkReal x175=(r00*x45);
IkReal x176=(r01*x44);
IkReal x177=(r02*x45);
IkReal x178=((40509.1179845226)*x43);
IkReal x179=(r00*x43);
IkReal x180=(r02*x44);
IkReal x181=(r02*x43);
IkReal x182=(r01*x45);
IkReal x183=(r01*x43);
IkReal x184=(r00*x44);
IkReal x185=((-4.05429864253394)+(((-1.0)*x39))+x40);
IkReal x186=((4.05429864253394)+(((-1.0)*x40))+x39);
IkReal x187=((2312.54482160685)*x184);
IkReal x188=((4625.0896432137)*py*x89);
IkReal x189=((47056.9111418576)*x177);
IkReal x190=((4625.0896432137)*pz*x93);
IkReal x191=(x100*x97);
IkReal x192=((94113.8222837152)*py*x95);
IkReal x193=((2312.54482160685)*x179);
IkReal x194=((47056.9111418576)*x180);
IkReal x195=((2312.54482160685)*x175);
IkReal x196=((47056.9111418576)*x181);
IkReal x197=(x44*x91);
IkReal x198=(x45*x91);
IkReal x199=(x43*x91);
IkReal x200=((94113.8222837152)*pz*x92);
IkReal x201=(x100*x84);
IkReal x202=((40509.1179845226)*x176);
IkReal x203=((40509.1179845226)*x182);
IkReal x204=(r01*x178);
IkReal x205=(x102*x84);
IkReal x206=((81018.2359690452)*pz*x92);
IkReal x207=((3981.52572065616)*py*x89);
IkReal x208=((1990.76286032808)*x184);
IkReal x209=(r02*x178);
IkReal x210=((40509.1179845226)*x180);
IkReal x211=(x93*x94);
IkReal x212=((1990.76286032808)*x175);
IkReal x213=(x102*x97);
IkReal x214=((1990.76286032808)*x179);
IkReal x215=((40509.1179845226)*x177);
IkReal x216=((81018.2359690452)*py*x95);
IkReal x217=((94113.8222837152)*x184);
IkReal x218=((188227.64456743)*pz*x93);
IkReal x219=((188227.64456743)*py*x89);
IkReal x220=((94113.8222837152)*x175);
IkReal x221=((94113.8222837152)*x179);
IkReal x222=((9250.1792864274)*px*x84);
IkReal x223=((4625.0896432137)*x183);
IkReal x224=((9250.1792864274)*pz*x92);
IkReal x225=((4625.0896432137)*x182);
IkReal x226=((4625.0896432137)*x176);
IkReal x227=(x101*x44);
IkReal x228=((162036.47193809)*py*x89);
IkReal x229=((162036.47193809)*pz*x93);
IkReal x230=(x101*x43);
IkReal x231=(x101*x45);
IkReal x232=((3981.52572065616)*x183);
IkReal x233=(x103*x84);
IkReal x234=((7963.05144131231)*pz*x92);
IkReal x235=((3981.52572065616)*x176);
IkReal x236=((3981.52572065616)*x182);
IkReal x237=((-4.05429864253394)+(((-1.0)*x40))+x39);
IkReal x238=((4.05429864253394)+(((-1.0)*x39))+x40);
IkReal x239=((9250.1792864274)*px*x97);
IkReal x240=(x45*x99);
IkReal x241=(x95*x96);
IkReal x242=(x44*x99);
IkReal x243=(x43*x99);
IkReal x244=((3981.52572065616)*x177);
IkReal x245=(x103*x97);
IkReal x246=((7963.05144131231)*py*x95);
IkReal x247=((3981.52572065616)*x181);
IkReal x248=((3981.52572065616)*x180);
IkReal x249=(x129+x55);
IkReal x250=(x130+x55);
IkReal x251=(x153+x72);
IkReal x252=(x168+x87);
IkReal x253=(x147+x65+x68);
IkReal x254=(x157+x79+x80);
IkReal x255=(x118+x48+x46);
IkReal x256=(x221+x220);
IkReal x257=(x111+x110+x109);
IkReal x258=(x126+x127+x128);
IkReal x259=(x230+x231+x70);
IkReal x260=(x108+x106+x107+r01);
IkReal x261=(x124+x198+x197);
IkReal x262=(x108+x106+x107+x36);
IkReal x263=(x125+x198+x197);
IkReal x264=(x108+x106+x107+x37);
IkReal x265=(x121+x196+x194);
IkReal x266=(x217+x218+x219);
IkReal x267=(x229+x228+x227);
IkReal x268=((1192.05168825869)+x210+x209+x56+x89);
IkReal x269=((1.12425684306569)+x206+x205+x204);
IkReal x270=((1.12425684306569)+x203+x202+x54+x53);
IkReal x271=(x199+x201+x200+x52);
IkReal x272=(x123+x265);
IkReal x273=(x159+x243+x242+x82+x81);
IkReal x274=(x169+x247+x248+x88+x86);
IkReal x275=(x158+x239+x241+x240);
IkReal x276=(x154+x232+x233+x234);
IkReal x277=(x146+x223+x222+x224);
IkReal x278=(x155+x236+x235+x74+x73);
IkReal x279=(x148+x225+x226+x66+x67);
IkReal x280=(x122+x193+x195+x51+x50);
IkReal x281=(x119+x190+x187+x188);
IkReal x282=(x166+x246+x245+x244);
IkReal x283=((1192.05168825869)+x213+x215+x216+x58+x84);
IkReal x284=(x135+x134+x211+x207+x208);
IkReal x285=(x140+x134+x212+x214+x57+x60);
IkReal x286=(x120+x192+x191+x189+x49+x47);
IkReal x287=((536.739098635255)+x113+x112+x117+x116+x115+x114);
IkReal x288=(x140+x137+x212+x214+x59+x57+x60);
IkReal x289=(x135+x137+x211+x207+x208+x59);
IkReal x290=(x131+x133+x132+x203+x202+x54+x53);
IkReal x291=(x131+x133+x132+x206+x205+x204);
IkReal x292=(x163+x136+x139+x138+x210+x209+x56);
IkReal x293=(x170+x136+x139+x138+x213+x215+x216+x58);
op[0]=((((-1.0)*x35))+(((-1.0)*x37))+x172+x262+(((-1.0)*x257)));
op[1]=x185;
op[2]=((((-1.0)*x75))+x76);
op[3]=0;
op[4]=((((-1.0)*x38))+(((-1.0)*x37))+x171+x262+(((-1.0)*x257)));
op[5]=x185;
op[6]=x186;
op[7]=((((-1.0)*x41))+x173+x257+r01+(((-1.0)*x262)));
op[8]=0;
op[9]=((((-1.0)*x77))+x78);
op[10]=x186;
op[11]=((((-1.0)*x42))+x174+x257+r01+(((-1.0)*x262)));
op[12]=((((-1.0)*x123))+x255+x265+x287+x280+(((-1.0)*x281))+(((-1.0)*x286)));
op[13]=((((-1.0)*x124))+x263+r02+(((-1.0)*x271))+(((-1.0)*x258)));
op[14]=(x160+x256+x275+(((-1.0)*x273))+(((-1.0)*x266))+(((-1.0)*x254)));
op[15]=((((-1.0)*x162))+x161+x61);
op[16]=(x255+x287+x286+x281+(((-1.0)*x272))+(((-1.0)*x280)));
op[17]=((((-1.0)*x125))+x261+(((-1.0)*x271))+(((-1.0)*x83))+(((-1.0)*x258)));
op[18]=((((-1.0)*x291))+(((-1.0)*x129))+x250+x270);
op[19]=((((-1.0)*x292))+x285+x283+(((-1.0)*x289)));
op[20]=((((-1.0)*x165))+x164+x85);
op[21]=((((-1.0)*x167))+x252+x267+x282+(((-1.0)*x274))+(((-1.0)*x259)));
op[22]=((((-1.0)*x291))+x129+x270+(((-1.0)*x250)));
op[23]=((((-1.0)*x293))+x268+x284+(((-1.0)*x288)));
op[24]=x141;
op[25]=x142;
op[26]=((((7808.6547220895)*r01))+(((-141333.117141891)*py)));
op[27]=0;
op[28]=x141;
op[29]=x142;
op[30]=x143;
op[31]=x144;
op[32]=0;
op[33]=((((12194.7625461298)*py))+(((-673.760630673674)*r01)));
op[34]=x143;
op[35]=x144;
op[36]=(x145+x279+(((-1.0)*x277))+(((-1.0)*x253)));
op[37]=((((-1.0)*x149))+x150+x266+x69+(((-1.0)*x256)));
op[38]=((((188227.64456743)*x182))+(((-24727.3564401699)*py))+(((-376455.289134861)*pz*x92))+(((4.64655005915821)*x93))+(((-376455.289134861)*px*x84))+(((-188227.64456743)*x183))+(((-4.64655005915821)*x97))+(((-16627.0864704337)*r01))+(((188227.64456743)*x176)));
op[39]=((4.0)*r01);
op[40]=(x145+x277+(((-1.0)*x279))+(((-1.0)*x253)));
op[41]=((((-1.0)*x150))+x149+x266+x69+(((-1.0)*x256)));
op[42]=((((-1.0)*x151))+(((-1.0)*x71))+x152+x267+(((-1.0)*x259)));
op[43]=((((-1.0)*x156))+x251+x278+(((-1.0)*x276)));
op[44]=((39.9079989045985)*r01);
op[45]=((((-4.0)*x97))+(((-1.0)*x44*x90))+(((324072.943876181)*px*x84))+(((-1.0)*x45*x90))+(((16478.8292118482)*r01))+(((-17905.030149159)*py))+((x43*x90))+(((4.0)*x93))+(((324072.943876181)*pz*x92)));
op[46]=((((-1.0)*x152))+(((-1.0)*x71))+x151+x267+(((-1.0)*x259)));
op[47]=((((-1.0)*x156))+x251+x276+(((-1.0)*x278)));
op[48]=((((-1.0)*x35))+(((-1.0)*x36))+x172+x260+(((-1.0)*x257)));
op[49]=x237;
op[50]=((((-1.0)*x76))+x75);
op[51]=0;
op[52]=((((-1.0)*x38))+(((-1.0)*x36))+x171+x260+(((-1.0)*x257)));
op[53]=x237;
op[54]=x238;
op[55]=((((-1.0)*x41))+x173+x257+x36+(((-1.0)*x264)));
op[56]=0;
op[57]=((((-1.0)*x78))+x77);
op[58]=x238;
op[59]=((((-1.0)*x42))+x174+x257+x36+(((-1.0)*x264)));
op[60]=(x272+x287+x281+(((-1.0)*x280))+(((-1.0)*x286))+(((-1.0)*x255)));
op[61]=(x124+x271+r02+(((-1.0)*x263))+(((-1.0)*x258)));
op[62]=((((-1.0)*x160))+x254+x266+x275+(((-1.0)*x273))+(((-1.0)*x256)));
op[63]=((((-1.0)*x162))+x161+(((-1.0)*x61)));
op[64]=(x123+x287+x286+x280+(((-1.0)*x281))+(((-1.0)*x265))+(((-1.0)*x255)));
op[65]=(x125+x271+(((-1.0)*x261))+(((-1.0)*x83))+(((-1.0)*x258)));
op[66]=((((-1.0)*x290))+(((-1.0)*x130))+x269+x249);
op[67]=((((-1.0)*x292))+x289+x283+(((-1.0)*x285)));
op[68]=((((-1.0)*x165))+x164+(((-1.0)*x85)));
op[69]=(x167+x259+x282+(((-1.0)*x274))+(((-1.0)*x267))+(((-1.0)*x252)));
op[70]=((((-1.0)*x290))+x130+x269+(((-1.0)*x249)));
op[71]=((((-1.0)*x293))+x268+x288+(((-1.0)*x284)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj1 = zeror[ij0+1], htj2 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj1)||isnan(htj2)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x294=htj0*htj0;
CheckValue<IkReal> x295=IKPowWithIntegerCheck(((1.0)+x294),-1);
if(!x295.valid){
continue;
}
cj0array[numsolutions]=((x295.value)*(((1.0)+(((-1.0)*x294)))));
CheckValue<IkReal> x296=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x296.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x296.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x297=htj1*htj1;
CheckValue<IkReal> x298=IKPowWithIntegerCheck(((1.0)+x297),-1);
if(!x298.valid){
continue;
}
cj1array[numsolutions]=((x298.value)*(((1.0)+(((-1.0)*x297)))));
CheckValue<IkReal> x299=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x299.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x299.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x300=htj2*htj2;
CheckValue<IkReal> x301=IKPowWithIntegerCheck(((1.0)+x300),-1);
if(!x301.valid){
continue;
}
cj2array[numsolutions]=((x301.value)*(((1.0)+(((-1.0)*x300)))));
CheckValue<IkReal> x302=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x302.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x302.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj1 = 1;
_nj2 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij0]-cj2array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij0]-sj2array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij1[1] = 0; _ij2[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

    j2 = j2array[ij0]; cj2 = cj2array[ij0]; sj2 = sj2array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[2];
IkReal x303=sj2*sj2;
j3eval[0]=x303;
j3eval[1]=IKsign(x303);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x304=cj2*cj2;
j3eval[0]=x304;
j3eval[1]=IKsign(x304);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j4eval[0]=((((-1.0)*(cj2*cj2)))+(((-1.0)*(sj2*sj2))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x305=(pz*sj1);
IkReal x306=(cj1*sj0);
IkReal x307=((3.57847987692738)*py);
IkReal x308=((0.197711013200238)*r01);
IkReal x309=(r00*sj0);
IkReal x310=(cj0*cj1);
IkReal x311=((3.57847987692738)*px);
IkReal x312=((0.175859292669375)*px);
IkReal x313=(r02*sj1);
IkReal x314=((0.175859292669375)*py);
IkReal x315=((0.00971622591998298)*r01);
if( IKabs(((0.0393483127379932)+(((-1.0)*cj0*x314))+((x310*x311))+(((0.197711013200238)*x313))+((sj0*x312))+(((-1.0)*x306*x308))+(((-0.197711013200238)*r00*x310))+((cj0*x315))+(((-0.00971622591998298)*x309))+(((-3.57847987692738)*x305))+((x306*x307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800680721425843)+((x310*x312))+(((-1.0)*cj0*x308))+(((-1.0)*x306*x315))+((cj0*x307))+((x306*x314))+(((-0.00971622591998298)*r00*x310))+(((-0.175859292669375)*x305))+(((0.00971622591998298)*x313))+(((-1.0)*sj0*x311))+(((0.197711013200238)*x309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0393483127379932)+(((-1.0)*cj0*x314))+((x310*x311))+(((0.197711013200238)*x313))+((sj0*x312))+(((-1.0)*x306*x308))+(((-0.197711013200238)*r00*x310))+((cj0*x315))+(((-0.00971622591998298)*x309))+(((-3.57847987692738)*x305))+((x306*x307))))+IKsqr(((-0.800680721425843)+((x310*x312))+(((-1.0)*cj0*x308))+(((-1.0)*x306*x315))+((cj0*x307))+((x306*x314))+(((-0.00971622591998298)*r00*x310))+(((-0.175859292669375)*x305))+(((0.00971622591998298)*x313))+(((-1.0)*sj0*x311))+(((0.197711013200238)*x309))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0393483127379932)+(((-1.0)*cj0*x314))+((x310*x311))+(((0.197711013200238)*x313))+((sj0*x312))+(((-1.0)*x306*x308))+(((-0.197711013200238)*r00*x310))+((cj0*x315))+(((-0.00971622591998298)*x309))+(((-3.57847987692738)*x305))+((x306*x307))), ((-0.800680721425843)+((x310*x312))+(((-1.0)*cj0*x308))+(((-1.0)*x306*x315))+((cj0*x307))+((x306*x314))+(((-0.00971622591998298)*r00*x310))+(((-0.175859292669375)*x305))+(((0.00971622591998298)*x313))+(((-1.0)*sj0*x311))+(((0.197711013200238)*x309))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x316=IKsin(j3);
IkReal x317=IKcos(j3);
IkReal x318=((0.05525)*r01);
IkReal x319=(cj1*sj0);
IkReal x320=((0.05525)*r00);
IkReal x321=(cj0*cj1);
IkReal x322=((1.0)*px);
evalcond[0]=((-0.22374884)+(((-1.0)*cj0*x318))+(((-1.0)*sj0*x322))+(((0.0137)*x316))+(((-0.278775)*x317))+((sj0*x320))+((cj0*py)));
evalcond[1]=((((0.0137)*x317))+(((-1.0)*x321*x322))+((x320*x321))+(((-1.0)*py*x319))+(((-0.05525)*r02*sj1))+(((0.278775)*x316))+((pz*sj1))+((x318*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x323=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x323))+(((-1.0)*r01*sj0*x323))+((r02*sj1)));
evalcond[2]=((0.278775)+(((-1.0)*cj0*px*x323))+((pz*sj1))+(((-1.0)*py*sj0*x323)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))+IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))), ((((-1.0)*r00*sj0))+((cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x324=IKcos(j4);
IkReal x325=IKsin(j4);
IkReal x326=(sj0*sj1);
IkReal x327=(cj0*sj1);
IkReal x328=((1.0)*sj0);
evalcond[0]=((((-1.0)*x324))+(((-1.0)*r00*x328))+((cj0*r01)));
evalcond[1]=((-0.21004884)+(((-0.05525)*x324))+(((-1.0)*px*x328))+((cj0*py)));
evalcond[2]=(((r00*x327))+((cj1*r02))+((r01*x326))+(((-1.0)*x325)));
evalcond[3]=((-0.26630543)+(((-0.05525)*x325))+((cj1*pz))+((py*x326))+((px*x327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x329=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x329))+(((-1.0)*r01*sj0*x329))+((r02*sj1)));
evalcond[2]=((-0.278775)+(((-1.0)*cj0*px*x329))+((pz*sj1))+(((-1.0)*py*sj0*x329)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))+IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))), (((r00*sj0))+(((-1.0)*cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x330=IKcos(j4);
IkReal x331=IKsin(j4);
IkReal x332=(sj0*sj1);
IkReal x333=(cj0*sj1);
IkReal x334=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x334))+x330+((cj0*r01)));
evalcond[1]=((-0.23744884)+(((-1.0)*px*x334))+(((0.05525)*x330))+((cj0*py)));
evalcond[2]=(((r01*x332))+((r00*x333))+((cj1*r02))+(((-1.0)*x331)));
evalcond[3]=((-0.26630543)+(((-0.05525)*x331))+((px*x333))+((cj1*pz))+((py*x332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x335=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x335))+((cj0*r01)));
evalcond[2]=((-0.50252384)+(((-1.0)*px*x335))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x336=((1.0)*cj1);
IkReal x337=(cj0*r00);
IkReal x338=(r01*sj0);
if( IKabs((((cj1*r02))+((sj1*x337))+((sj1*x338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*x336*x337))+(((-1.0)*x336*x338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x337))+((sj1*x338))))+IKsqr((((r02*sj1))+(((-1.0)*x336*x337))+(((-1.0)*x336*x338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x337))+((sj1*x338))), (((r02*sj1))+(((-1.0)*x336*x337))+(((-1.0)*x336*x338))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x339=IKsin(j4);
IkReal x340=IKcos(j4);
IkReal x341=(sj0*sj1);
IkReal x342=(cj0*sj1);
IkReal x343=((1.0)*cj0*cj1);
IkReal x344=((1.0)*cj1*sj0);
evalcond[0]=(((r01*x341))+((r00*x342))+((cj1*r02))+(((-1.0)*x339)));
evalcond[1]=((-0.26630543)+(((-0.05525)*x339))+((py*x341))+((cj1*pz))+((px*x342)));
evalcond[2]=(((r02*sj1))+(((-1.0)*r01*x344))+(((-1.0)*r00*x343))+(((-1.0)*x340)));
evalcond[3]=((0.0137)+(((-1.0)*px*x343))+(((-0.05525)*x340))+((pz*sj1))+(((-1.0)*py*x344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x345=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x345))+((cj0*r01)));
evalcond[2]=((0.05502616)+(((-1.0)*px*x345))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x346=(r01*sj0);
IkReal x347=(cj0*r00);
if( IKabs((((cj1*r02))+((sj1*x347))+((sj1*x346)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x346))+((cj1*x347))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x347))+((sj1*x346))))+IKsqr((((cj1*x346))+((cj1*x347))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x347))+((sj1*x346))), (((cj1*x346))+((cj1*x347))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x348=IKsin(j4);
IkReal x349=IKcos(j4);
IkReal x350=(cj0*r00);
IkReal x351=(r01*sj0);
IkReal x352=((1.0)*cj1);
IkReal x353=(py*sj0);
IkReal x354=(cj0*px);
evalcond[0]=(((r02*sj1))+x349+(((-1.0)*x351*x352))+(((-1.0)*x350*x352)));
evalcond[1]=(((cj1*r02))+((sj1*x350))+((sj1*x351))+(((-1.0)*x348)));
evalcond[2]=((-0.26630543)+(((-0.05525)*x348))+((cj1*pz))+((sj1*x354))+((sj1*x353)));
evalcond[3]=((-0.0137)+(((0.05525)*x349))+((pz*sj1))+(((-1.0)*x352*x353))+(((-1.0)*x352*x354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x355=((1.0)*cj1);
IkReal x356=(cj0*r00);
IkReal x357=(r01*sj0);
CheckValue<IkReal> x358=IKPowWithIntegerCheck(cj3,-1);
if(!x358.valid){
continue;
}
if( IKabs((((cj1*r02))+((sj1*x356))+((sj1*x357)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x358.value)*((((r02*sj1))+(((-1.0)*x355*x356))+(((-1.0)*x355*x357)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x356))+((sj1*x357))))+IKsqr(((x358.value)*((((r02*sj1))+(((-1.0)*x355*x356))+(((-1.0)*x355*x357))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x356))+((sj1*x357))), ((x358.value)*((((r02*sj1))+(((-1.0)*x355*x356))+(((-1.0)*x355*x357))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x359=IKsin(j4);
IkReal x360=IKcos(j4);
IkReal x361=(cj0*px);
IkReal x362=(sj0*sj1);
IkReal x363=((1.0)*cj1);
IkReal x364=((1.0)*sj0);
IkReal x365=(cj0*r00);
IkReal x366=((1.0)*x360);
IkReal x367=((0.05525)*x360);
evalcond[0]=((((-1.0)*r00*x364))+(((-1.0)*sj3*x366))+((cj0*r01)));
evalcond[1]=(((r01*x362))+((sj1*x365))+((cj1*r02))+(((-1.0)*x359)));
evalcond[2]=((-0.26630543)+((sj1*x361))+(((-0.05525)*x359))+((cj1*pz))+((py*x362)));
evalcond[3]=((((-1.0)*x363*x365))+((r02*sj1))+(((-1.0)*cj3*x366))+(((-1.0)*r01*sj0*x363)));
evalcond[4]=((-0.22374884)+(((-1.0)*sj3*x367))+(((-0.278775)*cj3))+(((0.0137)*sj3))+((cj0*py))+(((-1.0)*px*x364)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*x361*x363))+(((-1.0)*py*sj0*x363))+((pz*sj1))+(((-1.0)*cj3*x367))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x368=IKPowWithIntegerCheck(sj3,-1);
if(!x368.valid){
continue;
}
if( IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x368.value)*(((((-1.0)*r00*sj0))+((cj0*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))+IKsqr(((x368.value)*(((((-1.0)*r00*sj0))+((cj0*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))), ((x368.value)*(((((-1.0)*r00*sj0))+((cj0*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x369=IKsin(j4);
IkReal x370=IKcos(j4);
IkReal x371=(cj0*px);
IkReal x372=(sj0*sj1);
IkReal x373=((1.0)*cj1);
IkReal x374=((1.0)*sj0);
IkReal x375=(cj0*r00);
IkReal x376=((1.0)*x370);
IkReal x377=((0.05525)*x370);
evalcond[0]=((((-1.0)*r00*x374))+(((-1.0)*sj3*x376))+((cj0*r01)));
evalcond[1]=((((-1.0)*x369))+((sj1*x375))+((r01*x372))+((cj1*r02)));
evalcond[2]=((-0.26630543)+((sj1*x371))+((cj1*pz))+(((-0.05525)*x369))+((py*x372)));
evalcond[3]=((((-1.0)*r01*sj0*x373))+((r02*sj1))+(((-1.0)*x373*x375))+(((-1.0)*cj3*x376)));
evalcond[4]=((-0.22374884)+(((-1.0)*sj3*x377))+(((-0.278775)*cj3))+(((0.0137)*sj3))+((cj0*py))+(((-1.0)*px*x374)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*py*sj0*x373))+(((-1.0)*x371*x373))+((pz*sj1))+(((-1.0)*cj3*x377))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x378=(pz*sj1);
IkReal x379=(cj1*sj0);
IkReal x380=((3.57847987692738)*py);
IkReal x381=((0.197711013200238)*r01);
IkReal x382=(r00*sj0);
IkReal x383=(cj0*cj1);
IkReal x384=((3.57847987692738)*px);
IkReal x385=((0.175859292669375)*px);
IkReal x386=(r02*sj1);
IkReal x387=((0.175859292669375)*py);
IkReal x388=((0.00971622591998298)*r01);
if( IKabs(((0.0394366503778869)+(((0.00971622591998298)*x382))+(((-0.197711013200238)*r00*x383))+(((-1.0)*x379*x381))+((x383*x384))+(((-3.57847987692738)*x378))+(((-1.0)*cj0*x388))+((x379*x380))+((cj0*x387))+(((-1.0)*sj0*x385))+(((0.197711013200238)*x386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.802478263437622)+(((0.00971622591998298)*x386))+(((-1.0)*x379*x388))+((x383*x385))+(((-0.00971622591998298)*r00*x383))+(((-0.175859292669375)*x378))+(((-1.0)*cj0*x380))+((x379*x387))+(((-0.197711013200238)*x382))+((cj0*x381))+((sj0*x384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0394366503778869)+(((0.00971622591998298)*x382))+(((-0.197711013200238)*r00*x383))+(((-1.0)*x379*x381))+((x383*x384))+(((-3.57847987692738)*x378))+(((-1.0)*cj0*x388))+((x379*x380))+((cj0*x387))+(((-1.0)*sj0*x385))+(((0.197711013200238)*x386))))+IKsqr(((-0.802478263437622)+(((0.00971622591998298)*x386))+(((-1.0)*x379*x388))+((x383*x385))+(((-0.00971622591998298)*r00*x383))+(((-0.175859292669375)*x378))+(((-1.0)*cj0*x380))+((x379*x387))+(((-0.197711013200238)*x382))+((cj0*x381))+((sj0*x384))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0394366503778869)+(((0.00971622591998298)*x382))+(((-0.197711013200238)*r00*x383))+(((-1.0)*x379*x381))+((x383*x384))+(((-3.57847987692738)*x378))+(((-1.0)*cj0*x388))+((x379*x380))+((cj0*x387))+(((-1.0)*sj0*x385))+(((0.197711013200238)*x386))), ((-0.802478263437622)+(((0.00971622591998298)*x386))+(((-1.0)*x379*x388))+((x383*x385))+(((-0.00971622591998298)*r00*x383))+(((-0.175859292669375)*x378))+(((-1.0)*cj0*x380))+((x379*x387))+(((-0.197711013200238)*x382))+((cj0*x381))+((sj0*x384))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x389=IKsin(j3);
IkReal x390=IKcos(j3);
IkReal x391=((0.05525)*r01);
IkReal x392=(cj1*sj0);
IkReal x393=((0.05525)*r00);
IkReal x394=(cj0*cj1);
IkReal x395=((1.0)*py);
evalcond[0]=((-0.22425116)+(((-1.0)*cj0*x395))+(((-1.0)*sj0*x393))+((cj0*x391))+(((0.0137)*x389))+(((-0.278775)*x390))+((px*sj0)));
evalcond[1]=((((-0.05525)*r02*sj1))+((x391*x392))+(((0.278775)*x389))+((pz*sj1))+(((-1.0)*px*x394))+(((0.0137)*x390))+(((-1.0)*x392*x395))+((x393*x394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x396=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x396))+((r02*sj1))+(((-1.0)*r01*sj0*x396)));
evalcond[2]=((0.278775)+(((-1.0)*py*sj0*x396))+(((-1.0)*cj0*px*x396))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x397=((1.0)*sj1);
if( IKabs(((((-1.0)*cj0*r00*x397))+(((-1.0)*cj1*r02))+(((-1.0)*r01*sj0*x397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r00*x397))+(((-1.0)*cj1*r02))+(((-1.0)*r01*sj0*x397))))+IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*r00*x397))+(((-1.0)*cj1*r02))+(((-1.0)*r01*sj0*x397))), (((r00*sj0))+(((-1.0)*cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x398=IKcos(j4);
IkReal x399=IKsin(j4);
IkReal x400=(sj0*sj1);
IkReal x401=(cj0*sj1);
IkReal x402=((1.0)*sj0);
evalcond[0]=(x398+(((-1.0)*r00*x402))+((cj0*r01)));
evalcond[1]=((0.21055116)+(((-1.0)*px*x402))+((cj0*py))+(((0.05525)*x398)));
evalcond[2]=(((cj1*r02))+x399+((r00*x401))+((r01*x400)));
evalcond[3]=((-0.26630543)+((py*x400))+((px*x401))+((cj1*pz))+(((0.05525)*x399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x403=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r01*sj0*x403))+((r02*sj1))+(((-1.0)*cj0*r00*x403)));
evalcond[2]=((-0.278775)+(((-1.0)*py*sj0*x403))+((pz*sj1))+(((-1.0)*cj0*px*x403)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x404=((1.0)*sj1);
if( IKabs(((((-1.0)*r01*sj0*x404))+(((-1.0)*cj0*r00*x404))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0*x404))+(((-1.0)*cj0*r00*x404))+(((-1.0)*cj1*r02))))+IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0*x404))+(((-1.0)*cj0*r00*x404))+(((-1.0)*cj1*r02))), ((((-1.0)*r00*sj0))+((cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x405=IKcos(j4);
IkReal x406=IKsin(j4);
IkReal x407=(sj0*sj1);
IkReal x408=(cj0*sj1);
IkReal x409=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x409))+(((-1.0)*x405))+((cj0*r01)));
evalcond[1]=((0.23795116)+(((-0.05525)*x405))+(((-1.0)*px*x409))+((cj0*py)));
evalcond[2]=(((cj1*r02))+((r00*x408))+((r01*x407))+x406);
evalcond[3]=((-0.26630543)+(((0.05525)*x406))+((py*x407))+((px*x408))+((cj1*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x410=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x410))+((cj0*r01)));
evalcond[2]=((0.50302616)+(((-1.0)*px*x410))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x411=((1.0)*cj1);
IkReal x412=(r01*sj0);
IkReal x413=((1.0)*sj1);
IkReal x414=(cj0*r00);
if( IKabs(((((-1.0)*x412*x413))+(((-1.0)*r02*x411))+(((-1.0)*x413*x414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*x411*x414))+(((-1.0)*x411*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x412*x413))+(((-1.0)*r02*x411))+(((-1.0)*x413*x414))))+IKsqr((((r02*sj1))+(((-1.0)*x411*x414))+(((-1.0)*x411*x412))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x412*x413))+(((-1.0)*r02*x411))+(((-1.0)*x413*x414))), (((r02*sj1))+(((-1.0)*x411*x414))+(((-1.0)*x411*x412))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x415=IKsin(j4);
IkReal x416=IKcos(j4);
IkReal x417=(r01*sj0);
IkReal x418=(cj0*sj1);
IkReal x419=((1.0)*cj1);
IkReal x420=(py*sj0);
evalcond[0]=(((sj1*x417))+((cj1*r02))+((r00*x418))+x415);
evalcond[1]=((-0.26630543)+(((0.05525)*x415))+((cj1*pz))+((px*x418))+((sj1*x420)));
evalcond[2]=((((-1.0)*x417*x419))+((r02*sj1))+(((-1.0)*cj0*r00*x419))+(((-1.0)*x416)));
evalcond[3]=((0.0137)+(((-1.0)*cj0*px*x419))+(((-0.05525)*x416))+(((-1.0)*x419*x420))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x421=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x421))+((cj0*r01)));
evalcond[2]=((-0.05452384)+(((-1.0)*px*x421))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x422=((1.0)*r02);
IkReal x423=((1.0)*sj1);
IkReal x424=(cj0*r00);
IkReal x425=(r01*sj0);
if( IKabs(((((-1.0)*cj1*x422))+(((-1.0)*x423*x424))+(((-1.0)*x423*x425)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x422))+((cj1*x425))+((cj1*x424)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x422))+(((-1.0)*x423*x424))+(((-1.0)*x423*x425))))+IKsqr(((((-1.0)*sj1*x422))+((cj1*x425))+((cj1*x424))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*x422))+(((-1.0)*x423*x424))+(((-1.0)*x423*x425))), ((((-1.0)*sj1*x422))+((cj1*x425))+((cj1*x424))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x426=IKsin(j4);
IkReal x427=IKcos(j4);
IkReal x428=((1.0)*cj1);
IkReal x429=(cj0*r00);
IkReal x430=(r01*sj0);
IkReal x431=(py*sj0);
IkReal x432=(cj0*px);
evalcond[0]=(((cj1*r02))+x426+((sj1*x429))+((sj1*x430)));
evalcond[1]=(((r02*sj1))+x427+(((-1.0)*x428*x429))+(((-1.0)*x428*x430)));
evalcond[2]=((-0.26630543)+(((0.05525)*x426))+((cj1*pz))+((sj1*x432))+((sj1*x431)));
evalcond[3]=((-0.0137)+(((0.05525)*x427))+((pz*sj1))+(((-1.0)*x428*x432))+(((-1.0)*x428*x431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x433=((1.0)*cj1);
IkReal x434=(r01*sj0);
IkReal x435=((1.0)*sj1);
IkReal x436=(cj0*r00);
CheckValue<IkReal> x437=IKPowWithIntegerCheck(cj3,-1);
if(!x437.valid){
continue;
}
if( IKabs(((((-1.0)*x435*x436))+(((-1.0)*x434*x435))+(((-1.0)*r02*x433)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x437.value)*(((((-1.0)*x433*x434))+(((-1.0)*x433*x436))+((r02*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x435*x436))+(((-1.0)*x434*x435))+(((-1.0)*r02*x433))))+IKsqr(((x437.value)*(((((-1.0)*x433*x434))+(((-1.0)*x433*x436))+((r02*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x435*x436))+(((-1.0)*x434*x435))+(((-1.0)*r02*x433))), ((x437.value)*(((((-1.0)*x433*x434))+(((-1.0)*x433*x436))+((r02*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x438=IKsin(j4);
IkReal x439=IKcos(j4);
IkReal x440=(cj0*px);
IkReal x441=(sj0*sj1);
IkReal x442=((1.0)*cj1);
IkReal x443=((1.0)*sj0);
IkReal x444=(cj0*r00);
IkReal x445=(cj3*x439);
IkReal x446=(sj3*x439);
evalcond[0]=(x446+(((-1.0)*r00*x443))+((cj0*r01)));
evalcond[1]=(((sj1*x444))+((cj1*r02))+x438+((r01*x441)));
evalcond[2]=((-0.26630543)+((sj1*x440))+((py*x441))+((cj1*pz))+(((0.05525)*x438)));
evalcond[3]=((((-1.0)*r01*sj0*x442))+(((-1.0)*x445))+((r02*sj1))+(((-1.0)*x442*x444)));
evalcond[4]=((0.22425116)+(((0.278775)*cj3))+(((-0.0137)*sj3))+((cj0*py))+(((-1.0)*px*x443))+(((0.05525)*x446)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*py*sj0*x442))+(((-0.05525)*x445))+((pz*sj1))+(((-1.0)*x440*x442))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x447=((1.0)*cj0);
CheckValue<IkReal> x448=IKPowWithIntegerCheck(sj3,-1);
if(!x448.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj1*x447))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x448.value)*((((r00*sj0))+(((-1.0)*r01*x447)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj1*x447))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02))))+IKsqr(((x448.value)*((((r00*sj0))+(((-1.0)*r01*x447))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj1*x447))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02))), ((x448.value)*((((r00*sj0))+(((-1.0)*r01*x447))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x449=IKsin(j4);
IkReal x450=IKcos(j4);
IkReal x451=(cj0*px);
IkReal x452=(sj0*sj1);
IkReal x453=((1.0)*cj1);
IkReal x454=((1.0)*sj0);
IkReal x455=(cj0*r00);
IkReal x456=(cj3*x450);
IkReal x457=(sj3*x450);
evalcond[0]=((((-1.0)*r00*x454))+x457+((cj0*r01)));
evalcond[1]=(((cj1*r02))+x449+((sj1*x455))+((r01*x452)));
evalcond[2]=((-0.26630543)+((cj1*pz))+((sj1*x451))+((py*x452))+(((0.05525)*x449)));
evalcond[3]=((((-1.0)*x456))+((r02*sj1))+(((-1.0)*x453*x455))+(((-1.0)*r01*sj0*x453)));
evalcond[4]=((0.22425116)+(((0.278775)*cj3))+(((-0.0137)*sj3))+(((0.05525)*x457))+((cj0*py))+(((-1.0)*px*x454)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*py*sj0*x453))+(((-0.05525)*x456))+(((-1.0)*x451*x453))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x458=(r01*sj0);
IkReal x459=((0.00971622591998298)*sj1);
IkReal x460=((0.197711013200238)*cj1);
IkReal x461=(cj0*r00);
IkReal x462=((3.57847987692738)*sj1);
IkReal x463=((0.00971622591998298)*cj1);
IkReal x464=(py*sj0);
IkReal x465=((0.175859292669375)*sj1);
IkReal x466=((0.197711013200238)*sj1);
IkReal x467=((3.57847987692738)*cj1);
IkReal x468=((0.175859292669375)*cj1);
IkReal x469=(cj0*px);
IkReal x470=(cj1*x469);
if( IKabs(((0.0862247661117539)+(((-1.0)*x465*x469))+(((-1.0)*x460*x461))+(((-1.0)*x464*x465))+(((-1.0)*pz*x462))+(((-1.0)*pz*x468))+((x467*x469))+((r02*x466))+((r02*x463))+(((-1.0)*x458*x460))+((x459*x461))+((x458*x459))+((x464*x467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.75454811480322)+((x468*x469))+(((-1.0)*pz*x465))+((r02*x459))+(((-1.0)*r02*x460))+(((-1.0)*x461*x463))+(((-1.0)*x461*x466))+(((-1.0)*x458*x463))+(((-1.0)*x458*x466))+((pz*x467))+((x464*x468))+((x462*x464))+((x462*x469)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0862247661117539)+(((-1.0)*x465*x469))+(((-1.0)*x460*x461))+(((-1.0)*x464*x465))+(((-1.0)*pz*x462))+(((-1.0)*pz*x468))+((x467*x469))+((r02*x466))+((r02*x463))+(((-1.0)*x458*x460))+((x459*x461))+((x458*x459))+((x464*x467))))+IKsqr(((-1.75454811480322)+((x468*x469))+(((-1.0)*pz*x465))+((r02*x459))+(((-1.0)*r02*x460))+(((-1.0)*x461*x463))+(((-1.0)*x461*x466))+(((-1.0)*x458*x463))+(((-1.0)*x458*x466))+((pz*x467))+((x464*x468))+((x462*x464))+((x462*x469))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0862247661117539)+(((-1.0)*x465*x469))+(((-1.0)*x460*x461))+(((-1.0)*x464*x465))+(((-1.0)*pz*x462))+(((-1.0)*pz*x468))+((x467*x469))+((r02*x466))+((r02*x463))+(((-1.0)*x458*x460))+((x459*x461))+((x458*x459))+((x464*x467))), ((-1.75454811480322)+((x468*x469))+(((-1.0)*pz*x465))+((r02*x459))+(((-1.0)*r02*x460))+(((-1.0)*x461*x463))+(((-1.0)*x461*x466))+(((-1.0)*x458*x463))+(((-1.0)*x458*x466))+((pz*x467))+((x464*x468))+((x462*x464))+((x462*x469))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x471=IKsin(j3);
IkReal x472=IKcos(j3);
IkReal x473=((0.05525)*cj1);
IkReal x474=(r01*sj0);
IkReal x475=(cj0*px);
IkReal x476=((1.0)*cj1);
IkReal x477=(py*sj0);
IkReal x478=(cj0*r00);
IkReal x479=((0.05525)*sj1);
evalcond[0]=((-0.49030543)+(((0.0137)*x471))+(((-1.0)*x478*x479))+((cj1*pz))+((sj1*x477))+((sj1*x475))+(((-1.0)*x474*x479))+(((-1.0)*r02*x473))+(((-0.278775)*x472)));
evalcond[1]=(((x473*x478))+((x473*x474))+(((0.0137)*x472))+(((-1.0)*x475*x476))+(((-1.0)*x476*x477))+((pz*sj1))+(((0.278775)*x471))+(((-1.0)*r02*x479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x480=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x480))+((r02*sj1))+(((-1.0)*r01*sj0*x480)));
evalcond[2]=((0.278775)+(((-1.0)*py*sj0*x480))+(((-1.0)*cj0*px*x480))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), (((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x481=IKsin(j4);
IkReal x482=IKcos(j4);
IkReal x483=(sj0*sj1);
IkReal x484=(cj0*sj1);
IkReal x485=((1.0)*sj0);
evalcond[0]=(x481+((cj0*r01))+(((-1.0)*r00*x485)));
evalcond[1]=((0.00025116)+(((0.05525)*x481))+(((-1.0)*px*x485))+((cj0*py)));
evalcond[2]=(((cj1*r02))+(((-1.0)*x482))+((r01*x483))+((r00*x484)));
evalcond[3]=((-0.47660543)+((py*x483))+(((-0.05525)*x482))+((px*x484))+((cj1*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x486=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x486))+((r02*sj1))+(((-1.0)*r01*sj0*x486)));
evalcond[2]=((-0.278775)+(((-1.0)*py*sj0*x486))+(((-1.0)*cj0*px*x486))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x487=((1.0)*sj1);
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r00*x487))+(((-1.0)*r01*sj0*x487))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr(((((-1.0)*cj0*r00*x487))+(((-1.0)*r01*sj0*x487))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), ((((-1.0)*cj0*r00*x487))+(((-1.0)*r01*sj0*x487))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x488=IKsin(j4);
IkReal x489=IKcos(j4);
IkReal x490=(sj0*sj1);
IkReal x491=(cj0*sj1);
IkReal x492=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x492))+x488+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x488))+(((-1.0)*px*x492))+((cj0*py)));
evalcond[2]=(((cj1*r02))+x489+((r00*x491))+((r01*x490)));
evalcond[3]=((-0.50400543)+(((0.05525)*x489))+((py*x490))+((cj1*pz))+((px*x491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x493=(sj0*sj1);
IkReal x494=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((cj1*r02))+((r00*x494))+((r01*x493)));
evalcond[2]=((-0.76908043)+((py*x493))+((cj1*pz))+((px*x494)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x495=((1.0)*cj0);
if( IKabs((((r00*sj0))+(((-1.0)*r01*x495)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r00*x495))+((r02*sj1))+(((-1.0)*cj1*r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*r01*x495))))+IKsqr(((((-1.0)*cj1*r00*x495))+((r02*sj1))+(((-1.0)*cj1*r01*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*r01*x495))), ((((-1.0)*cj1*r00*x495))+((r02*sj1))+(((-1.0)*cj1*r01*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x496=IKsin(j4);
IkReal x497=IKcos(j4);
IkReal x498=((1.0)*cj1);
IkReal x499=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x499))+x496+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x499))+(((0.05525)*x496))+((cj0*py)));
evalcond[2]=(((r02*sj1))+(((-1.0)*x497))+(((-1.0)*r01*sj0*x498))+(((-1.0)*cj0*r00*x498)));
evalcond[3]=((0.0137)+(((-0.05525)*x497))+(((-1.0)*py*sj0*x498))+(((-1.0)*cj0*px*x498))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x500=(sj0*sj1);
IkReal x501=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj1*r02))+((r01*x500))+((r00*x501)));
evalcond[2]=((-0.21153043)+((cj1*pz))+((px*x501))+((py*x500)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), (((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x502=IKsin(j4);
IkReal x503=IKcos(j4);
IkReal x504=((1.0)*cj1);
IkReal x505=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x505))+x502+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x502))+((cj0*py))+(((-1.0)*px*x505)));
evalcond[2]=(((r02*sj1))+x503+(((-1.0)*r01*sj0*x504))+(((-1.0)*cj0*r00*x504)));
evalcond[3]=((-0.0137)+(((0.05525)*x503))+(((-1.0)*cj0*px*x504))+(((-1.0)*py*sj0*x504))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x506=((1.0)*r01);
CheckValue<IkReal> x507=IKPowWithIntegerCheck(cj3,-1);
if(!x507.valid){
continue;
}
if( IKabs((((r00*sj0))+(((-1.0)*cj0*x506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x507.value)*(((((-1.0)*cj0*cj1*r00))+((r02*sj1))+(((-1.0)*cj1*sj0*x506)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*x506))))+IKsqr(((x507.value)*(((((-1.0)*cj0*cj1*r00))+((r02*sj1))+(((-1.0)*cj1*sj0*x506))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*x506))), ((x507.value)*(((((-1.0)*cj0*cj1*r00))+((r02*sj1))+(((-1.0)*cj1*sj0*x506))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x508=IKsin(j4);
IkReal x509=IKcos(j4);
IkReal x510=(cj0*px);
IkReal x511=(sj0*sj1);
IkReal x512=((1.0)*cj1);
IkReal x513=((1.0)*sj0);
IkReal x514=(cj0*r00);
IkReal x515=((1.0)*x509);
IkReal x516=((0.05525)*x509);
evalcond[0]=((((-1.0)*r00*x513))+x508+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x508))+(((-1.0)*px*x513))+((cj0*py)));
evalcond[2]=(((r01*x511))+((cj1*r02))+(((-1.0)*sj3*x515))+((sj1*x514)));
evalcond[3]=((((-1.0)*r01*sj0*x512))+(((-1.0)*cj3*x515))+((r02*sj1))+(((-1.0)*x512*x514)));
evalcond[4]=((-0.49030543)+(((-1.0)*sj3*x516))+((py*x511))+((cj1*pz))+(((-0.278775)*cj3))+(((0.0137)*sj3))+((sj1*x510)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*cj3*x516))+(((-1.0)*py*sj0*x512))+((pz*sj1))+(((-1.0)*x510*x512))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x517=IKPowWithIntegerCheck(sj3,-1);
if(!x517.valid){
continue;
}
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x517.value)*((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr(((x517.value)*((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), ((x517.value)*((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x518=IKsin(j4);
IkReal x519=IKcos(j4);
IkReal x520=(cj0*px);
IkReal x521=(sj0*sj1);
IkReal x522=((1.0)*cj1);
IkReal x523=((1.0)*sj0);
IkReal x524=(cj0*r00);
IkReal x525=((1.0)*x519);
IkReal x526=((0.05525)*x519);
evalcond[0]=((((-1.0)*r00*x523))+x518+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x523))+(((0.05525)*x518))+((cj0*py)));
evalcond[2]=(((sj1*x524))+(((-1.0)*sj3*x525))+((cj1*r02))+((r01*x521)));
evalcond[3]=((((-1.0)*cj3*x525))+((r02*sj1))+(((-1.0)*x522*x524))+(((-1.0)*r01*sj0*x522)));
evalcond[4]=((-0.49030543)+((sj1*x520))+(((-1.0)*sj3*x526))+((cj1*pz))+(((-0.278775)*cj3))+(((0.0137)*sj3))+((py*x521)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*x520*x522))+(((-1.0)*cj3*x526))+(((-1.0)*py*sj0*x522))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x527=((3.57847987692738)*sj1);
IkReal x528=((0.197711013200238)*cj1);
IkReal x529=(r01*sj0);
IkReal x530=(cj0*r00);
IkReal x531=((0.00971622591998298)*sj1);
IkReal x532=((0.00971622591998298)*cj1);
IkReal x533=(py*sj0);
IkReal x534=((0.175859292669375)*sj1);
IkReal x535=((0.197711013200238)*sj1);
IkReal x536=((3.57847987692738)*cj1);
IkReal x537=((0.175859292669375)*cj1);
IkReal x538=(cj0*px);
IkReal x539=(cj1*x538);
if( IKabs(((-0.00743980299587377)+((pz*x537))+((r02*x535))+(((-1.0)*x530*x531))+(((-1.0)*x529*x531))+(((-1.0)*x528*x529))+(((-1.0)*r02*x532))+(((-1.0)*x528*x530))+((x536*x538))+((x534*x538))+(((-1.0)*pz*x527))+((x533*x536))+((x533*x534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.15138912993976)+((r02*x528))+((r02*x531))+(((-1.0)*x527*x533))+(((-1.0)*x527*x538))+(((-1.0)*x530*x532))+(((-1.0)*x529*x532))+((x537*x538))+(((-1.0)*pz*x536))+(((-1.0)*pz*x534))+((x530*x535))+((x529*x535))+((x533*x537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.00743980299587377)+((pz*x537))+((r02*x535))+(((-1.0)*x530*x531))+(((-1.0)*x529*x531))+(((-1.0)*x528*x529))+(((-1.0)*r02*x532))+(((-1.0)*x528*x530))+((x536*x538))+((x534*x538))+(((-1.0)*pz*x527))+((x533*x536))+((x533*x534))))+IKsqr(((0.15138912993976)+((r02*x528))+((r02*x531))+(((-1.0)*x527*x533))+(((-1.0)*x527*x538))+(((-1.0)*x530*x532))+(((-1.0)*x529*x532))+((x537*x538))+(((-1.0)*pz*x536))+(((-1.0)*pz*x534))+((x530*x535))+((x529*x535))+((x533*x537))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.00743980299587377)+((pz*x537))+((r02*x535))+(((-1.0)*x530*x531))+(((-1.0)*x529*x531))+(((-1.0)*x528*x529))+(((-1.0)*r02*x532))+(((-1.0)*x528*x530))+((x536*x538))+((x534*x538))+(((-1.0)*pz*x527))+((x533*x536))+((x533*x534))), ((0.15138912993976)+((r02*x528))+((r02*x531))+(((-1.0)*x527*x533))+(((-1.0)*x527*x538))+(((-1.0)*x530*x532))+(((-1.0)*x529*x532))+((x537*x538))+(((-1.0)*pz*x536))+(((-1.0)*pz*x534))+((x530*x535))+((x529*x535))+((x533*x537))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x540=IKsin(j3);
IkReal x541=IKcos(j3);
IkReal x542=((1.0)*cj1);
IkReal x543=(cj0*px);
IkReal x544=((0.05525)*r02);
IkReal x545=((1.0)*sj1);
IkReal x546=(py*sj0);
IkReal x547=((0.05525)*cj0*r00);
IkReal x548=((0.05525)*r01*sj0);
evalcond[0]=((((-1.0)*x542*x546))+(((-1.0)*x542*x543))+(((-1.0)*sj1*x544))+((cj1*x547))+((cj1*x548))+(((0.278775)*x540))+((pz*sj1))+(((0.0137)*x541)));
evalcond[1]=((0.04230543)+((sj1*x548))+((sj1*x547))+(((-1.0)*x545*x546))+(((-0.278775)*x541))+((cj1*x544))+(((-1.0)*pz*x542))+(((-1.0)*x543*x545))+(((0.0137)*x540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x549=(sj0*sj1);
IkReal x550=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((cj1*r02))+((r00*x550))+((r01*x549)));
evalcond[2]=((0.23646957)+((py*x549))+((px*x550))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x551=((1.0)*cj1);
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj0*x551))+((r02*sj1))+(((-1.0)*cj0*r00*x551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((((-1.0)*r01*sj0*x551))+((r02*sj1))+(((-1.0)*cj0*r00*x551))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((((-1.0)*r01*sj0*x551))+((r02*sj1))+(((-1.0)*cj0*r00*x551))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x552=IKsin(j4);
IkReal x553=IKcos(j4);
IkReal x554=((1.0)*cj1);
IkReal x555=((1.0)*sj0);
evalcond[0]=((((-1.0)*x552))+(((-1.0)*r00*x555))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-0.05525)*x552))+(((-1.0)*px*x555))+((cj0*py)));
evalcond[2]=((((-1.0)*x553))+(((-1.0)*r01*sj0*x554))+((r02*sj1))+(((-1.0)*cj0*r00*x554)));
evalcond[3]=((0.0137)+(((-0.05525)*x553))+(((-1.0)*py*sj0*x554))+((pz*sj1))+(((-1.0)*cj0*px*x554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x556=(sj0*sj1);
IkReal x557=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj1*r02))+((r01*x556))+((r00*x557)));
evalcond[2]=((-0.32108043)+((py*x556))+((px*x557))+((cj1*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), (((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x558=IKsin(j4);
IkReal x559=IKcos(j4);
IkReal x560=((1.0)*cj1);
IkReal x561=((1.0)*sj0);
evalcond[0]=((((-1.0)*x558))+(((-1.0)*r00*x561))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-0.05525)*x558))+((cj0*py))+(((-1.0)*px*x561)));
evalcond[2]=((((-1.0)*cj0*r00*x560))+(((-1.0)*r01*sj0*x560))+((r02*sj1))+x559);
evalcond[3]=((-0.0137)+(((-1.0)*py*sj0*x560))+(((-1.0)*cj0*px*x560))+((pz*sj1))+(((0.05525)*x559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x562=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x562))+(((-1.0)*r01*sj0*x562))+((r02*sj1)));
evalcond[2]=((0.278775)+(((-1.0)*py*sj0*x562))+(((-1.0)*cj0*px*x562))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x563=((1.0)*sj1);
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r00*x563))+(((-1.0)*r01*sj0*x563))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((((-1.0)*cj0*r00*x563))+(((-1.0)*r01*sj0*x563))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((((-1.0)*cj0*r00*x563))+(((-1.0)*r01*sj0*x563))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x564=IKsin(j4);
IkReal x565=IKcos(j4);
IkReal x566=(cj0*sj1);
IkReal x567=(sj0*sj1);
IkReal x568=((1.0)*sj0);
evalcond[0]=((((-1.0)*x564))+(((-1.0)*r00*x568))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-0.05525)*x564))+((cj0*py))+(((-1.0)*px*x568)));
evalcond[2]=(((r01*x567))+((r00*x566))+((cj1*r02))+x565);
evalcond[3]=((-0.05600543)+(((0.05525)*x565))+((cj1*pz))+((py*x567))+((px*x566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x569=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x569))+(((-1.0)*r01*sj0*x569))+((r02*sj1)));
evalcond[2]=((-0.278775)+(((-1.0)*py*sj0*x569))+(((-1.0)*cj0*px*x569))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), (((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x570=IKsin(j4);
IkReal x571=IKcos(j4);
IkReal x572=(cj0*sj1);
IkReal x573=(sj0*sj1);
IkReal x574=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x574))+(((-1.0)*x570))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x574))+(((-0.05525)*x570))+((cj0*py)));
evalcond[2]=(((r01*x573))+((r00*x572))+((cj1*r02))+(((-1.0)*x571)));
evalcond[3]=((-0.02860543)+((py*x573))+((px*x572))+((cj1*pz))+(((-0.05525)*x571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x575=((1.0)*sj1);
CheckValue<IkReal> x576=IKPowWithIntegerCheck(sj3,-1);
if(!x576.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x576.value)*(((((-1.0)*cj0*r00*x575))+(((-1.0)*cj1*r02))+(((-1.0)*r01*sj0*x575)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((x576.value)*(((((-1.0)*cj0*r00*x575))+(((-1.0)*cj1*r02))+(((-1.0)*r01*sj0*x575))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((x576.value)*(((((-1.0)*cj0*r00*x575))+(((-1.0)*cj1*r02))+(((-1.0)*r01*sj0*x575))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x577=IKsin(j4);
IkReal x578=IKcos(j4);
IkReal x579=(cj0*px);
IkReal x580=(sj0*sj1);
IkReal x581=((1.0)*cj1);
IkReal x582=((1.0)*sj0);
IkReal x583=(cj0*r00);
IkReal x584=(cj3*x578);
IkReal x585=(sj3*x578);
evalcond[0]=((((-1.0)*x577))+(((-1.0)*r00*x582))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x582))+(((-0.05525)*x577))+((cj0*py)));
evalcond[2]=(((sj1*x583))+((cj1*r02))+x585+((r01*x580)));
evalcond[3]=((((-1.0)*x584))+(((-1.0)*r01*sj0*x581))+((r02*sj1))+(((-1.0)*x581*x583)));
evalcond[4]=((-0.04230543)+((sj1*x579))+(((0.278775)*cj3))+((cj1*pz))+(((-0.0137)*sj3))+(((0.05525)*x585))+((py*x580)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*x579*x581))+((pz*sj1))+(((-0.05525)*x584))+(((-1.0)*py*sj0*x581))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x586=((1.0)*cj1);
CheckValue<IkReal> x587=IKPowWithIntegerCheck(cj3,-1);
if(!x587.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x587.value)*(((((-1.0)*r01*sj0*x586))+(((-1.0)*cj0*r00*x586))+((r02*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((x587.value)*(((((-1.0)*r01*sj0*x586))+(((-1.0)*cj0*r00*x586))+((r02*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((x587.value)*(((((-1.0)*r01*sj0*x586))+(((-1.0)*cj0*r00*x586))+((r02*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x588=IKsin(j4);
IkReal x589=IKcos(j4);
IkReal x590=(cj0*px);
IkReal x591=(sj0*sj1);
IkReal x592=((1.0)*cj1);
IkReal x593=((1.0)*sj0);
IkReal x594=(cj0*r00);
IkReal x595=(cj3*x589);
IkReal x596=(sj3*x589);
evalcond[0]=((((-1.0)*x588))+(((-1.0)*r00*x593))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x593))+(((-0.05525)*x588))+((cj0*py)));
evalcond[2]=(((cj1*r02))+((r01*x591))+x596+((sj1*x594)));
evalcond[3]=((((-1.0)*r01*sj0*x592))+(((-1.0)*x595))+(((-1.0)*x592*x594))+((r02*sj1)));
evalcond[4]=((-0.04230543)+(((0.05525)*x596))+((py*x591))+(((0.278775)*cj3))+((cj1*pz))+(((-0.0137)*sj3))+((sj1*x590)));
evalcond[5]=((((0.0137)*cj3))+(((-0.05525)*x595))+(((-1.0)*py*sj0*x592))+(((-1.0)*x590*x592))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x597=((-1.0)*sj2);
CheckValue<IkReal> x598=IKPowWithIntegerCheck(((((-1.0)*(cj2*cj2)))+(((-1.0)*(sj2*sj2)))),-1);
if(!x598.valid){
continue;
}
sj4array[0]=((x598.value)*(((((1.0)*cj0*cj2*r01))+(((-1.0)*cj2*r00*sj0))+((cj1*r02*x597))+((cj0*r00*sj1*x597))+((r01*sj0*sj1*x597)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x599=((0.05525)*cj0);
IkReal x600=(sj1*sj2);
IkReal x601=((0.05525)*sj0);
evalcond[0]=(((px*x599*x600))+(((-1.0)*cj2*py*x599))+(((((((-0.0030525625)*(cj2*cj2)))+(((-0.0030525625)*(sj2*sj2)))))*(IKsin(j4))))+((py*x600*x601))+((cj2*px*x601))+(((-1.387659e-5)*cj2))+(((0.05525)*cj1*pz*sj2))+(((-0.0147133750075)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj2;
j3eval[1]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x602=(sj0*sj1);
IkReal x603=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r00*x603))+(((-1.0)*sj4))+((cj1*r02))+((r01*x602)));
evalcond[2]=((-0.26630543)+(((-0.05525)*sj4))+((px*x603))+((cj1*pz))+((py*x602)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x604=((1.0)*cj1);
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
j3eval[2]=((IKabs(((((-1.0)*cj0*r00*x604))+((r02*sj1))+(((-1.0)*r01*sj0*x604)))))+(IKabs(((((-1.0)*r00*sj0))+((cj0*r01))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=cj4;
j3eval[1]=(cj4+(((-4.03284671532847)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x605=(cj0*r00);
IkReal x606=(r01*sj0);
IkReal x607=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((((-1.0)*x605*x607))+((r02*sj1))+(((-1.0)*x606*x607)));
evalcond[3]=((-1.0)+((sj1*x605))+((sj1*x606))+((cj1*r02)));
evalcond[4]=((-0.32155543)+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x608=((3.57847987692738)*cj1);
IkReal x609=(py*sj0);
IkReal x610=(cj0*px);
IkReal x611=(px*sj0);
IkReal x612=((0.175859292669375)*cj1);
IkReal x613=(cj0*py);
IkReal x614=(pz*sj1);
if( IKabs(((0.0393483127379932)+((x608*x609))+((x608*x610))+(((-0.175859292669375)*x613))+(((0.175859292669375)*x611))+(((-3.57847987692738)*x614)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800680721425843)+(((-0.175859292669375)*x614))+((x609*x612))+(((-3.57847987692738)*x611))+(((3.57847987692738)*x613))+((x610*x612)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0393483127379932)+((x608*x609))+((x608*x610))+(((-0.175859292669375)*x613))+(((0.175859292669375)*x611))+(((-3.57847987692738)*x614))))+IKsqr(((-0.800680721425843)+(((-0.175859292669375)*x614))+((x609*x612))+(((-3.57847987692738)*x611))+(((3.57847987692738)*x613))+((x610*x612))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0393483127379932)+((x608*x609))+((x608*x610))+(((-0.175859292669375)*x613))+(((0.175859292669375)*x611))+(((-3.57847987692738)*x614))), ((-0.800680721425843)+(((-0.175859292669375)*x614))+((x609*x612))+(((-3.57847987692738)*x611))+(((3.57847987692738)*x613))+((x610*x612))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x615=IKsin(j3);
IkReal x616=IKcos(j3);
IkReal x617=((1.0)*cj1);
evalcond[0]=((-0.22374884)+(((-0.278775)*x616))+(((-1.0)*px*sj0))+(((0.0137)*x615))+((cj0*py)));
evalcond[1]=((((-1.0)*py*sj0*x617))+(((0.278775)*x615))+(((-1.0)*cj0*px*x617))+((pz*sj1))+(((0.0137)*x616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x618=(cj0*r00);
IkReal x619=(r01*sj0);
IkReal x620=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((r02*sj1))+(((-1.0)*x619*x620))+(((-1.0)*x618*x620)));
evalcond[3]=((1.0)+((sj1*x619))+((sj1*x618))+((cj1*r02)));
evalcond[4]=((-0.21105543)+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x621=((3.57847987692738)*cj1);
IkReal x622=(py*sj0);
IkReal x623=(cj0*px);
IkReal x624=(px*sj0);
IkReal x625=((0.175859292669375)*cj1);
IkReal x626=(cj0*py);
IkReal x627=(pz*sj1);
if( IKabs(((0.0393483127379932)+(((-3.57847987692738)*x627))+(((0.175859292669375)*x624))+((x621*x622))+((x621*x623))+(((-0.175859292669375)*x626)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800680721425843)+(((-3.57847987692738)*x624))+(((3.57847987692738)*x626))+(((-0.175859292669375)*x627))+((x623*x625))+((x622*x625)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0393483127379932)+(((-3.57847987692738)*x627))+(((0.175859292669375)*x624))+((x621*x622))+((x621*x623))+(((-0.175859292669375)*x626))))+IKsqr(((-0.800680721425843)+(((-3.57847987692738)*x624))+(((3.57847987692738)*x626))+(((-0.175859292669375)*x627))+((x623*x625))+((x622*x625))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0393483127379932)+(((-3.57847987692738)*x627))+(((0.175859292669375)*x624))+((x621*x622))+((x621*x623))+(((-0.175859292669375)*x626))), ((-0.800680721425843)+(((-3.57847987692738)*x624))+(((3.57847987692738)*x626))+(((-0.175859292669375)*x627))+((x623*x625))+((x622*x625))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x628=IKsin(j3);
IkReal x629=IKcos(j3);
IkReal x630=((1.0)*cj1);
evalcond[0]=((-0.22374884)+(((-0.278775)*x629))+(((0.0137)*x628))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((((0.278775)*x628))+(((0.0137)*x629))+((pz*sj1))+(((-1.0)*cj0*px*x630))+(((-1.0)*py*sj0*x630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x631=(cj0*r01);
IkReal x632=(r00*sj0);
IkReal x633=((40000.0)*cj1*cj4);
CheckValue<IkReal> x634=IKPowWithIntegerCheck(cj4,-1);
if(!x634.valid){
continue;
}
CheckValue<IkReal> x635=IKPowWithIntegerCheck(((((548.0)*cj4))+(((-2210.0)*(cj4*cj4)))),-1);
if(!x635.valid){
continue;
}
if( IKabs(((x634.value)*((x631+(((-1.0)*x632)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x635.value)*((((cj0*px*x633))+(((-11151.0)*x631))+((py*sj0*x633))+(((-40000.0)*cj4*pz*sj1))+(((11151.0)*x632)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x634.value)*((x631+(((-1.0)*x632))))))+IKsqr(((x635.value)*((((cj0*px*x633))+(((-11151.0)*x631))+((py*sj0*x633))+(((-40000.0)*cj4*pz*sj1))+(((11151.0)*x632))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x634.value)*((x631+(((-1.0)*x632))))), ((x635.value)*((((cj0*px*x633))+(((-11151.0)*x631))+((py*sj0*x633))+(((-40000.0)*cj4*pz*sj1))+(((11151.0)*x632))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x636=IKsin(j3);
IkReal x637=IKcos(j3);
IkReal x638=((1.0)*sj0);
IkReal x639=(cj4*x636);
IkReal x640=(cj1*x638);
IkReal x641=((1.0)*cj0*cj1);
IkReal x642=(cj4*x637);
evalcond[0]=((((-1.0)*r00*x638))+(((-1.0)*x639))+((cj0*r01)));
evalcond[1]=((((-1.0)*x642))+(((-1.0)*r01*x640))+(((-1.0)*r00*x641))+((r02*sj1)));
evalcond[2]=((-0.22374884)+(((-0.278775)*x637))+(((0.0137)*x636))+(((-1.0)*px*x638))+((cj0*py))+(((-0.05525)*x639)));
evalcond[3]=((((-0.05525)*x642))+(((-1.0)*px*x641))+(((0.278775)*x636))+(((0.0137)*x637))+((pz*sj1))+(((-1.0)*py*x640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x648=IKPowWithIntegerCheck(cj4,-1);
if(!x648.valid){
continue;
}
IkReal x643=x648.value;
IkReal x644=(cj0*r01);
IkReal x645=(r00*sj0);
IkReal x646=((40000.0)*cj4);
IkReal x647=((2210.0)*cj4);
if( IKabs((x643*(((((-1.0)*x645))+x644)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.96780557797507e-5)*x643*(((((-8949.9536)*cj4))+(((-548.0)*x645))+((cj0*py*x646))+((x645*x647))+(((-1.0)*x644*x647))+(((548.0)*x644))+(((-1.0)*px*sj0*x646)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x643*(((((-1.0)*x645))+x644))))+IKsqr(((8.96780557797507e-5)*x643*(((((-8949.9536)*cj4))+(((-548.0)*x645))+((cj0*py*x646))+((x645*x647))+(((-1.0)*x644*x647))+(((548.0)*x644))+(((-1.0)*px*sj0*x646))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x643*(((((-1.0)*x645))+x644))), ((8.96780557797507e-5)*x643*(((((-8949.9536)*cj4))+(((-548.0)*x645))+((cj0*py*x646))+((x645*x647))+(((-1.0)*x644*x647))+(((548.0)*x644))+(((-1.0)*px*sj0*x646))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x649=IKsin(j3);
IkReal x650=IKcos(j3);
IkReal x651=((1.0)*sj0);
IkReal x652=(cj4*x649);
IkReal x653=(cj1*x651);
IkReal x654=((1.0)*cj0*cj1);
IkReal x655=(cj4*x650);
evalcond[0]=((((-1.0)*x652))+(((-1.0)*r00*x651))+((cj0*r01)));
evalcond[1]=((((-1.0)*x655))+(((-1.0)*r00*x654))+(((-1.0)*r01*x653))+((r02*sj1)));
evalcond[2]=((-0.22374884)+(((-1.0)*px*x651))+(((-0.05525)*x652))+(((-0.278775)*x650))+(((0.0137)*x649))+((cj0*py)));
evalcond[3]=((((-1.0)*px*x654))+(((-0.05525)*x655))+(((0.278775)*x649))+(((0.0137)*x650))+((pz*sj1))+(((-1.0)*py*x653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x656=((1.0)*cj1);
CheckValue<IkReal> x657=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x657.valid){
continue;
}
CheckValue<IkReal> x658 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj0))+((cj0*r01)))),(((r02*sj1))+(((-1.0)*r01*sj0*x656))+(((-1.0)*cj0*r00*x656))),IKFAST_ATAN2_MAGTHRESH);
if(!x658.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x657.value)))+(x658.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x659=IKsin(j3);
IkReal x660=IKcos(j3);
IkReal x661=((1.0)*sj0);
IkReal x662=(cj4*x659);
IkReal x663=(cj1*x661);
IkReal x664=((1.0)*cj0*cj1);
IkReal x665=(cj4*x660);
evalcond[0]=((((-1.0)*r00*x661))+(((-1.0)*x662))+((cj0*r01)));
evalcond[1]=((((-1.0)*r01*x663))+(((-1.0)*r00*x664))+((r02*sj1))+(((-1.0)*x665)));
evalcond[2]=((-0.22374884)+(((-0.278775)*x660))+(((0.0137)*x659))+(((-0.05525)*x662))+(((-1.0)*px*x661))+((cj0*py)));
evalcond[3]=((((-1.0)*py*x663))+(((0.278775)*x659))+(((-0.05525)*x665))+((pz*sj1))+(((-1.0)*px*x664))+(((0.0137)*x660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x666=(sj0*sj1);
IkReal x667=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r01*x666))+sj4+((r00*x667))+((cj1*r02)));
evalcond[2]=((-0.26630543)+(((0.05525)*sj4))+((px*x667))+((cj1*pz))+((py*x666)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x668=((1.0)*cj0);
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
j3eval[2]=((IKabs((((r00*sj0))+(((-1.0)*r01*x668)))))+(IKabs((((r02*sj1))+(((-1.0)*cj1*r00*x668))+(((-1.0)*cj1*r01*sj0))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=cj4;
j3eval[1]=(cj4+(((-4.03284671532847)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x669=(cj0*r00);
IkReal x670=(r01*sj0);
IkReal x671=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((r02*sj1))+(((-1.0)*x670*x671))+(((-1.0)*x669*x671)));
evalcond[3]=((1.0)+((sj1*x669))+((cj1*r02))+((sj1*x670)));
evalcond[4]=((-0.21105543)+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x672=((3.57847987692738)*cj1);
IkReal x673=(py*sj0);
IkReal x674=(cj0*px);
IkReal x675=(px*sj0);
IkReal x676=((0.175859292669375)*cj1);
IkReal x677=(cj0*py);
IkReal x678=(pz*sj1);
if( IKabs(((0.0394366503778869)+(((0.175859292669375)*x677))+((x672*x674))+((x672*x673))+(((-0.175859292669375)*x675))+(((-3.57847987692738)*x678)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.802478263437622)+((x673*x676))+(((-0.175859292669375)*x678))+(((-3.57847987692738)*x677))+((x674*x676))+(((3.57847987692738)*x675)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0394366503778869)+(((0.175859292669375)*x677))+((x672*x674))+((x672*x673))+(((-0.175859292669375)*x675))+(((-3.57847987692738)*x678))))+IKsqr(((-0.802478263437622)+((x673*x676))+(((-0.175859292669375)*x678))+(((-3.57847987692738)*x677))+((x674*x676))+(((3.57847987692738)*x675))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0394366503778869)+(((0.175859292669375)*x677))+((x672*x674))+((x672*x673))+(((-0.175859292669375)*x675))+(((-3.57847987692738)*x678))), ((-0.802478263437622)+((x673*x676))+(((-0.175859292669375)*x678))+(((-3.57847987692738)*x677))+((x674*x676))+(((3.57847987692738)*x675))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x679=IKsin(j3);
IkReal x680=IKcos(j3);
IkReal x681=((1.0)*cj1);
evalcond[0]=((0.22425116)+(((-0.0137)*x679))+(((0.278775)*x680))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((((0.0137)*x680))+((pz*sj1))+(((0.278775)*x679))+(((-1.0)*cj0*px*x681))+(((-1.0)*py*sj0*x681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x682=(cj0*r00);
IkReal x683=(r01*sj0);
IkReal x684=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=(((r02*sj1))+(((-1.0)*x682*x684))+(((-1.0)*x683*x684)));
evalcond[3]=((-1.0)+((cj1*r02))+((sj1*x682))+((sj1*x683)));
evalcond[4]=((-0.32155543)+((cj1*pz))+((cj0*px*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x685=((3.57847987692738)*cj1);
IkReal x686=(py*sj0);
IkReal x687=(cj0*px);
IkReal x688=(px*sj0);
IkReal x689=((0.175859292669375)*cj1);
IkReal x690=(cj0*py);
IkReal x691=(pz*sj1);
if( IKabs(((0.0394366503778869)+(((-3.57847987692738)*x691))+((x685*x686))+((x685*x687))+(((0.175859292669375)*x690))+(((-0.175859292669375)*x688)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.802478263437622)+(((-3.57847987692738)*x690))+((x686*x689))+((x687*x689))+(((3.57847987692738)*x688))+(((-0.175859292669375)*x691)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0394366503778869)+(((-3.57847987692738)*x691))+((x685*x686))+((x685*x687))+(((0.175859292669375)*x690))+(((-0.175859292669375)*x688))))+IKsqr(((-0.802478263437622)+(((-3.57847987692738)*x690))+((x686*x689))+((x687*x689))+(((3.57847987692738)*x688))+(((-0.175859292669375)*x691))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0394366503778869)+(((-3.57847987692738)*x691))+((x685*x686))+((x685*x687))+(((0.175859292669375)*x690))+(((-0.175859292669375)*x688))), ((-0.802478263437622)+(((-3.57847987692738)*x690))+((x686*x689))+((x687*x689))+(((3.57847987692738)*x688))+(((-0.175859292669375)*x691))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x692=IKsin(j3);
IkReal x693=IKcos(j3);
IkReal x694=((1.0)*cj1);
evalcond[0]=((0.22425116)+(((-0.0137)*x692))+(((0.278775)*x693))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((((0.278775)*x692))+(((-1.0)*py*sj0*x694))+((pz*sj1))+(((0.0137)*x693))+(((-1.0)*cj0*px*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x695=(cj0*r01);
IkReal x696=(r00*sj0);
IkReal x697=((40000.0)*cj1*cj4);
CheckValue<IkReal> x698=IKPowWithIntegerCheck(cj4,-1);
if(!x698.valid){
continue;
}
CheckValue<IkReal> x699=IKPowWithIntegerCheck(((((548.0)*cj4))+(((-2210.0)*(cj4*cj4)))),-1);
if(!x699.valid){
continue;
}
if( IKabs(((x698.value)*((x696+(((-1.0)*x695)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x699.value)*((((py*sj0*x697))+(((-11151.0)*x696))+(((11151.0)*x695))+((cj0*px*x697))+(((-40000.0)*cj4*pz*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x698.value)*((x696+(((-1.0)*x695))))))+IKsqr(((x699.value)*((((py*sj0*x697))+(((-11151.0)*x696))+(((11151.0)*x695))+((cj0*px*x697))+(((-40000.0)*cj4*pz*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x698.value)*((x696+(((-1.0)*x695))))), ((x699.value)*((((py*sj0*x697))+(((-11151.0)*x696))+(((11151.0)*x695))+((cj0*px*x697))+(((-40000.0)*cj4*pz*sj1))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x700=IKsin(j3);
IkReal x701=IKcos(j3);
IkReal x702=((1.0)*sj0);
IkReal x703=(cj4*x700);
IkReal x704=(cj1*x702);
IkReal x705=((1.0)*cj0*cj1);
IkReal x706=(cj4*x701);
evalcond[0]=(x703+(((-1.0)*r00*x702))+((cj0*r01)));
evalcond[1]=((((-1.0)*x706))+((r02*sj1))+(((-1.0)*r01*x704))+(((-1.0)*r00*x705)));
evalcond[2]=((0.22425116)+(((0.05525)*x703))+(((-0.0137)*x700))+(((-1.0)*px*x702))+((cj0*py))+(((0.278775)*x701)));
evalcond[3]=((((-1.0)*py*x704))+(((-0.05525)*x706))+(((-1.0)*px*x705))+((pz*sj1))+(((0.278775)*x700))+(((0.0137)*x701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x712=IKPowWithIntegerCheck(cj4,-1);
if(!x712.valid){
continue;
}
IkReal x707=x712.value;
IkReal x708=(cj0*r01);
IkReal x709=(r00*sj0);
IkReal x710=((40000.0)*cj4);
IkReal x711=((2210.0)*cj4);
if( IKabs((x707*(((((-1.0)*x708))+x709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.96780557797507e-5)*x707*(((((-548.0)*x708))+(((-8970.0464)*cj4))+((px*sj0*x710))+(((-1.0)*cj0*py*x710))+(((-1.0)*x709*x711))+(((548.0)*x709))+((x708*x711)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x707*(((((-1.0)*x708))+x709))))+IKsqr(((8.96780557797507e-5)*x707*(((((-548.0)*x708))+(((-8970.0464)*cj4))+((px*sj0*x710))+(((-1.0)*cj0*py*x710))+(((-1.0)*x709*x711))+(((548.0)*x709))+((x708*x711))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x707*(((((-1.0)*x708))+x709))), ((8.96780557797507e-5)*x707*(((((-548.0)*x708))+(((-8970.0464)*cj4))+((px*sj0*x710))+(((-1.0)*cj0*py*x710))+(((-1.0)*x709*x711))+(((548.0)*x709))+((x708*x711))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x713=IKsin(j3);
IkReal x714=IKcos(j3);
IkReal x715=((1.0)*sj0);
IkReal x716=(cj4*x713);
IkReal x717=(cj1*x715);
IkReal x718=((1.0)*cj0*cj1);
IkReal x719=(cj4*x714);
evalcond[0]=(x716+(((-1.0)*r00*x715))+((cj0*r01)));
evalcond[1]=((((-1.0)*x719))+((r02*sj1))+(((-1.0)*r01*x717))+(((-1.0)*r00*x718)));
evalcond[2]=((0.22425116)+(((0.05525)*x716))+(((-0.0137)*x713))+(((-1.0)*px*x715))+((cj0*py))+(((0.278775)*x714)));
evalcond[3]=((((-0.05525)*x719))+(((-1.0)*px*x718))+((pz*sj1))+(((-1.0)*py*x717))+(((0.278775)*x713))+(((0.0137)*x714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x720=((1.0)*r01);
CheckValue<IkReal> x721=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x721.valid){
continue;
}
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal((((r00*sj0))+(((-1.0)*cj0*x720)))),((((-1.0)*cj1*sj0*x720))+(((-1.0)*cj0*cj1*r00))+((r02*sj1))),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x721.value)))+(x722.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x723=IKsin(j3);
IkReal x724=IKcos(j3);
IkReal x725=((1.0)*sj0);
IkReal x726=(cj4*x723);
IkReal x727=(cj1*x725);
IkReal x728=((1.0)*cj0*cj1);
IkReal x729=(cj4*x724);
evalcond[0]=((((-1.0)*r00*x725))+x726+((cj0*r01)));
evalcond[1]=((((-1.0)*r00*x728))+((r02*sj1))+(((-1.0)*x729))+(((-1.0)*r01*x727)));
evalcond[2]=((0.22425116)+(((0.278775)*x724))+(((0.05525)*x726))+(((-1.0)*px*x725))+(((-0.0137)*x723))+((cj0*py)));
evalcond[3]=((((0.278775)*x723))+(((-1.0)*px*x728))+(((-0.05525)*x729))+((pz*sj1))+(((0.0137)*x724))+(((-1.0)*py*x727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x730=(cj0*r00);
IkReal x731=(r01*sj0);
IkReal x732=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=(cj2+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[2]=((((-1.0)*x731*x732))+((r02*sj1))+(((-1.0)*x730*x732)));
evalcond[3]=((((-1.0)*sj2))+((cj1*r02))+((sj1*x730))+((sj1*x731)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j3eval[0]=sj2;
j3eval[1]=IKsign(sj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x733=(cj0*r00);
IkReal x734=(r01*sj0);
IkReal x735=((1.0)*cj1);
IkReal x736=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x736))+((cj0*r01)));
evalcond[2]=((((-1.0)*x734*x735))+(((-1.0)*x733*x735))+((r02*sj1)));
evalcond[3]=(((cj1*r02))+((sj1*x733))+((sj1*x734)));
evalcond[4]=((0.05550116)+(((-1.0)*px*x736))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x737=((3.57847987692738)*cj1);
IkReal x738=(cj0*px);
IkReal x739=((0.175859292669375)*cj1);
IkReal x740=((3.57847987692738)*sj1);
IkReal x741=((0.175859292669375)*sj1);
IkReal x742=(py*sj0);
IkReal x743=((3.57847987692738)*x742);
if( IKabs(((0.0862247661117539)+(((-1.0)*x738*x741))+(((-1.0)*pz*x740))+((x737*x742))+(((-1.0)*x741*x742))+(((-1.0)*pz*x739))+((x737*x738)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.75454811480322)+((x738*x740))+((x739*x742))+((x740*x742))+(((-1.0)*pz*x741))+((pz*x737))+((x738*x739)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0862247661117539)+(((-1.0)*x738*x741))+(((-1.0)*pz*x740))+((x737*x742))+(((-1.0)*x741*x742))+(((-1.0)*pz*x739))+((x737*x738))))+IKsqr(((-1.75454811480322)+((x738*x740))+((x739*x742))+((x740*x742))+(((-1.0)*pz*x741))+((pz*x737))+((x738*x739))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0862247661117539)+(((-1.0)*x738*x741))+(((-1.0)*pz*x740))+((x737*x742))+(((-1.0)*x741*x742))+(((-1.0)*pz*x739))+((x737*x738))), ((-1.75454811480322)+((x738*x740))+((x739*x742))+((x740*x742))+(((-1.0)*pz*x741))+((pz*x737))+((x738*x739))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x744=IKsin(j3);
IkReal x745=IKcos(j3);
IkReal x746=(cj0*px);
IkReal x747=(py*sj0);
IkReal x748=((1.0)*cj1);
evalcond[0]=((-0.49030543)+(((0.0137)*x744))+((cj1*pz))+((sj1*x747))+((sj1*x746))+(((-0.278775)*x745)));
evalcond[1]=((((0.0137)*x745))+(((-1.0)*x746*x748))+(((-1.0)*x747*x748))+((pz*sj1))+(((0.278775)*x744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x749=(cj0*r00);
IkReal x750=(r01*sj0);
IkReal x751=((1.0)*cj1);
IkReal x752=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x752))+((cj0*r01)));
evalcond[2]=((((-1.0)*x750*x751))+((r02*sj1))+(((-1.0)*x749*x751)));
evalcond[3]=(((cj1*r02))+((sj1*x750))+((sj1*x749)));
evalcond[4]=((-0.05499884)+(((-1.0)*px*x752))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x753=((3.57847987692738)*cj1);
IkReal x754=(cj0*px);
IkReal x755=((0.175859292669375)*cj1);
IkReal x756=((3.57847987692738)*sj1);
IkReal x757=((0.175859292669375)*sj1);
IkReal x758=(py*sj0);
IkReal x759=((3.57847987692738)*x758);
if( IKabs(((-0.00743980299587377)+((pz*x755))+(((-1.0)*pz*x756))+((x753*x758))+((x753*x754))+((x757*x758))+((x754*x757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.15138912993976)+(((-1.0)*x754*x756))+(((-1.0)*x756*x758))+((x755*x758))+(((-1.0)*pz*x753))+(((-1.0)*pz*x757))+((x754*x755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.00743980299587377)+((pz*x755))+(((-1.0)*pz*x756))+((x753*x758))+((x753*x754))+((x757*x758))+((x754*x757))))+IKsqr(((0.15138912993976)+(((-1.0)*x754*x756))+(((-1.0)*x756*x758))+((x755*x758))+(((-1.0)*pz*x753))+(((-1.0)*pz*x757))+((x754*x755))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.00743980299587377)+((pz*x755))+(((-1.0)*pz*x756))+((x753*x758))+((x753*x754))+((x757*x758))+((x754*x757))), ((0.15138912993976)+(((-1.0)*x754*x756))+(((-1.0)*x756*x758))+((x755*x758))+(((-1.0)*pz*x753))+(((-1.0)*pz*x757))+((x754*x755))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x760=IKsin(j3);
IkReal x761=IKcos(j3);
IkReal x762=(cj0*px);
IkReal x763=(py*sj0);
IkReal x764=((1.0)*cj1);
evalcond[0]=((-0.04230543)+(((-0.0137)*x760))+((sj1*x763))+((sj1*x762))+(((0.278775)*x761))+((cj1*pz)));
evalcond[1]=((((-1.0)*x763*x764))+(((-1.0)*x762*x764))+(((0.0137)*x761))+(((0.278775)*x760))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x765=(py*sj0);
IkReal x766=((4384000.0)*sj1);
IkReal x767=(cj0*px);
IkReal x768=((89208000.0)*sj1);
IkReal x769=(cj2*pz);
IkReal x770=(cj1*pz);
IkReal x771=((89208000.0)*cj1*cj2);
IkReal x772=((4384000.0)*cj1*cj2);
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal(((1167483.00512)+(((-4384000.0)*x770))+(((-1.0)*x765*x766))+(((982016.0)*cj2))+(((242216.0)*sj2))+(((-1.0)*x766*x767))+((x767*x771))+((x765*x771))+(((-1.0)*x768*x769)))),((-23756574.79944)+(((-19982592.0)*cj2))+(((89208000.0)*x770))+(((-4928742.0)*sj2))+(((-1.0)*x766*x769))+((x767*x772))+((x765*x772))+((x765*x768))+((x767*x768))),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
CheckValue<IkReal> x774=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x774.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x773.value)+(((1.5707963267949)*(x774.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x775=IKsin(j3);
IkReal x776=IKcos(j3);
IkReal x777=(cj0*px);
IkReal x778=(py*sj0);
IkReal x779=((1.0)*cj1);
IkReal x780=((0.278775)*x776);
IkReal x781=((0.0137)*x775);
evalcond[0]=((((0.0137)*x776))+(((-1.0)*x778*x779))+((pz*sj1))+(((0.278775)*x775))+(((-1.0)*x777*x779)));
evalcond[1]=((0.00025116)+((sj2*x781))+(((0.05525)*cj2))+(((-0.224)*sj2))+(((-1.0)*px*sj0))+(((-1.0)*sj2*x780))+((cj0*py)));
evalcond[2]=((-0.26630543)+(((-0.05525)*sj2))+(((-1.0)*cj2*x780))+((cj1*pz))+((sj1*x778))+((sj1*x777))+(((-0.224)*cj2))+((cj2*x781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x782=((4384000.0)*px);
IkReal x783=(cj0*py);
IkReal x784=(cj1*sj2);
IkReal x785=(py*sj0);
IkReal x786=((89208000.0)*px);
IkReal x787=(pz*sj1*sj2);
CheckValue<IkReal> x788 = IKatan2WithCheck(IkReal(((-1101.08544)+(((-4384000.0)*x783))+(((982016.0)*sj2))+((sj0*x782))+((cj0*x784*x786))+(((-242216.0)*cj2))+(((89208000.0)*x784*x785))+(((-89208000.0)*x787)))),((22405.48128)+(((-19982592.0)*sj2))+(((4384000.0)*x784*x785))+(((-4384000.0)*x787))+(((-1.0)*sj0*x786))+(((4928742.0)*cj2))+((cj0*x782*x784))+(((89208000.0)*x783))),IKFAST_ATAN2_MAGTHRESH);
if(!x788.valid){
continue;
}
CheckValue<IkReal> x789=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x789.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x788.value)+(((1.5707963267949)*(x789.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x790=IKsin(j3);
IkReal x791=IKcos(j3);
IkReal x792=(cj0*px);
IkReal x793=(py*sj0);
IkReal x794=((1.0)*cj1);
IkReal x795=((0.278775)*x791);
IkReal x796=((0.0137)*x790);
evalcond[0]=((((-1.0)*x792*x794))+(((0.0137)*x791))+(((-1.0)*x793*x794))+(((0.278775)*x790))+((pz*sj1)));
evalcond[1]=((0.00025116)+(((0.05525)*cj2))+(((-0.224)*sj2))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*sj2*x795))+((sj2*x796)));
evalcond[2]=((-0.26630543)+(((-0.05525)*sj2))+(((-1.0)*cj2*x795))+((sj1*x792))+((sj1*x793))+((cj1*pz))+(((-0.224)*cj2))+((cj2*x796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x797=(cj0*r00);
IkReal x798=(r01*sj0);
IkReal x799=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*sj0))+(((-1.0)*cj2))+((cj0*r01)));
evalcond[2]=((((-1.0)*x798*x799))+(((-1.0)*x797*x799))+((r02*sj1)));
evalcond[3]=(sj2+((sj1*x798))+((sj1*x797))+((cj1*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j3eval[0]=sj2;
j3eval[1]=IKsign(sj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x800=(cj0*r00);
IkReal x801=(r01*sj0);
IkReal x802=((1.0)*cj1);
IkReal x803=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x803))+((cj0*r01)));
evalcond[2]=(((r02*sj1))+(((-1.0)*x800*x802))+(((-1.0)*x801*x802)));
evalcond[3]=(((cj1*r02))+((sj1*x800))+((sj1*x801)));
evalcond[4]=((-0.05499884)+(((-1.0)*px*x803))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x804=((3.57847987692738)*cj1);
IkReal x805=(cj0*px);
IkReal x806=((0.175859292669375)*cj1);
IkReal x807=((3.57847987692738)*sj1);
IkReal x808=((0.175859292669375)*sj1);
IkReal x809=(py*sj0);
IkReal x810=((3.57847987692738)*x809);
if( IKabs(((0.0862247661117539)+((x804*x809))+((x804*x805))+(((-1.0)*x805*x808))+(((-1.0)*x808*x809))+(((-1.0)*pz*x807))+(((-1.0)*pz*x806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.75454811480322)+((x806*x809))+((x805*x807))+((x805*x806))+((pz*x804))+(((-1.0)*pz*x808))+((x807*x809)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0862247661117539)+((x804*x809))+((x804*x805))+(((-1.0)*x805*x808))+(((-1.0)*x808*x809))+(((-1.0)*pz*x807))+(((-1.0)*pz*x806))))+IKsqr(((-1.75454811480322)+((x806*x809))+((x805*x807))+((x805*x806))+((pz*x804))+(((-1.0)*pz*x808))+((x807*x809))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0862247661117539)+((x804*x809))+((x804*x805))+(((-1.0)*x805*x808))+(((-1.0)*x808*x809))+(((-1.0)*pz*x807))+(((-1.0)*pz*x806))), ((-1.75454811480322)+((x806*x809))+((x805*x807))+((x805*x806))+((pz*x804))+(((-1.0)*pz*x808))+((x807*x809))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x811=IKsin(j3);
IkReal x812=IKcos(j3);
IkReal x813=(cj0*px);
IkReal x814=(py*sj0);
IkReal x815=((1.0)*cj1);
evalcond[0]=((-0.49030543)+((sj1*x813))+((sj1*x814))+(((0.0137)*x811))+((cj1*pz))+(((-0.278775)*x812)));
evalcond[1]=((((0.0137)*x812))+(((-1.0)*x814*x815))+(((-1.0)*x813*x815))+(((0.278775)*x811))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x816=(cj0*r00);
IkReal x817=(r01*sj0);
IkReal x818=((1.0)*cj1);
IkReal x819=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r00*x819))+((cj0*r01)));
evalcond[2]=((((-1.0)*x816*x818))+(((-1.0)*x817*x818))+((r02*sj1)));
evalcond[3]=(((sj1*x816))+((sj1*x817))+((cj1*r02)));
evalcond[4]=((0.05550116)+(((-1.0)*px*x819))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x820=((3.57847987692738)*cj1);
IkReal x821=(cj0*px);
IkReal x822=((0.175859292669375)*cj1);
IkReal x823=((3.57847987692738)*sj1);
IkReal x824=((0.175859292669375)*sj1);
IkReal x825=(py*sj0);
IkReal x826=((3.57847987692738)*x825);
if( IKabs(((-0.00743980299587377)+((pz*x822))+((x820*x825))+((x820*x821))+((x821*x824))+(((-1.0)*pz*x823))+((x824*x825)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.15138912993976)+((x821*x822))+(((-1.0)*pz*x824))+(((-1.0)*pz*x820))+(((-1.0)*x823*x825))+(((-1.0)*x821*x823))+((x822*x825)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.00743980299587377)+((pz*x822))+((x820*x825))+((x820*x821))+((x821*x824))+(((-1.0)*pz*x823))+((x824*x825))))+IKsqr(((0.15138912993976)+((x821*x822))+(((-1.0)*pz*x824))+(((-1.0)*pz*x820))+(((-1.0)*x823*x825))+(((-1.0)*x821*x823))+((x822*x825))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.00743980299587377)+((pz*x822))+((x820*x825))+((x820*x821))+((x821*x824))+(((-1.0)*pz*x823))+((x824*x825))), ((0.15138912993976)+((x821*x822))+(((-1.0)*pz*x824))+(((-1.0)*pz*x820))+(((-1.0)*x823*x825))+(((-1.0)*x821*x823))+((x822*x825))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x827=IKsin(j3);
IkReal x828=IKcos(j3);
IkReal x829=(cj0*px);
IkReal x830=(py*sj0);
IkReal x831=((1.0)*cj1);
evalcond[0]=((-0.04230543)+((sj1*x829))+((cj1*pz))+(((-0.0137)*x827))+(((0.278775)*x828))+((sj1*x830)));
evalcond[1]=((((0.0137)*x828))+(((-1.0)*x830*x831))+((pz*sj1))+(((0.278775)*x827))+(((-1.0)*x829*x831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x832=(py*sj0);
IkReal x833=((4384000.0)*sj1);
IkReal x834=(cj0*px);
IkReal x835=((89208000.0)*sj1);
IkReal x836=(cj2*pz);
IkReal x837=(cj1*pz);
IkReal x838=((89208000.0)*cj1*cj2);
IkReal x839=((4384000.0)*cj1*cj2);
CheckValue<IkReal> x840=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x840.valid){
continue;
}
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal(((1167483.00512)+(((-1.0)*x832*x833))+(((-1.0)*x835*x836))+((x832*x838))+(((982016.0)*cj2))+(((-1.0)*x833*x834))+((x834*x838))+(((-242216.0)*sj2))+(((-4384000.0)*x837)))),((-23756574.79944)+(((-19982592.0)*cj2))+((x832*x839))+((x832*x835))+(((89208000.0)*x837))+(((-1.0)*x833*x836))+(((4928742.0)*sj2))+((x834*x839))+((x834*x835))),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x840.value)))+(x841.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x842=IKsin(j3);
IkReal x843=IKcos(j3);
IkReal x844=(cj0*px);
IkReal x845=(py*sj0);
IkReal x846=((1.0)*cj1);
IkReal x847=((0.278775)*x843);
IkReal x848=((0.0137)*x842);
evalcond[0]=((((0.278775)*x842))+(((-1.0)*x844*x846))+(((0.0137)*x843))+(((-1.0)*x845*x846))+((pz*sj1)));
evalcond[1]=((0.00025116)+(((-1.0)*sj2*x847))+(((-0.224)*sj2))+((sj2*x848))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.05525)*cj2)));
evalcond[2]=((-0.26630543)+(((0.05525)*sj2))+((cj1*pz))+(((-0.224)*cj2))+((cj2*x848))+(((-1.0)*cj2*x847))+((sj1*x844))+((sj1*x845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x849=((4384000.0)*px);
IkReal x850=(cj0*py);
IkReal x851=(cj1*sj2);
IkReal x852=((89208000.0)*sj0);
IkReal x853=(pz*sj1*sj2);
CheckValue<IkReal> x854=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x854.valid){
continue;
}
CheckValue<IkReal> x855 = IKatan2WithCheck(IkReal(((-1101.08544)+(((-89208000.0)*x853))+(((982016.0)*sj2))+(((-4384000.0)*x850))+(((89208000.0)*cj0*px*x851))+((py*x851*x852))+((sj0*x849))+(((242216.0)*cj2)))),((22405.48128)+(((-19982592.0)*sj2))+(((-4384000.0)*x853))+((cj0*x849*x851))+(((89208000.0)*x850))+(((4384000.0)*py*sj0*x851))+(((-4928742.0)*cj2))+(((-1.0)*px*x852))),IKFAST_ATAN2_MAGTHRESH);
if(!x855.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x854.value)))+(x855.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x856=IKsin(j3);
IkReal x857=IKcos(j3);
IkReal x858=(cj0*px);
IkReal x859=(py*sj0);
IkReal x860=((1.0)*cj1);
IkReal x861=((0.278775)*x857);
IkReal x862=((0.0137)*x856);
evalcond[0]=((((0.0137)*x857))+(((-1.0)*x858*x860))+(((-1.0)*x859*x860))+((pz*sj1))+(((0.278775)*x856)));
evalcond[1]=((0.00025116)+((sj2*x862))+(((-0.224)*sj2))+(((-1.0)*sj2*x861))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.05525)*cj2)));
evalcond[2]=((-0.26630543)+((cj2*x862))+(((0.05525)*sj2))+(((-1.0)*cj2*x861))+((sj1*x859))+((sj1*x858))+((cj1*pz))+(((-0.224)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x863=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(sj4+(((-1.0)*r00*x863))+((cj0*r01)));
evalcond[2]=((0.00025116)+(((0.05525)*sj4))+((cj0*py))+(((-1.0)*px*x863)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x864=((1.0)*cj1);
IkReal x865=(cj0*r00);
IkReal x866=(r01*sj0);
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
j3eval[2]=((IKabs((((cj1*r02))+((sj1*x865))+((sj1*x866)))))+(IKabs(((((-1.0)*x864*x866))+(((-1.0)*x864*x865))+((r02*sj1))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=1.0;
j2=0;
j3eval[0]=cj4;
j3eval[1]=(cj4+(((-4.03284671532847)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=0;
cj2=1.0;
j2=0;
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x873=IKPowWithIntegerCheck(cj4,-1);
if(!x873.valid){
continue;
}
IkReal x867=x873.value;
IkReal x868=((2210.0)*cj4);
IkReal x869=(cj1*r02);
IkReal x870=((40000.0)*cj4);
IkReal x871=(cj0*r00*sj1);
IkReal x872=(r01*sj0*sj1);
if( IKabs((x867*((x869+x871+x872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.96780557797507e-5)*x867*(((((548.0)*x871))+(((548.0)*x872))+(((548.0)*x869))+(((-1.0)*x868*x871))+(((-1.0)*x868*x872))+((cj1*pz*x870))+(((-1.0)*x868*x869))+(((-19612.2172)*cj4))+((cj0*px*sj1*x870))+((py*sj0*sj1*x870)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x867*((x869+x871+x872))))+IKsqr(((8.96780557797507e-5)*x867*(((((548.0)*x871))+(((548.0)*x872))+(((548.0)*x869))+(((-1.0)*x868*x871))+(((-1.0)*x868*x872))+((cj1*pz*x870))+(((-1.0)*x868*x869))+(((-19612.2172)*cj4))+((cj0*px*sj1*x870))+((py*sj0*sj1*x870))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x867*((x869+x871+x872))), ((8.96780557797507e-5)*x867*(((((548.0)*x871))+(((548.0)*x872))+(((548.0)*x869))+(((-1.0)*x868*x871))+(((-1.0)*x868*x872))+((cj1*pz*x870))+(((-1.0)*x868*x869))+(((-19612.2172)*cj4))+((cj0*px*sj1*x870))+((py*sj0*sj1*x870))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x874=IKsin(j3);
IkReal x875=IKcos(j3);
IkReal x876=((1.0)*cj1);
IkReal x877=(cj0*r00);
IkReal x878=(r01*sj0);
IkReal x879=(py*sj0);
IkReal x880=(cj0*px);
IkReal x881=(cj4*x874);
IkReal x882=(cj4*x875);
evalcond[0]=(((cj1*r02))+(((-1.0)*x881))+((sj1*x877))+((sj1*x878)));
evalcond[1]=((((-1.0)*x876*x878))+(((-1.0)*x876*x877))+(((-1.0)*x882))+((r02*sj1)));
evalcond[2]=((-0.49030543)+((sj1*x880))+(((-0.278775)*x875))+((cj1*pz))+((sj1*x879))+(((-0.05525)*x881))+(((0.0137)*x874)));
evalcond[3]=((((0.278775)*x874))+(((-1.0)*x876*x879))+(((-1.0)*x876*x880))+((pz*sj1))+(((-0.05525)*x882))+(((0.0137)*x875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x883=(cj1*r02);
IkReal x884=(r01*sj0*sj1);
IkReal x885=((40000.0)*cj1*cj4);
IkReal x886=(cj0*r00*sj1);
CheckValue<IkReal> x887=IKPowWithIntegerCheck(cj4,-1);
if(!x887.valid){
continue;
}
CheckValue<IkReal> x888=IKPowWithIntegerCheck(((((548.0)*cj4))+(((-2210.0)*(cj4*cj4)))),-1);
if(!x888.valid){
continue;
}
if( IKabs(((x887.value)*((x884+x886+x883)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x888.value)*(((((-11151.0)*x884))+(((-11151.0)*x886))+(((-11151.0)*x883))+(((-40000.0)*cj4*pz*sj1))+((py*sj0*x885))+((cj0*px*x885)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x887.value)*((x884+x886+x883))))+IKsqr(((x888.value)*(((((-11151.0)*x884))+(((-11151.0)*x886))+(((-11151.0)*x883))+(((-40000.0)*cj4*pz*sj1))+((py*sj0*x885))+((cj0*px*x885))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x887.value)*((x884+x886+x883))), ((x888.value)*(((((-11151.0)*x884))+(((-11151.0)*x886))+(((-11151.0)*x883))+(((-40000.0)*cj4*pz*sj1))+((py*sj0*x885))+((cj0*px*x885))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x889=IKsin(j3);
IkReal x890=IKcos(j3);
IkReal x891=((1.0)*cj1);
IkReal x892=(cj0*r00);
IkReal x893=(r01*sj0);
IkReal x894=(py*sj0);
IkReal x895=(cj0*px);
IkReal x896=(cj4*x889);
IkReal x897=(cj4*x890);
evalcond[0]=(((sj1*x893))+((sj1*x892))+((cj1*r02))+(((-1.0)*x896)));
evalcond[1]=(((r02*sj1))+(((-1.0)*x897))+(((-1.0)*x891*x893))+(((-1.0)*x891*x892)));
evalcond[2]=((-0.49030543)+((sj1*x895))+((sj1*x894))+(((0.0137)*x889))+((cj1*pz))+(((-0.278775)*x890))+(((-0.05525)*x896)));
evalcond[3]=((((0.0137)*x890))+((pz*sj1))+(((0.278775)*x889))+(((-1.0)*x891*x894))+(((-1.0)*x891*x895))+(((-0.05525)*x897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x898=((1.0)*cj1);
IkReal x899=(cj0*r00);
IkReal x900=(r01*sj0);
CheckValue<IkReal> x901=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x901.valid){
continue;
}
CheckValue<IkReal> x902 = IKatan2WithCheck(IkReal((((sj1*x899))+((cj1*r02))+((sj1*x900)))),((((-1.0)*x898*x899))+(((-1.0)*x898*x900))+((r02*sj1))),IKFAST_ATAN2_MAGTHRESH);
if(!x902.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x901.value)))+(x902.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x903=IKsin(j3);
IkReal x904=IKcos(j3);
IkReal x905=((1.0)*cj1);
IkReal x906=(cj0*r00);
IkReal x907=(r01*sj0);
IkReal x908=(py*sj0);
IkReal x909=(cj0*px);
IkReal x910=(cj4*x903);
IkReal x911=(cj4*x904);
evalcond[0]=(((cj1*r02))+(((-1.0)*x910))+((sj1*x907))+((sj1*x906)));
evalcond[1]=(((r02*sj1))+(((-1.0)*x911))+(((-1.0)*x905*x907))+(((-1.0)*x905*x906)));
evalcond[2]=((-0.49030543)+(((0.0137)*x903))+(((-0.278775)*x904))+((cj1*pz))+(((-0.05525)*x910))+((sj1*x909))+((sj1*x908)));
evalcond[3]=((((0.0137)*x904))+(((0.278775)*x903))+(((-0.05525)*x911))+((pz*sj1))+(((-1.0)*x905*x908))+(((-1.0)*x905*x909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x912=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4))+(((-1.0)*r00*x912))+((cj0*r01)));
evalcond[2]=((0.00025116)+(((-0.05525)*sj4))+(((-1.0)*px*x912))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x913=((1.0)*cj1);
IkReal x914=(r01*sj0);
IkReal x915=((1.0)*sj1);
IkReal x916=(cj0*r00);
j3eval[0]=cj4;
j3eval[1]=((IKabs(((((-1.0)*x913*x914))+(((-1.0)*x913*x916))+((r02*sj1)))))+(IKabs(((((-1.0)*r02*x913))+(((-1.0)*x914*x915))+(((-1.0)*x915*x916))))));
j3eval[2]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3eval[0]=cj4;
j3eval[1]=(cj4+(((-4.03284671532847)*(cj4*cj4))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x924=IKPowWithIntegerCheck(cj4,-1);
if(!x924.valid){
continue;
}
IkReal x917=x924.value;
IkReal x918=(cj1*r02);
IkReal x919=((2210.0)*cj4);
IkReal x920=((40000.0)*cj4);
IkReal x921=(cj0*r00*sj1);
IkReal x922=(cj4*sj0*sj1);
IkReal x923=(r01*sj0*sj1);
if( IKabs((x917*(((((-1.0)*x921))+(((-1.0)*x923))+(((-1.0)*x918)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.96780557797507e-5)*x917*(((((-548.0)*x921))+(((-548.0)*x923))+((x919*x923))+((x919*x921))+(((-1.0)*cj1*pz*x920))+(((1692.2172)*cj4))+((x918*x919))+(((-548.0)*x918))+(((-1.0)*cj0*px*sj1*x920))+(((-1.0)*py*sj0*sj1*x920)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x917*(((((-1.0)*x921))+(((-1.0)*x923))+(((-1.0)*x918))))))+IKsqr(((8.96780557797507e-5)*x917*(((((-548.0)*x921))+(((-548.0)*x923))+((x919*x923))+((x919*x921))+(((-1.0)*cj1*pz*x920))+(((1692.2172)*cj4))+((x918*x919))+(((-548.0)*x918))+(((-1.0)*cj0*px*sj1*x920))+(((-1.0)*py*sj0*sj1*x920))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x917*(((((-1.0)*x921))+(((-1.0)*x923))+(((-1.0)*x918))))), ((8.96780557797507e-5)*x917*(((((-548.0)*x921))+(((-548.0)*x923))+((x919*x923))+((x919*x921))+(((-1.0)*cj1*pz*x920))+(((1692.2172)*cj4))+((x918*x919))+(((-548.0)*x918))+(((-1.0)*cj0*px*sj1*x920))+(((-1.0)*py*sj0*sj1*x920))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x925=IKsin(j3);
IkReal x926=IKcos(j3);
IkReal x927=((1.0)*cj1);
IkReal x928=(cj0*r00);
IkReal x929=(r01*sj0);
IkReal x930=(py*sj0);
IkReal x931=(cj0*px);
IkReal x932=(cj4*x925);
IkReal x933=(cj4*x926);
evalcond[0]=(((cj1*r02))+((sj1*x929))+((sj1*x928))+x932);
evalcond[1]=((((-1.0)*x927*x928))+(((-1.0)*x927*x929))+((r02*sj1))+(((-1.0)*x933)));
evalcond[2]=((-0.04230543)+((sj1*x930))+((sj1*x931))+((cj1*pz))+(((0.05525)*x932))+(((-0.0137)*x925))+(((0.278775)*x926)));
evalcond[3]=((((-0.05525)*x933))+(((-1.0)*x927*x930))+(((-1.0)*x927*x931))+(((0.278775)*x925))+((pz*sj1))+(((0.0137)*x926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x934=(cj1*r02);
IkReal x935=(r01*sj0*sj1);
IkReal x936=(cj0*r00*sj1);
IkReal x937=((40000.0)*cj1*cj4);
CheckValue<IkReal> x938=IKPowWithIntegerCheck(cj4,-1);
if(!x938.valid){
continue;
}
CheckValue<IkReal> x939=IKPowWithIntegerCheck(((((548.0)*cj4))+(((-2210.0)*(cj4*cj4)))),-1);
if(!x939.valid){
continue;
}
if( IKabs(((x938.value)*(((((-1.0)*x936))+(((-1.0)*x935))+(((-1.0)*x934)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x939.value)*(((((11151.0)*x936))+(((11151.0)*x935))+(((11151.0)*x934))+((cj0*px*x937))+(((-40000.0)*cj4*pz*sj1))+((py*sj0*x937)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x938.value)*(((((-1.0)*x936))+(((-1.0)*x935))+(((-1.0)*x934))))))+IKsqr(((x939.value)*(((((11151.0)*x936))+(((11151.0)*x935))+(((11151.0)*x934))+((cj0*px*x937))+(((-40000.0)*cj4*pz*sj1))+((py*sj0*x937))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x938.value)*(((((-1.0)*x936))+(((-1.0)*x935))+(((-1.0)*x934))))), ((x939.value)*(((((11151.0)*x936))+(((11151.0)*x935))+(((11151.0)*x934))+((cj0*px*x937))+(((-40000.0)*cj4*pz*sj1))+((py*sj0*x937))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x940=IKsin(j3);
IkReal x941=IKcos(j3);
IkReal x942=((1.0)*cj1);
IkReal x943=(cj0*r00);
IkReal x944=(r01*sj0);
IkReal x945=(py*sj0);
IkReal x946=(cj0*px);
IkReal x947=(cj4*x940);
IkReal x948=(cj4*x941);
evalcond[0]=(((sj1*x944))+((sj1*x943))+((cj1*r02))+x947);
evalcond[1]=((((-1.0)*x942*x944))+(((-1.0)*x942*x943))+((r02*sj1))+(((-1.0)*x948)));
evalcond[2]=((-0.04230543)+((sj1*x946))+((sj1*x945))+(((-0.0137)*x940))+((cj1*pz))+(((0.278775)*x941))+(((0.05525)*x947)));
evalcond[3]=((((-0.05525)*x948))+(((-1.0)*x942*x946))+(((-1.0)*x942*x945))+(((0.278775)*x940))+((pz*sj1))+(((0.0137)*x941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x949=((1.0)*cj1);
IkReal x950=(r01*sj0);
IkReal x951=((1.0)*sj1);
IkReal x952=(cj0*r00);
CheckValue<IkReal> x953 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x949))+(((-1.0)*x950*x951))+(((-1.0)*x951*x952)))),(((r02*sj1))+(((-1.0)*x949*x950))+(((-1.0)*x949*x952))),IKFAST_ATAN2_MAGTHRESH);
if(!x953.valid){
continue;
}
CheckValue<IkReal> x954=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x954.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x953.value)+(((1.5707963267949)*(x954.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x955=IKsin(j3);
IkReal x956=IKcos(j3);
IkReal x957=((1.0)*cj1);
IkReal x958=(cj0*r00);
IkReal x959=(r01*sj0);
IkReal x960=(py*sj0);
IkReal x961=(cj0*px);
IkReal x962=(cj4*x955);
IkReal x963=(cj4*x956);
evalcond[0]=(((cj1*r02))+((sj1*x958))+((sj1*x959))+x962);
evalcond[1]=((((-1.0)*x963))+((r02*sj1))+(((-1.0)*x957*x958))+(((-1.0)*x957*x959)));
evalcond[2]=((-0.04230543)+(((-0.0137)*x955))+((cj1*pz))+((sj1*x961))+((sj1*x960))+(((0.05525)*x962))+(((0.278775)*x956)));
evalcond[3]=((((-0.05525)*x963))+(((0.0137)*x956))+(((-1.0)*x957*x961))+(((-1.0)*x957*x960))+((pz*sj1))+(((0.278775)*x955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x968=IKPowWithIntegerCheck(cj4,-1);
if(!x968.valid){
continue;
}
IkReal x964=x968.value;
IkReal x965=((1.0)*cj1);
IkReal x966=(cj0*r00);
IkReal x967=(r01*sj0);
CheckValue<IkReal> x969=IKPowWithIntegerCheck(cj2,-1);
if(!x969.valid){
continue;
}
if( IKabs((x964*(x969.value)*((((cj1*r02))+(((-1.0)*sj2*sj4))+((sj1*x967))+((sj1*x966)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x964*(((((-1.0)*x965*x966))+(((-1.0)*x965*x967))+((r02*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x964*(x969.value)*((((cj1*r02))+(((-1.0)*sj2*sj4))+((sj1*x967))+((sj1*x966))))))+IKsqr((x964*(((((-1.0)*x965*x966))+(((-1.0)*x965*x967))+((r02*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x964*(x969.value)*((((cj1*r02))+(((-1.0)*sj2*sj4))+((sj1*x967))+((sj1*x966))))), (x964*(((((-1.0)*x965*x966))+(((-1.0)*x965*x967))+((r02*sj1))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x970=IKsin(j3);
IkReal x971=IKcos(j3);
IkReal x972=(sj2*sj4);
IkReal x973=(cj0*px);
IkReal x974=(sj0*sj1);
IkReal x975=((1.0)*sj0);
IkReal x976=((1.0)*cj1);
IkReal x977=(cj0*r00);
IkReal x978=(cj2*sj4);
IkReal x979=((0.05525)*cj4);
IkReal x980=((1.0)*cj4);
IkReal x981=(cj2*x970);
IkReal x982=((0.278775)*x971);
IkReal x983=(sj2*x970);
evalcond[0]=((((-1.0)*r00*x975))+(((-1.0)*x980*x983))+x978+((cj0*r01)));
evalcond[1]=((((-1.0)*cj1*r01*x975))+(((-1.0)*x971*x980))+((r02*sj1))+(((-1.0)*x976*x977)));
evalcond[2]=((((-1.0)*x972))+((cj1*r02))+((r01*x974))+((sj1*x977))+(((-1.0)*x980*x981)));
evalcond[3]=((((-1.0)*x971*x979))+(((0.0137)*x971))+((pz*sj1))+(((0.278775)*x970))+(((-1.0)*cj1*py*x975))+(((-1.0)*x973*x976)));
evalcond[4]=((0.00025116)+(((-1.0)*px*x975))+(((-0.224)*sj2))+(((0.0137)*x983))+(((-1.0)*sj2*x982))+((cj0*py))+(((-1.0)*x979*x983))+(((0.05525)*x978)));
evalcond[5]=((-0.26630543)+(((-0.05525)*x972))+(((-1.0)*cj2*x982))+((cj1*pz))+((sj1*x973))+(((0.0137)*x981))+(((-0.224)*cj2))+((py*x974))+(((-1.0)*x979*x981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x986=IKPowWithIntegerCheck(cj4,-1);
if(!x986.valid){
continue;
}
IkReal x984=x986.value;
IkReal x985=((1.0)*cj1);
CheckValue<IkReal> x987=IKPowWithIntegerCheck(sj2,-1);
if(!x987.valid){
continue;
}
if( IKabs((x984*(x987.value)*((((cj2*sj4))+(((-1.0)*r00*sj0))+((cj0*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x984*(((((-1.0)*r01*sj0*x985))+((r02*sj1))+(((-1.0)*cj0*r00*x985)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x984*(x987.value)*((((cj2*sj4))+(((-1.0)*r00*sj0))+((cj0*r01))))))+IKsqr((x984*(((((-1.0)*r01*sj0*x985))+((r02*sj1))+(((-1.0)*cj0*r00*x985))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x984*(x987.value)*((((cj2*sj4))+(((-1.0)*r00*sj0))+((cj0*r01))))), (x984*(((((-1.0)*r01*sj0*x985))+((r02*sj1))+(((-1.0)*cj0*r00*x985))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x988=IKsin(j3);
IkReal x989=IKcos(j3);
IkReal x990=(sj2*sj4);
IkReal x991=(cj0*px);
IkReal x992=(sj0*sj1);
IkReal x993=((1.0)*sj0);
IkReal x994=((1.0)*cj1);
IkReal x995=(cj0*r00);
IkReal x996=(cj2*sj4);
IkReal x997=((0.05525)*cj4);
IkReal x998=((1.0)*cj4);
IkReal x999=(cj2*x988);
IkReal x1000=((0.278775)*x989);
IkReal x1001=(sj2*x988);
evalcond[0]=((((-1.0)*x1001*x998))+(((-1.0)*r00*x993))+x996+((cj0*r01)));
evalcond[1]=((((-1.0)*x994*x995))+((r02*sj1))+(((-1.0)*cj1*r01*x993))+(((-1.0)*x989*x998)));
evalcond[2]=((((-1.0)*x990))+((r01*x992))+((cj1*r02))+(((-1.0)*x998*x999))+((sj1*x995)));
evalcond[3]=((((-1.0)*x991*x994))+(((-1.0)*cj1*py*x993))+(((0.0137)*x989))+((pz*sj1))+(((-1.0)*x989*x997))+(((0.278775)*x988)));
evalcond[4]=((0.00025116)+(((0.05525)*x996))+(((0.0137)*x1001))+(((-1.0)*px*x993))+(((-0.224)*sj2))+(((-1.0)*x1001*x997))+(((-1.0)*sj2*x1000))+((cj0*py)));
evalcond[5]=((-0.26630543)+((py*x992))+(((0.0137)*x999))+(((-1.0)*x997*x999))+((cj1*pz))+(((-0.224)*cj2))+(((-1.0)*cj2*x1000))+(((-0.05525)*x990))+((sj1*x991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1008=IKPowWithIntegerCheck(cj4,-1);
if(!x1008.valid){
continue;
}
IkReal x1002=x1008.value;
IkReal x1003=(r02*sj1);
IkReal x1004=((2210.0)*cj4);
IkReal x1005=(cj1*r01*sj0);
IkReal x1006=((40000.0)*cj1*cj4);
IkReal x1007=(cj0*cj1*r00);
if( IKabs(((8.96780557797507e-5)*x1002*((((py*sj0*x1006))+((cj0*px*x1006))+(((-1.0)*x1004*x1005))+(((-1.0)*x1004*x1007))+(((548.0)*x1005))+(((548.0)*x1007))+(((-548.0)*x1003))+(((-40000.0)*cj4*pz*sj1))+((x1003*x1004)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1002*(((((-1.0)*x1007))+(((-1.0)*x1005))+x1003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((8.96780557797507e-5)*x1002*((((py*sj0*x1006))+((cj0*px*x1006))+(((-1.0)*x1004*x1005))+(((-1.0)*x1004*x1007))+(((548.0)*x1005))+(((548.0)*x1007))+(((-548.0)*x1003))+(((-40000.0)*cj4*pz*sj1))+((x1003*x1004))))))+IKsqr((x1002*(((((-1.0)*x1007))+(((-1.0)*x1005))+x1003))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((8.96780557797507e-5)*x1002*((((py*sj0*x1006))+((cj0*px*x1006))+(((-1.0)*x1004*x1005))+(((-1.0)*x1004*x1007))+(((548.0)*x1005))+(((548.0)*x1007))+(((-548.0)*x1003))+(((-40000.0)*cj4*pz*sj1))+((x1003*x1004))))), (x1002*(((((-1.0)*x1007))+(((-1.0)*x1005))+x1003))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1009=IKsin(j3);
IkReal x1010=IKcos(j3);
IkReal x1011=(sj2*sj4);
IkReal x1012=(cj0*px);
IkReal x1013=(sj0*sj1);
IkReal x1014=((1.0)*sj0);
IkReal x1015=((1.0)*cj1);
IkReal x1016=(cj0*r00);
IkReal x1017=(cj2*sj4);
IkReal x1018=((0.05525)*cj4);
IkReal x1019=((1.0)*cj4);
IkReal x1020=(cj2*x1009);
IkReal x1021=((0.278775)*x1010);
IkReal x1022=(sj2*x1009);
evalcond[0]=(x1017+(((-1.0)*x1019*x1022))+(((-1.0)*r00*x1014))+((cj0*r01)));
evalcond[1]=((((-1.0)*x1010*x1019))+(((-1.0)*x1015*x1016))+((r02*sj1))+(((-1.0)*cj1*r01*x1014)));
evalcond[2]=(((sj1*x1016))+((cj1*r02))+(((-1.0)*x1019*x1020))+((r01*x1013))+(((-1.0)*x1011)));
evalcond[3]=((((-1.0)*x1012*x1015))+(((0.278775)*x1009))+(((-1.0)*x1010*x1018))+(((-1.0)*cj1*py*x1014))+(((0.0137)*x1010))+((pz*sj1)));
evalcond[4]=((0.00025116)+(((-1.0)*px*x1014))+(((-0.224)*sj2))+(((-1.0)*x1018*x1022))+(((0.0137)*x1022))+(((0.05525)*x1017))+((cj0*py))+(((-1.0)*sj2*x1021)));
evalcond[5]=((-0.26630543)+((sj1*x1012))+(((-1.0)*x1018*x1020))+((cj1*pz))+(((-0.05525)*x1011))+(((0.0137)*x1020))+(((-0.224)*cj2))+(((-1.0)*cj2*x1021))+((py*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1023=cj2*cj2;
IkReal x1024=(r01*sj0);
IkReal x1025=(cj2*sj1);
IkReal x1026=((0.05525)*cj1);
IkReal x1027=(py*sj0);
IkReal x1028=(cj0*r00);
IkReal x1029=(cj0*px);
IkReal x1030=((1.0)*cj1);
IkReal x1031=(cj1*cj2*r02);
IkReal x1032=(cj1*cj2*pz);
IkReal x1033=((((-1.0)*x1027*x1030))+(((-1.0)*x1029*x1030))+(((-0.05525)*r02*sj1))+((x1026*x1028))+((pz*sj1))+((x1024*x1026)));
IkReal x1034=(x1023*x1033);
CheckValue<IkReal> x1035=IKPowWithIntegerCheck(IKsign(x1023),-1);
if(!x1035.valid){
continue;
}
CheckValue<IkReal> x1036 = IKatan2WithCheck(IkReal(((((-30.277)*x1031))+(((548.0)*x1032))+(((-145.93537564)*cj2))+(((548.0)*x1025*x1027))+(((548.0)*x1025*x1029))+(((-122.752)*x1023))+(((-30.277)*x1025*x1028))+(((-30.277)*x1024*x1025))+(((11151.0)*x1034)))),((((2969.57184993)*cj2))+(((616.09275)*x1031))+(((548.0)*x1034))+(((616.09275)*x1024*x1025))+(((-11151.0)*x1032))+(((-11151.0)*x1025*x1029))+(((-11151.0)*x1025*x1027))+(((2497.824)*x1023))+(((616.09275)*x1025*x1028))),IKFAST_ATAN2_MAGTHRESH);
if(!x1036.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1035.value)))+(x1036.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1037=sj2*sj2;
IkReal x1038=IKsin(j3);
IkReal x1039=IKcos(j3);
IkReal x1040=cj2*cj2;
IkReal x1041=((0.05525)*r00);
IkReal x1042=(cj0*sj2);
IkReal x1043=(py*sj0);
IkReal x1044=(cj2*sj1);
IkReal x1045=((0.05525)*r02);
IkReal x1046=(cj1*cj2);
IkReal x1047=(sj0*sj2);
IkReal x1048=(cj0*cj1);
IkReal x1049=((1.0)*px);
IkReal x1050=(cj0*x1044);
IkReal x1051=((0.0137)*x1038);
IkReal x1052=((0.278775)*x1039);
IkReal x1053=((0.05525)*r01*sj0);
evalcond[0]=(((x1037*x1051))+(((-0.05525)*r01*x1042))+((x1041*x1047))+((py*x1042))+(((-1.0)*x1037*x1052))+(((-0.224)*x1037))+(((-1.0)*x1047*x1049))+(((0.00025116)*sj2)));
evalcond[1]=((((0.0137)*x1039))+((x1041*x1048))+(((-1.0)*cj1*x1043))+((cj1*x1053))+(((-1.0)*sj1*x1045))+(((-1.0)*x1048*x1049))+((pz*sj1))+(((0.278775)*x1038)));
evalcond[2]=(((x1043*x1044))+((px*x1050))+(((-1.0)*x1045*x1046))+(((-1.0)*x1044*x1053))+((x1040*x1051))+(((-0.26630543)*cj2))+((pz*x1046))+(((-1.0)*x1041*x1050))+(((-1.0)*x1040*x1052))+(((-0.224)*x1040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x1054=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x1054))+((r02*sj1))+(((-1.0)*r01*sj0*x1054)));
evalcond[2]=((0.278775)+(((-1.0)*py*sj0*x1054))+(((-1.0)*cj0*px*x1054))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1055=(r01*sj2);
IkReal x1056=(sj0*sj1);
IkReal x1057=(cj2*r01);
IkReal x1058=(r00*sj0);
IkReal x1059=(cj1*r02);
IkReal x1060=(cj0*r00*sj1);
if( IKabs((((x1055*x1056))+((sj2*x1060))+((sj2*x1059))+((cj2*x1058))+(((-1.0)*cj0*x1057)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*x1055))+((x1056*x1057))+((cj2*x1060))+(((-1.0)*sj2*x1058))+((cj2*x1059)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1055*x1056))+((sj2*x1060))+((sj2*x1059))+((cj2*x1058))+(((-1.0)*cj0*x1057))))+IKsqr((((cj0*x1055))+((x1056*x1057))+((cj2*x1060))+(((-1.0)*sj2*x1058))+((cj2*x1059))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1055*x1056))+((sj2*x1060))+((sj2*x1059))+((cj2*x1058))+(((-1.0)*cj0*x1057))), (((cj0*x1055))+((x1056*x1057))+((cj2*x1060))+(((-1.0)*sj2*x1058))+((cj2*x1059))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1061=IKcos(j4);
IkReal x1062=IKsin(j4);
IkReal x1063=((1.0)*sj2);
IkReal x1064=(sj0*sj1);
IkReal x1065=(cj0*sj1);
IkReal x1066=((1.0)*sj0);
IkReal x1067=((0.05525)*x1061);
IkReal x1068=(cj2*x1062);
evalcond[0]=(x1068+(((-1.0)*r00*x1066))+(((-1.0)*x1061*x1063))+((cj0*r01)));
evalcond[1]=((((-1.0)*cj2*x1061))+((cj1*r02))+(((-1.0)*x1062*x1063))+((r01*x1064))+((r00*x1065)));
evalcond[2]=((0.00025116)+(((-1.0)*px*x1066))+(((-1.0)*sj2*x1067))+(((0.05525)*x1068))+(((-0.2103)*sj2))+((cj0*py)));
evalcond[3]=((-0.26630543)+(((-0.2103)*cj2))+((py*x1064))+((px*x1065))+((cj1*pz))+(((-0.05525)*sj2*x1062))+(((-1.0)*cj2*x1067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1069=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x1069))+((r02*sj1))+(((-1.0)*r01*sj0*x1069)));
evalcond[2]=((-0.278775)+((pz*sj1))+(((-1.0)*py*sj0*x1069))+(((-1.0)*cj0*px*x1069)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1070=((1.0)*cj2);
IkReal x1071=(r00*sj0);
IkReal x1072=(cj1*r02);
IkReal x1073=(cj0*sj2);
IkReal x1074=(r00*sj1);
IkReal x1075=(r01*sj0*sj1);
if( IKabs((((sj2*x1075))+((sj2*x1072))+(((-1.0)*cj0*r01*x1070))+((cj2*x1071))+((x1073*x1074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x1070*x1074))+(((-1.0)*x1070*x1075))+(((-1.0)*x1070*x1072))+((sj2*x1071))+(((-1.0)*r01*x1073)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x1075))+((sj2*x1072))+(((-1.0)*cj0*r01*x1070))+((cj2*x1071))+((x1073*x1074))))+IKsqr(((((-1.0)*cj0*x1070*x1074))+(((-1.0)*x1070*x1075))+(((-1.0)*x1070*x1072))+((sj2*x1071))+(((-1.0)*r01*x1073))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj2*x1075))+((sj2*x1072))+(((-1.0)*cj0*r01*x1070))+((cj2*x1071))+((x1073*x1074))), ((((-1.0)*cj0*x1070*x1074))+(((-1.0)*x1070*x1075))+(((-1.0)*x1070*x1072))+((sj2*x1071))+(((-1.0)*r01*x1073))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1076=IKcos(j4);
IkReal x1077=IKsin(j4);
IkReal x1078=(sj0*sj1);
IkReal x1079=(cj0*sj1);
IkReal x1080=((1.0)*sj0);
IkReal x1081=(sj2*x1077);
IkReal x1082=((0.05525)*x1076);
IkReal x1083=(cj2*x1077);
evalcond[0]=(x1083+((sj2*x1076))+(((-1.0)*r00*x1080))+((cj0*r01)));
evalcond[1]=(((cj1*r02))+((cj2*x1076))+(((-1.0)*x1081))+((r00*x1079))+((r01*x1078)));
evalcond[2]=((0.00025116)+(((0.05525)*x1083))+((sj2*x1082))+((cj0*py))+(((-1.0)*px*x1080))+(((-0.2377)*sj2)));
evalcond[3]=((-0.26630543)+((px*x1079))+((py*x1078))+((cj1*pz))+(((-0.2377)*cj2))+((cj2*x1082))+(((-0.05525)*x1081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x1084=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x1084))+(((-1.0)*r01*sj0*x1084))+((r02*sj1)));
evalcond[2]=((0.278775)+(((-1.0)*cj0*px*x1084))+(((-1.0)*py*sj0*x1084))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), (((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1085=IKsin(j4);
IkReal x1086=IKcos(j4);
IkReal x1087=(sj0*sj1);
IkReal x1088=(cj0*sj1);
IkReal x1089=((1.0)*sj0);
evalcond[0]=(x1085+(((-1.0)*r00*x1089))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x1085))+((cj0*py))+(((-1.0)*px*x1089)));
evalcond[2]=(((r00*x1088))+((cj1*r02))+((r01*x1087))+(((-1.0)*x1086)));
evalcond[3]=((-0.47660543)+((py*x1087))+((px*x1088))+((cj1*pz))+(((-0.05525)*x1086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1090=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x1090))+((r02*sj1))+(((-1.0)*r01*sj0*x1090)));
evalcond[2]=((-0.278775)+((pz*sj1))+(((-1.0)*py*sj0*x1090))+(((-1.0)*cj0*px*x1090)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1091=((1.0)*sj1);
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r00*x1091))+(((-1.0)*r01*sj0*x1091))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr(((((-1.0)*cj0*r00*x1091))+(((-1.0)*r01*sj0*x1091))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), ((((-1.0)*cj0*r00*x1091))+(((-1.0)*r01*sj0*x1091))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1092=IKsin(j4);
IkReal x1093=IKcos(j4);
IkReal x1094=(sj0*sj1);
IkReal x1095=(cj0*sj1);
IkReal x1096=((1.0)*sj0);
evalcond[0]=(x1092+(((-1.0)*r00*x1096))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x1092))+((cj0*py))+(((-1.0)*px*x1096)));
evalcond[2]=(x1093+((r01*x1094))+((r00*x1095))+((cj1*r02)));
evalcond[3]=((-0.50400543)+(((0.05525)*x1093))+((cj1*pz))+((py*x1094))+((px*x1095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1097=(sj0*sj1);
IkReal x1098=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((r01*x1097))+((r00*x1098))+((cj1*r02)));
evalcond[2]=((-0.76908043)+((cj1*pz))+((py*x1097))+((px*x1098)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1099=((1.0)*cj0);
if( IKabs((((r00*sj0))+(((-1.0)*r01*x1099)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*cj1*r00*x1099))+(((-1.0)*cj1*r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*r01*x1099))))+IKsqr((((r02*sj1))+(((-1.0)*cj1*r00*x1099))+(((-1.0)*cj1*r01*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*r01*x1099))), (((r02*sj1))+(((-1.0)*cj1*r00*x1099))+(((-1.0)*cj1*r01*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1100=IKsin(j4);
IkReal x1101=IKcos(j4);
IkReal x1102=((1.0)*cj1);
IkReal x1103=((1.0)*sj0);
evalcond[0]=(x1100+(((-1.0)*r00*x1103))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x1100))+(((-1.0)*px*x1103))+((cj0*py)));
evalcond[2]=((((-1.0)*r01*sj0*x1102))+(((-1.0)*x1101))+((r02*sj1))+(((-1.0)*cj0*r00*x1102)));
evalcond[3]=((0.0137)+(((-1.0)*cj0*px*x1102))+(((-1.0)*py*sj0*x1102))+(((-0.05525)*x1101))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1104=(sj0*sj1);
IkReal x1105=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj1*r02))+((r01*x1104))+((r00*x1105)));
evalcond[2]=((-0.21153043)+((cj1*pz))+((py*x1104))+((px*x1105)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), (((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1106=IKsin(j4);
IkReal x1107=IKcos(j4);
IkReal x1108=((1.0)*cj1);
IkReal x1109=((1.0)*sj0);
evalcond[0]=(x1106+(((-1.0)*r00*x1109))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x1106))+(((-1.0)*px*x1109))+((cj0*py)));
evalcond[2]=(x1107+(((-1.0)*r01*sj0*x1108))+((r02*sj1))+(((-1.0)*cj0*r00*x1108)));
evalcond[3]=((-0.0137)+(((0.05525)*x1107))+(((-1.0)*cj0*px*x1108))+(((-1.0)*py*sj0*x1108))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1110=((1.0)*r01);
CheckValue<IkReal> x1111=IKPowWithIntegerCheck(cj3,-1);
if(!x1111.valid){
continue;
}
if( IKabs((((r00*sj0))+(((-1.0)*cj0*x1110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1111.value)*(((((-1.0)*cj0*cj1*r00))+(((-1.0)*cj1*sj0*x1110))+((r02*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*x1110))))+IKsqr(((x1111.value)*(((((-1.0)*cj0*cj1*r00))+(((-1.0)*cj1*sj0*x1110))+((r02*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*x1110))), ((x1111.value)*(((((-1.0)*cj0*cj1*r00))+(((-1.0)*cj1*sj0*x1110))+((r02*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1112=IKsin(j4);
IkReal x1113=IKcos(j4);
IkReal x1114=(cj0*px);
IkReal x1115=(sj0*sj1);
IkReal x1116=((1.0)*cj1);
IkReal x1117=((1.0)*sj0);
IkReal x1118=(cj0*r00);
IkReal x1119=((1.0)*x1113);
IkReal x1120=((0.05525)*x1113);
evalcond[0]=(x1112+(((-1.0)*r00*x1117))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x1112))+(((-1.0)*px*x1117))+((cj0*py)));
evalcond[2]=(((cj1*r02))+((r01*x1115))+(((-1.0)*sj3*x1119))+((sj1*x1118)));
evalcond[3]=((((-1.0)*r01*sj0*x1116))+(((-1.0)*x1116*x1118))+((r02*sj1))+(((-1.0)*cj3*x1119)));
evalcond[4]=((-0.49030543)+(((-1.0)*sj3*x1120))+((cj1*pz))+((py*x1115))+((sj1*x1114))+(((-0.278775)*cj3))+(((0.0137)*sj3)));
evalcond[5]=((((-1.0)*x1114*x1116))+(((0.0137)*cj3))+(((-1.0)*py*sj0*x1116))+(((-1.0)*cj3*x1120))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1121=IKPowWithIntegerCheck(sj3,-1);
if(!x1121.valid){
continue;
}
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1121.value)*((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr(((x1121.value)*((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), ((x1121.value)*((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1122=IKsin(j4);
IkReal x1123=IKcos(j4);
IkReal x1124=(cj0*px);
IkReal x1125=(sj0*sj1);
IkReal x1126=((1.0)*cj1);
IkReal x1127=((1.0)*sj0);
IkReal x1128=(cj0*r00);
IkReal x1129=((1.0)*x1123);
IkReal x1130=((0.05525)*x1123);
evalcond[0]=(x1122+(((-1.0)*r00*x1127))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x1122))+((cj0*py))+(((-1.0)*px*x1127)));
evalcond[2]=((((-1.0)*sj3*x1129))+((r01*x1125))+((sj1*x1128))+((cj1*r02)));
evalcond[3]=((((-1.0)*r01*sj0*x1126))+(((-1.0)*x1126*x1128))+((r02*sj1))+(((-1.0)*cj3*x1129)));
evalcond[4]=((-0.49030543)+(((-1.0)*sj3*x1130))+((sj1*x1124))+((cj1*pz))+((py*x1125))+(((-0.278775)*cj3))+(((0.0137)*sj3)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*cj3*x1130))+((pz*sj1))+(((-1.0)*x1124*x1126))+(((-1.0)*py*sj0*x1126))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x1131=(sj0*sj1);
IkReal x1132=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((r01*x1131))+((r00*x1132))+((cj1*r02)));
evalcond[2]=((0.23646957)+((py*x1131))+((cj1*pz))+((px*x1132)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1133=((1.0)*cj1);
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r00*x1133))+((r02*sj1))+(((-1.0)*r01*sj0*x1133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((((-1.0)*cj0*r00*x1133))+((r02*sj1))+(((-1.0)*r01*sj0*x1133))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((((-1.0)*cj0*r00*x1133))+((r02*sj1))+(((-1.0)*r01*sj0*x1133))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1134=IKsin(j4);
IkReal x1135=IKcos(j4);
IkReal x1136=((1.0)*cj1);
IkReal x1137=((1.0)*sj0);
evalcond[0]=((((-1.0)*x1134))+(((-1.0)*r00*x1137))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-0.05525)*x1134))+((cj0*py))+(((-1.0)*px*x1137)));
evalcond[2]=((((-1.0)*cj0*r00*x1136))+((r02*sj1))+(((-1.0)*x1135))+(((-1.0)*r01*sj0*x1136)));
evalcond[3]=((0.0137)+(((-1.0)*py*sj0*x1136))+(((-0.05525)*x1135))+(((-1.0)*cj0*px*x1136))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1138=(sj0*sj1);
IkReal x1139=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((r01*x1138))+((r00*x1139))+((cj1*r02)));
evalcond[2]=((-0.32108043)+((py*x1138))+((cj1*pz))+((px*x1139)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), (((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1140=IKsin(j4);
IkReal x1141=IKcos(j4);
IkReal x1142=((1.0)*cj1);
IkReal x1143=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x1143))+(((-1.0)*x1140))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x1143))+((cj0*py))+(((-0.05525)*x1140)));
evalcond[2]=(x1141+((r02*sj1))+(((-1.0)*cj0*r00*x1142))+(((-1.0)*r01*sj0*x1142)));
evalcond[3]=((-0.0137)+(((-1.0)*py*sj0*x1142))+(((-1.0)*cj0*px*x1142))+(((0.05525)*x1141))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1144=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r02*sj1))+(((-1.0)*cj0*r00*x1144))+(((-1.0)*r01*sj0*x1144)));
evalcond[2]=((0.278775)+(((-1.0)*py*sj0*x1144))+(((-1.0)*cj0*px*x1144))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1145=((1.0)*sj1);
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r00*x1145))+(((-1.0)*r01*sj0*x1145))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((((-1.0)*cj0*r00*x1145))+(((-1.0)*r01*sj0*x1145))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((((-1.0)*cj0*r00*x1145))+(((-1.0)*r01*sj0*x1145))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1146=IKsin(j4);
IkReal x1147=IKcos(j4);
IkReal x1148=(cj0*sj1);
IkReal x1149=(sj0*sj1);
IkReal x1150=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x1150))+(((-1.0)*x1146))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x1150))+((cj0*py))+(((-0.05525)*x1146)));
evalcond[2]=(x1147+((cj1*r02))+((r01*x1149))+((r00*x1148)));
evalcond[3]=((-0.05600543)+((py*x1149))+((cj1*pz))+(((0.05525)*x1147))+((px*x1148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1151=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x1151))+((r02*sj1))+(((-1.0)*r01*sj0*x1151)));
evalcond[2]=((-0.278775)+(((-1.0)*py*sj0*x1151))+(((-1.0)*cj0*px*x1151))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), (((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1152=IKsin(j4);
IkReal x1153=IKcos(j4);
IkReal x1154=(cj0*sj1);
IkReal x1155=(sj0*sj1);
IkReal x1156=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x1156))+(((-1.0)*x1152))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-0.05525)*x1152))+(((-1.0)*px*x1156))+((cj0*py)));
evalcond[2]=(((r00*x1154))+((cj1*r02))+(((-1.0)*x1153))+((r01*x1155)));
evalcond[3]=((-0.02860543)+(((-0.05525)*x1153))+((cj1*pz))+((px*x1154))+((py*x1155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1157=((1.0)*sj1);
CheckValue<IkReal> x1158=IKPowWithIntegerCheck(sj3,-1);
if(!x1158.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1158.value)*(((((-1.0)*cj0*r00*x1157))+(((-1.0)*r01*sj0*x1157))+(((-1.0)*cj1*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((x1158.value)*(((((-1.0)*cj0*r00*x1157))+(((-1.0)*r01*sj0*x1157))+(((-1.0)*cj1*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((x1158.value)*(((((-1.0)*cj0*r00*x1157))+(((-1.0)*r01*sj0*x1157))+(((-1.0)*cj1*r02))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1159=IKsin(j4);
IkReal x1160=IKcos(j4);
IkReal x1161=(cj0*px);
IkReal x1162=(sj0*sj1);
IkReal x1163=((1.0)*cj1);
IkReal x1164=((1.0)*sj0);
IkReal x1165=(cj0*r00);
IkReal x1166=(cj3*x1160);
IkReal x1167=(sj3*x1160);
evalcond[0]=((((-1.0)*x1159))+(((-1.0)*r00*x1164))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-0.05525)*x1159))+(((-1.0)*px*x1164))+((cj0*py)));
evalcond[2]=(x1167+((sj1*x1165))+((r01*x1162))+((cj1*r02)));
evalcond[3]=((((-1.0)*r01*sj0*x1163))+(((-1.0)*x1163*x1165))+((r02*sj1))+(((-1.0)*x1166)));
evalcond[4]=((-0.04230543)+(((0.05525)*x1167))+((sj1*x1161))+(((0.278775)*cj3))+((cj1*pz))+(((-0.0137)*sj3))+((py*x1162)));
evalcond[5]=((((0.0137)*cj3))+(((-0.05525)*x1166))+((pz*sj1))+(((-1.0)*x1161*x1163))+(((-1.0)*py*sj0*x1163))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1168=((1.0)*cj1);
CheckValue<IkReal> x1169=IKPowWithIntegerCheck(cj3,-1);
if(!x1169.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1169.value)*(((((-1.0)*cj0*r00*x1168))+(((-1.0)*r01*sj0*x1168))+((r02*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((x1169.value)*(((((-1.0)*cj0*r00*x1168))+(((-1.0)*r01*sj0*x1168))+((r02*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((x1169.value)*(((((-1.0)*cj0*r00*x1168))+(((-1.0)*r01*sj0*x1168))+((r02*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1170=IKsin(j4);
IkReal x1171=IKcos(j4);
IkReal x1172=(cj0*px);
IkReal x1173=(sj0*sj1);
IkReal x1174=((1.0)*cj1);
IkReal x1175=((1.0)*sj0);
IkReal x1176=(cj0*r00);
IkReal x1177=(cj3*x1171);
IkReal x1178=(sj3*x1171);
evalcond[0]=((((-1.0)*r00*x1175))+((cj0*r01))+(((-1.0)*x1170)));
evalcond[1]=((0.00025116)+(((-0.05525)*x1170))+(((-1.0)*px*x1175))+((cj0*py)));
evalcond[2]=(x1178+((sj1*x1176))+((r01*x1173))+((cj1*r02)));
evalcond[3]=((((-1.0)*r01*sj0*x1174))+((r02*sj1))+(((-1.0)*x1174*x1176))+(((-1.0)*x1177)));
evalcond[4]=((-0.04230543)+(((0.05525)*x1178))+((sj1*x1172))+(((0.278775)*cj3))+((cj1*pz))+(((-0.0137)*sj3))+((py*x1173)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*x1172*x1174))+(((-0.05525)*x1177))+((pz*sj1))+(((0.278775)*sj3))+(((-1.0)*py*sj0*x1174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x1179=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r01*sj0*x1179))+(((-1.0)*cj0*r00*x1179))+((r02*sj1)));
evalcond[2]=((0.278775)+(((-1.0)*cj0*px*x1179))+((pz*sj1))+(((-1.0)*py*sj0*x1179)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))+IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))), ((((-1.0)*r00*sj0))+((cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1180=IKcos(j4);
IkReal x1181=IKsin(j4);
IkReal x1182=(sj0*sj1);
IkReal x1183=(cj0*sj1);
IkReal x1184=((1.0)*sj0);
evalcond[0]=((((-1.0)*x1180))+(((-1.0)*r00*x1184))+((cj0*r01)));
evalcond[1]=((-0.21004884)+(((-0.05525)*x1180))+((cj0*py))+(((-1.0)*px*x1184)));
evalcond[2]=(((r00*x1183))+((r01*x1182))+((cj1*r02))+(((-1.0)*x1181)));
evalcond[3]=((-0.26630543)+(((-0.05525)*x1181))+((py*x1182))+((cj1*pz))+((px*x1183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1185=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r02*sj1))+(((-1.0)*r01*sj0*x1185))+(((-1.0)*cj0*r00*x1185)));
evalcond[2]=((-0.278775)+(((-1.0)*py*sj0*x1185))+((pz*sj1))+(((-1.0)*cj0*px*x1185)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))+IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))), (((r00*sj0))+(((-1.0)*cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1186=IKcos(j4);
IkReal x1187=IKsin(j4);
IkReal x1188=(sj0*sj1);
IkReal x1189=(cj0*sj1);
IkReal x1190=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x1190))+x1186+((cj0*r01)));
evalcond[1]=((-0.23744884)+(((0.05525)*x1186))+(((-1.0)*px*x1190))+((cj0*py)));
evalcond[2]=(((r00*x1189))+((r01*x1188))+((cj1*r02))+(((-1.0)*x1187)));
evalcond[3]=((-0.26630543)+(((-0.05525)*x1187))+((py*x1188))+((cj1*pz))+((px*x1189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1191=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x1191))+((cj0*r01)));
evalcond[2]=((-0.50252384)+(((-1.0)*px*x1191))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1192=((1.0)*cj1);
IkReal x1193=(cj0*r00);
IkReal x1194=(r01*sj0);
if( IKabs((((cj1*r02))+((sj1*x1194))+((sj1*x1193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*x1192*x1193))+(((-1.0)*x1192*x1194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x1194))+((sj1*x1193))))+IKsqr((((r02*sj1))+(((-1.0)*x1192*x1193))+(((-1.0)*x1192*x1194))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x1194))+((sj1*x1193))), (((r02*sj1))+(((-1.0)*x1192*x1193))+(((-1.0)*x1192*x1194))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1195=IKsin(j4);
IkReal x1196=IKcos(j4);
IkReal x1197=(sj0*sj1);
IkReal x1198=(cj0*sj1);
IkReal x1199=((1.0)*cj0*cj1);
IkReal x1200=((1.0)*cj1*sj0);
evalcond[0]=(((r01*x1197))+((r00*x1198))+((cj1*r02))+(((-1.0)*x1195)));
evalcond[1]=((-0.26630543)+((py*x1197))+(((-0.05525)*x1195))+((cj1*pz))+((px*x1198)));
evalcond[2]=((((-1.0)*r00*x1199))+(((-1.0)*r01*x1200))+((r02*sj1))+(((-1.0)*x1196)));
evalcond[3]=((0.0137)+(((-0.05525)*x1196))+(((-1.0)*px*x1199))+((pz*sj1))+(((-1.0)*py*x1200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1201=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x1201))+((cj0*r01)));
evalcond[2]=((0.05502616)+(((-1.0)*px*x1201))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1202=(r01*sj0);
IkReal x1203=(cj0*r00);
if( IKabs((((cj1*r02))+((sj1*x1202))+((sj1*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1203))+((cj1*x1202))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x1202))+((sj1*x1203))))+IKsqr((((cj1*x1203))+((cj1*x1202))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x1202))+((sj1*x1203))), (((cj1*x1203))+((cj1*x1202))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1204=IKsin(j4);
IkReal x1205=IKcos(j4);
IkReal x1206=(cj0*r00);
IkReal x1207=(r01*sj0);
IkReal x1208=((1.0)*cj1);
IkReal x1209=(py*sj0);
IkReal x1210=(cj0*px);
evalcond[0]=(x1205+((r02*sj1))+(((-1.0)*x1206*x1208))+(((-1.0)*x1207*x1208)));
evalcond[1]=(((cj1*r02))+((sj1*x1206))+((sj1*x1207))+(((-1.0)*x1204)));
evalcond[2]=((-0.26630543)+((cj1*pz))+((sj1*x1209))+((sj1*x1210))+(((-0.05525)*x1204)));
evalcond[3]=((-0.0137)+(((-1.0)*x1208*x1210))+((pz*sj1))+(((0.05525)*x1205))+(((-1.0)*x1208*x1209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1211=((1.0)*cj1);
IkReal x1212=(cj0*r00);
IkReal x1213=(r01*sj0);
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(cj3,-1);
if(!x1214.valid){
continue;
}
if( IKabs((((cj1*r02))+((sj1*x1213))+((sj1*x1212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1214.value)*((((r02*sj1))+(((-1.0)*x1211*x1213))+(((-1.0)*x1211*x1212)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x1213))+((sj1*x1212))))+IKsqr(((x1214.value)*((((r02*sj1))+(((-1.0)*x1211*x1213))+(((-1.0)*x1211*x1212))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x1213))+((sj1*x1212))), ((x1214.value)*((((r02*sj1))+(((-1.0)*x1211*x1213))+(((-1.0)*x1211*x1212))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1215=IKsin(j4);
IkReal x1216=IKcos(j4);
IkReal x1217=(cj0*px);
IkReal x1218=(sj0*sj1);
IkReal x1219=((1.0)*cj1);
IkReal x1220=((1.0)*sj0);
IkReal x1221=(cj0*r00);
IkReal x1222=((1.0)*x1216);
IkReal x1223=((0.05525)*x1216);
evalcond[0]=((((-1.0)*r00*x1220))+(((-1.0)*sj3*x1222))+((cj0*r01)));
evalcond[1]=(((sj1*x1221))+((cj1*r02))+((r01*x1218))+(((-1.0)*x1215)));
evalcond[2]=((-0.26630543)+((cj1*pz))+(((-0.05525)*x1215))+((sj1*x1217))+((py*x1218)));
evalcond[3]=(((r02*sj1))+(((-1.0)*x1219*x1221))+(((-1.0)*r01*sj0*x1219))+(((-1.0)*cj3*x1222)));
evalcond[4]=((-0.22374884)+(((-1.0)*px*x1220))+(((-1.0)*sj3*x1223))+(((-0.278775)*cj3))+(((0.0137)*sj3))+((cj0*py)));
evalcond[5]=((((-1.0)*py*sj0*x1219))+(((0.0137)*cj3))+(((-1.0)*x1217*x1219))+((pz*sj1))+(((0.278775)*sj3))+(((-1.0)*cj3*x1223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1224=IKPowWithIntegerCheck(sj3,-1);
if(!x1224.valid){
continue;
}
if( IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1224.value)*(((((-1.0)*r00*sj0))+((cj0*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))+IKsqr(((x1224.value)*(((((-1.0)*r00*sj0))+((cj0*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))), ((x1224.value)*(((((-1.0)*r00*sj0))+((cj0*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1225=IKsin(j4);
IkReal x1226=IKcos(j4);
IkReal x1227=(cj0*px);
IkReal x1228=(sj0*sj1);
IkReal x1229=((1.0)*cj1);
IkReal x1230=((1.0)*sj0);
IkReal x1231=(cj0*r00);
IkReal x1232=((1.0)*x1226);
IkReal x1233=((0.05525)*x1226);
evalcond[0]=((((-1.0)*r00*x1230))+(((-1.0)*sj3*x1232))+((cj0*r01)));
evalcond[1]=(((sj1*x1231))+(((-1.0)*x1225))+((r01*x1228))+((cj1*r02)));
evalcond[2]=((-0.26630543)+((sj1*x1227))+((py*x1228))+(((-0.05525)*x1225))+((cj1*pz)));
evalcond[3]=((((-1.0)*r01*sj0*x1229))+((r02*sj1))+(((-1.0)*x1229*x1231))+(((-1.0)*cj3*x1232)));
evalcond[4]=((-0.22374884)+(((-1.0)*px*x1230))+(((-1.0)*sj3*x1233))+(((-0.278775)*cj3))+(((0.0137)*sj3))+((cj0*py)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*py*sj0*x1229))+(((-1.0)*x1227*x1229))+((pz*sj1))+(((-1.0)*cj3*x1233))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x1234=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x1234))+(((-1.0)*r01*sj0*x1234))+((r02*sj1)));
evalcond[2]=((0.278775)+(((-1.0)*py*sj0*x1234))+((pz*sj1))+(((-1.0)*cj0*px*x1234)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1235=((1.0)*sj1);
if( IKabs(((((-1.0)*cj0*r00*x1235))+(((-1.0)*r01*sj0*x1235))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r00*x1235))+(((-1.0)*r01*sj0*x1235))+(((-1.0)*cj1*r02))))+IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*r00*x1235))+(((-1.0)*r01*sj0*x1235))+(((-1.0)*cj1*r02))), (((r00*sj0))+(((-1.0)*cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1236=IKcos(j4);
IkReal x1237=IKsin(j4);
IkReal x1238=(sj0*sj1);
IkReal x1239=(cj0*sj1);
IkReal x1240=((1.0)*sj0);
evalcond[0]=(x1236+(((-1.0)*r00*x1240))+((cj0*r01)));
evalcond[1]=((0.21055116)+(((-1.0)*px*x1240))+(((0.05525)*x1236))+((cj0*py)));
evalcond[2]=(x1237+((r00*x1239))+((r01*x1238))+((cj1*r02)));
evalcond[3]=((-0.26630543)+((py*x1238))+(((0.05525)*x1237))+((cj1*pz))+((px*x1239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1241=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r01*sj0*x1241))+((r02*sj1))+(((-1.0)*cj0*r00*x1241)));
evalcond[2]=((-0.278775)+(((-1.0)*py*sj0*x1241))+(((-1.0)*cj0*px*x1241))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1242=((1.0)*sj1);
if( IKabs(((((-1.0)*r01*sj0*x1242))+(((-1.0)*cj1*r02))+(((-1.0)*cj0*r00*x1242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0*x1242))+(((-1.0)*cj1*r02))+(((-1.0)*cj0*r00*x1242))))+IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*sj0*x1242))+(((-1.0)*cj1*r02))+(((-1.0)*cj0*r00*x1242))), ((((-1.0)*r00*sj0))+((cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1243=IKcos(j4);
IkReal x1244=IKsin(j4);
IkReal x1245=(sj0*sj1);
IkReal x1246=(cj0*sj1);
IkReal x1247=((1.0)*sj0);
evalcond[0]=((((-1.0)*x1243))+(((-1.0)*r00*x1247))+((cj0*r01)));
evalcond[1]=((0.23795116)+(((-1.0)*px*x1247))+(((-0.05525)*x1243))+((cj0*py)));
evalcond[2]=(x1244+((cj1*r02))+((r01*x1245))+((r00*x1246)));
evalcond[3]=((-0.26630543)+(((0.05525)*x1244))+((py*x1245))+((cj1*pz))+((px*x1246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1248=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x1248))+((cj0*r01)));
evalcond[2]=((0.50302616)+(((-1.0)*px*x1248))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1249=((1.0)*cj1);
IkReal x1250=(r01*sj0);
IkReal x1251=((1.0)*sj1);
IkReal x1252=(cj0*r00);
if( IKabs(((((-1.0)*r02*x1249))+(((-1.0)*x1251*x1252))+(((-1.0)*x1250*x1251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1249*x1250))+(((-1.0)*x1249*x1252))+((r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x1249))+(((-1.0)*x1251*x1252))+(((-1.0)*x1250*x1251))))+IKsqr(((((-1.0)*x1249*x1250))+(((-1.0)*x1249*x1252))+((r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r02*x1249))+(((-1.0)*x1251*x1252))+(((-1.0)*x1250*x1251))), ((((-1.0)*x1249*x1250))+(((-1.0)*x1249*x1252))+((r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1253=IKsin(j4);
IkReal x1254=IKcos(j4);
IkReal x1255=(r01*sj0);
IkReal x1256=(cj0*sj1);
IkReal x1257=((1.0)*cj1);
IkReal x1258=(py*sj0);
evalcond[0]=(x1253+((sj1*x1255))+((cj1*r02))+((r00*x1256)));
evalcond[1]=((-0.26630543)+((sj1*x1258))+((cj1*pz))+(((0.05525)*x1253))+((px*x1256)));
evalcond[2]=((((-1.0)*x1255*x1257))+((r02*sj1))+(((-1.0)*cj0*r00*x1257))+(((-1.0)*x1254)));
evalcond[3]=((0.0137)+(((-0.05525)*x1254))+(((-1.0)*x1257*x1258))+(((-1.0)*cj0*px*x1257))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1259=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x1259))+((cj0*r01)));
evalcond[2]=((-0.05452384)+(((-1.0)*px*x1259))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1260=((1.0)*r02);
IkReal x1261=((1.0)*sj1);
IkReal x1262=(cj0*r00);
IkReal x1263=(r01*sj0);
if( IKabs(((((-1.0)*x1261*x1263))+(((-1.0)*x1261*x1262))+(((-1.0)*cj1*x1260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x1260))+((cj1*x1263))+((cj1*x1262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1261*x1263))+(((-1.0)*x1261*x1262))+(((-1.0)*cj1*x1260))))+IKsqr(((((-1.0)*sj1*x1260))+((cj1*x1263))+((cj1*x1262))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1261*x1263))+(((-1.0)*x1261*x1262))+(((-1.0)*cj1*x1260))), ((((-1.0)*sj1*x1260))+((cj1*x1263))+((cj1*x1262))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1264=IKsin(j4);
IkReal x1265=IKcos(j4);
IkReal x1266=((1.0)*cj1);
IkReal x1267=(cj0*r00);
IkReal x1268=(r01*sj0);
IkReal x1269=(py*sj0);
IkReal x1270=(cj0*px);
evalcond[0]=(x1264+((sj1*x1268))+((sj1*x1267))+((cj1*r02)));
evalcond[1]=(x1265+(((-1.0)*x1266*x1268))+(((-1.0)*x1266*x1267))+((r02*sj1)));
evalcond[2]=((-0.26630543)+((sj1*x1270))+((sj1*x1269))+((cj1*pz))+(((0.05525)*x1264)));
evalcond[3]=((-0.0137)+(((-1.0)*x1266*x1270))+(((-1.0)*x1266*x1269))+(((0.05525)*x1265))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1271=((1.0)*cj1);
IkReal x1272=(r01*sj0);
IkReal x1273=((1.0)*sj1);
IkReal x1274=(cj0*r00);
CheckValue<IkReal> x1275=IKPowWithIntegerCheck(cj3,-1);
if(!x1275.valid){
continue;
}
if( IKabs(((((-1.0)*x1272*x1273))+(((-1.0)*x1273*x1274))+(((-1.0)*r02*x1271)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1275.value)*(((((-1.0)*x1271*x1274))+(((-1.0)*x1271*x1272))+((r02*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1272*x1273))+(((-1.0)*x1273*x1274))+(((-1.0)*r02*x1271))))+IKsqr(((x1275.value)*(((((-1.0)*x1271*x1274))+(((-1.0)*x1271*x1272))+((r02*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1272*x1273))+(((-1.0)*x1273*x1274))+(((-1.0)*r02*x1271))), ((x1275.value)*(((((-1.0)*x1271*x1274))+(((-1.0)*x1271*x1272))+((r02*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1276=IKsin(j4);
IkReal x1277=IKcos(j4);
IkReal x1278=(cj0*px);
IkReal x1279=(sj0*sj1);
IkReal x1280=((1.0)*cj1);
IkReal x1281=((1.0)*sj0);
IkReal x1282=(cj0*r00);
IkReal x1283=(cj3*x1277);
IkReal x1284=(sj3*x1277);
evalcond[0]=(x1284+(((-1.0)*r00*x1281))+((cj0*r01)));
evalcond[1]=(x1276+((cj1*r02))+((sj1*x1282))+((r01*x1279)));
evalcond[2]=((-0.26630543)+((py*x1279))+((sj1*x1278))+((cj1*pz))+(((0.05525)*x1276)));
evalcond[3]=((((-1.0)*x1283))+((r02*sj1))+(((-1.0)*r01*sj0*x1280))+(((-1.0)*x1280*x1282)));
evalcond[4]=((0.22425116)+(((0.05525)*x1284))+(((-1.0)*px*x1281))+(((0.278775)*cj3))+(((-0.0137)*sj3))+((cj0*py)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*py*sj0*x1280))+(((-1.0)*x1278*x1280))+(((-0.05525)*x1283))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1285=((1.0)*cj0);
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(sj3,-1);
if(!x1286.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj1*x1285))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1286.value)*((((r00*sj0))+(((-1.0)*r01*x1285)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj1*x1285))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02))))+IKsqr(((x1286.value)*((((r00*sj0))+(((-1.0)*r01*x1285))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj1*x1285))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02))), ((x1286.value)*((((r00*sj0))+(((-1.0)*r01*x1285))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1287=IKsin(j4);
IkReal x1288=IKcos(j4);
IkReal x1289=(cj0*px);
IkReal x1290=(sj0*sj1);
IkReal x1291=((1.0)*cj1);
IkReal x1292=((1.0)*sj0);
IkReal x1293=(cj0*r00);
IkReal x1294=(cj3*x1288);
IkReal x1295=(sj3*x1288);
evalcond[0]=(x1295+(((-1.0)*r00*x1292))+((cj0*r01)));
evalcond[1]=(x1287+((sj1*x1293))+((cj1*r02))+((r01*x1290)));
evalcond[2]=((-0.26630543)+(((0.05525)*x1287))+((py*x1290))+((cj1*pz))+((sj1*x1289)));
evalcond[3]=((((-1.0)*r01*sj0*x1291))+((r02*sj1))+(((-1.0)*x1294))+(((-1.0)*x1291*x1293)));
evalcond[4]=((0.22425116)+(((0.278775)*cj3))+(((-0.0137)*sj3))+(((0.05525)*x1295))+(((-1.0)*px*x1292))+((cj0*py)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*x1289*x1291))+(((-0.05525)*x1294))+(((-1.0)*py*sj0*x1291))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1296=((1.0)*cj1);
IkReal x1297=(cj0*r00);
IkReal x1298=(r01*sj0);
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(sj2,-1);
if(!x1299.valid){
continue;
}
if( IKabs(((x1299.value)*((((sj1*x1297))+((sj1*x1298))+((cj1*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*x1296*x1298))+(((-1.0)*x1296*x1297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1299.value)*((((sj1*x1297))+((sj1*x1298))+((cj1*r02))))))+IKsqr((((r02*sj1))+(((-1.0)*x1296*x1298))+(((-1.0)*x1296*x1297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1299.value)*((((sj1*x1297))+((sj1*x1298))+((cj1*r02))))), (((r02*sj1))+(((-1.0)*x1296*x1298))+(((-1.0)*x1296*x1297))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1300=IKsin(j4);
IkReal x1301=IKcos(j4);
IkReal x1302=(cj0*px);
IkReal x1303=(sj0*sj1);
IkReal x1304=((1.0)*sj0);
IkReal x1305=((1.0)*cj1);
IkReal x1306=(cj0*r00);
IkReal x1307=(sj2*x1300);
IkReal x1308=(cj2*x1300);
evalcond[0]=(x1308+(((-1.0)*r00*x1304))+((cj0*r01)));
evalcond[1]=((((-1.0)*x1307))+((cj1*r02))+((sj1*x1306))+((r01*x1303)));
evalcond[2]=((0.00025116)+(((-1.0)*px*x1304))+(((-0.502775)*sj2))+((cj0*py))+(((0.05525)*x1308)));
evalcond[3]=((((-1.0)*x1301))+((r02*sj1))+(((-1.0)*cj1*r01*x1304))+(((-1.0)*x1305*x1306)));
evalcond[4]=((0.0137)+(((-1.0)*cj1*py*x1304))+(((-0.05525)*x1301))+((pz*sj1))+(((-1.0)*x1302*x1305)));
evalcond[5]=((-0.26630543)+((py*x1303))+((cj1*pz))+(((-0.05525)*x1307))+(((-0.502775)*cj2))+((sj1*x1302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1309=((1.0)*r01);
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(cj2,-1);
if(!x1310.valid){
continue;
}
if( IKabs(((x1310.value)*((((r00*sj0))+(((-1.0)*cj0*x1309)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*sj0*x1309))+(((-1.0)*cj0*cj1*r00))+((r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1310.value)*((((r00*sj0))+(((-1.0)*cj0*x1309))))))+IKsqr(((((-1.0)*cj1*sj0*x1309))+(((-1.0)*cj0*cj1*r00))+((r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1310.value)*((((r00*sj0))+(((-1.0)*cj0*x1309))))), ((((-1.0)*cj1*sj0*x1309))+(((-1.0)*cj0*cj1*r00))+((r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1311=IKsin(j4);
IkReal x1312=IKcos(j4);
IkReal x1313=(cj0*px);
IkReal x1314=(sj0*sj1);
IkReal x1315=((1.0)*sj0);
IkReal x1316=((1.0)*cj1);
IkReal x1317=(cj0*r00);
IkReal x1318=(sj2*x1311);
IkReal x1319=(cj2*x1311);
evalcond[0]=(x1319+(((-1.0)*r00*x1315))+((cj0*r01)));
evalcond[1]=(((r01*x1314))+(((-1.0)*x1318))+((cj1*r02))+((sj1*x1317)));
evalcond[2]=((0.00025116)+(((-0.502775)*sj2))+(((0.05525)*x1319))+((cj0*py))+(((-1.0)*px*x1315)));
evalcond[3]=((((-1.0)*x1312))+((r02*sj1))+(((-1.0)*cj1*r01*x1315))+(((-1.0)*x1316*x1317)));
evalcond[4]=((0.0137)+(((-1.0)*x1313*x1316))+(((-0.05525)*x1312))+((pz*sj1))+(((-1.0)*cj1*py*x1315)));
evalcond[5]=((-0.26630543)+((py*x1314))+((cj1*pz))+(((-0.05525)*x1318))+(((-0.502775)*cj2))+((sj1*x1313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1320=(r01*sj0);
IkReal x1321=(cj0*r00);
CheckValue<IkReal> x1322=IKPowWithIntegerCheck(sj2,-1);
if(!x1322.valid){
continue;
}
if( IKabs(((x1322.value)*((((cj1*r02))+((sj1*x1321))+((sj1*x1320)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*sj1))+((cj1*x1321))+((cj1*x1320)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1322.value)*((((cj1*r02))+((sj1*x1321))+((sj1*x1320))))))+IKsqr(((((-1.0)*r02*sj1))+((cj1*x1321))+((cj1*x1320))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1322.value)*((((cj1*r02))+((sj1*x1321))+((sj1*x1320))))), ((((-1.0)*r02*sj1))+((cj1*x1321))+((cj1*x1320))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1323=IKsin(j4);
IkReal x1324=IKcos(j4);
IkReal x1325=(cj0*px);
IkReal x1326=(sj0*sj1);
IkReal x1327=((1.0)*sj0);
IkReal x1328=((1.0)*cj1);
IkReal x1329=(cj0*r00);
IkReal x1330=(sj2*x1323);
IkReal x1331=(cj2*x1323);
evalcond[0]=(x1331+(((-1.0)*r00*x1327))+((cj0*r01)));
evalcond[1]=(x1324+(((-1.0)*x1328*x1329))+((r02*sj1))+(((-1.0)*cj1*r01*x1327)));
evalcond[2]=(((r01*x1326))+(((-1.0)*x1330))+((cj1*r02))+((sj1*x1329)));
evalcond[3]=((0.00025116)+(((0.05525)*x1331))+((cj0*py))+(((0.054775)*sj2))+(((-1.0)*px*x1327)));
evalcond[4]=((-0.0137)+(((-1.0)*cj1*py*x1327))+(((-1.0)*x1325*x1328))+((pz*sj1))+(((0.05525)*x1324)));
evalcond[5]=((-0.26630543)+((py*x1326))+((cj1*pz))+(((-0.05525)*x1330))+(((0.054775)*cj2))+((sj1*x1325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1332=IKPowWithIntegerCheck(cj2,-1);
if(!x1332.valid){
continue;
}
if( IKabs(((x1332.value)*((((r00*sj0))+(((-1.0)*cj0*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1332.value)*((((r00*sj0))+(((-1.0)*cj0*r01))))))+IKsqr((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1332.value)*((((r00*sj0))+(((-1.0)*cj0*r01))))), (((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1333=IKsin(j4);
IkReal x1334=IKcos(j4);
IkReal x1335=(cj0*px);
IkReal x1336=(sj0*sj1);
IkReal x1337=((1.0)*sj0);
IkReal x1338=((1.0)*cj1);
IkReal x1339=(cj0*r00);
IkReal x1340=(sj2*x1333);
IkReal x1341=(cj2*x1333);
evalcond[0]=(x1341+(((-1.0)*r00*x1337))+((cj0*r01)));
evalcond[1]=(x1334+(((-1.0)*cj1*r01*x1337))+((r02*sj1))+(((-1.0)*x1338*x1339)));
evalcond[2]=(((cj1*r02))+((r01*x1336))+((sj1*x1339))+(((-1.0)*x1340)));
evalcond[3]=((0.00025116)+(((0.05525)*x1341))+(((-1.0)*px*x1337))+((cj0*py))+(((0.054775)*sj2)));
evalcond[4]=((-0.0137)+(((-1.0)*x1335*x1338))+(((0.05525)*x1334))+((pz*sj1))+(((-1.0)*cj1*py*x1337)));
evalcond[5]=((-0.26630543)+(((-0.05525)*x1340))+((py*x1336))+((cj1*pz))+((sj1*x1335))+(((0.054775)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1349=IKPowWithIntegerCheck(cj3,-1);
if(!x1349.valid){
continue;
}
IkReal x1342=x1349.value;
IkReal x1343=(r02*sj1);
IkReal x1344=(r01*sj0);
IkReal x1345=((1.0)*cj1);
IkReal x1346=(cj3*sj1);
IkReal x1347=(cj0*r00);
IkReal x1348=(cj1*cj2*sj3);
CheckValue<IkReal> x1350=IKPowWithIntegerCheck(sj2,-1);
if(!x1350.valid){
continue;
}
if( IKabs((x1342*(x1350.value)*((((x1344*x1346))+((x1344*x1348))+((x1346*x1347))+((x1347*x1348))+(((-1.0)*cj2*sj3*x1343))+((cj1*cj3*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1342*((x1343+(((-1.0)*x1344*x1345))+(((-1.0)*x1345*x1347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1342*(x1350.value)*((((x1344*x1346))+((x1344*x1348))+((x1346*x1347))+((x1347*x1348))+(((-1.0)*cj2*sj3*x1343))+((cj1*cj3*r02))))))+IKsqr((x1342*((x1343+(((-1.0)*x1344*x1345))+(((-1.0)*x1345*x1347))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1342*(x1350.value)*((((x1344*x1346))+((x1344*x1348))+((x1346*x1347))+((x1347*x1348))+(((-1.0)*cj2*sj3*x1343))+((cj1*cj3*r02))))), (x1342*((x1343+(((-1.0)*x1344*x1345))+(((-1.0)*x1345*x1347))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1351=IKcos(j4);
IkReal x1352=IKsin(j4);
IkReal x1353=(cj0*px);
IkReal x1354=(sj0*sj1);
IkReal x1355=((0.0137)*sj3);
IkReal x1356=((0.278775)*cj3);
IkReal x1357=((1.0)*sj0);
IkReal x1358=((1.0)*cj1);
IkReal x1359=(cj0*r00);
IkReal x1360=(sj2*x1352);
IkReal x1361=((1.0)*x1351);
IkReal x1362=(cj2*x1352);
IkReal x1363=((0.05525)*sj3*x1351);
evalcond[0]=(x1362+(((-1.0)*r00*x1357))+(((-1.0)*sj2*sj3*x1361))+((cj0*r01)));
evalcond[1]=((((-1.0)*cj3*x1361))+((r02*sj1))+(((-1.0)*x1358*x1359))+(((-1.0)*cj1*r01*x1357)));
evalcond[2]=((((-1.0)*x1360))+((sj1*x1359))+((cj1*r02))+(((-1.0)*cj2*sj3*x1361))+((r01*x1354)));
evalcond[3]=((((0.0137)*cj3))+(((-1.0)*cj1*py*x1357))+((pz*sj1))+(((-0.05525)*cj3*x1351))+(((-1.0)*x1353*x1358))+(((0.278775)*sj3)));
evalcond[4]=((0.00025116)+(((0.05525)*x1362))+(((-1.0)*sj2*x1356))+(((-1.0)*sj2*x1363))+(((-0.224)*sj2))+(((-1.0)*px*x1357))+((sj2*x1355))+((cj0*py)));
evalcond[5]=((-0.26630543)+((sj1*x1353))+(((-1.0)*cj2*x1363))+(((-1.0)*cj2*x1356))+((cj1*pz))+(((-0.05525)*x1360))+(((-0.224)*cj2))+((cj2*x1355))+((py*x1354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1370=IKPowWithIntegerCheck(cj3,-1);
if(!x1370.valid){
continue;
}
IkReal x1364=x1370.value;
IkReal x1365=((1.0)*cj1);
IkReal x1366=(cj0*r00);
IkReal x1367=(r02*sj1);
IkReal x1368=(sj2*sj3);
IkReal x1369=(r01*sj0);
CheckValue<IkReal> x1371=IKPowWithIntegerCheck(cj2,-1);
if(!x1371.valid){
continue;
}
if( IKabs((x1364*(x1371.value)*(((((-1.0)*cj0*cj3*r01))+((x1367*x1368))+(((-1.0)*x1365*x1368*x1369))+(((-1.0)*x1365*x1366*x1368))+((cj3*r00*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1364*((x1367+(((-1.0)*x1365*x1366))+(((-1.0)*x1365*x1369)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1364*(x1371.value)*(((((-1.0)*cj0*cj3*r01))+((x1367*x1368))+(((-1.0)*x1365*x1368*x1369))+(((-1.0)*x1365*x1366*x1368))+((cj3*r00*sj0))))))+IKsqr((x1364*((x1367+(((-1.0)*x1365*x1366))+(((-1.0)*x1365*x1369))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1364*(x1371.value)*(((((-1.0)*cj0*cj3*r01))+((x1367*x1368))+(((-1.0)*x1365*x1368*x1369))+(((-1.0)*x1365*x1366*x1368))+((cj3*r00*sj0))))), (x1364*((x1367+(((-1.0)*x1365*x1366))+(((-1.0)*x1365*x1369))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1372=IKcos(j4);
IkReal x1373=IKsin(j4);
IkReal x1374=(cj0*px);
IkReal x1375=(sj0*sj1);
IkReal x1376=((0.0137)*sj3);
IkReal x1377=((0.278775)*cj3);
IkReal x1378=((1.0)*sj0);
IkReal x1379=((1.0)*cj1);
IkReal x1380=(cj0*r00);
IkReal x1381=(sj2*x1373);
IkReal x1382=((1.0)*x1372);
IkReal x1383=(cj2*x1373);
IkReal x1384=((0.05525)*sj3*x1372);
evalcond[0]=(x1383+(((-1.0)*r00*x1378))+(((-1.0)*sj2*sj3*x1382))+((cj0*r01)));
evalcond[1]=((((-1.0)*cj1*r01*x1378))+((r02*sj1))+(((-1.0)*cj3*x1382))+(((-1.0)*x1379*x1380)));
evalcond[2]=(((cj1*r02))+((sj1*x1380))+(((-1.0)*cj2*sj3*x1382))+(((-1.0)*x1381))+((r01*x1375)));
evalcond[3]=((((0.0137)*cj3))+(((-1.0)*cj1*py*x1378))+(((-0.05525)*cj3*x1372))+(((-1.0)*x1374*x1379))+((pz*sj1))+(((0.278775)*sj3)));
evalcond[4]=((0.00025116)+(((0.05525)*x1383))+(((-1.0)*px*x1378))+((sj2*x1376))+(((-0.224)*sj2))+(((-1.0)*sj2*x1377))+((cj0*py))+(((-1.0)*sj2*x1384)));
evalcond[5]=((-0.26630543)+(((-0.05525)*x1381))+(((-1.0)*cj2*x1377))+((py*x1375))+((cj1*pz))+(((-0.224)*cj2))+((cj2*x1376))+(((-1.0)*cj2*x1384))+((sj1*x1374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1385=(r01*sj2);
IkReal x1386=(sj0*sj1);
IkReal x1387=(cj2*r01);
IkReal x1388=(r00*sj0);
IkReal x1389=(cj1*r02);
IkReal x1390=(cj0*r00*sj1);
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(sj3,-1);
if(!x1391.valid){
continue;
}
if( IKabs((((cj2*x1388))+(((-1.0)*cj0*x1387))+((sj2*x1390))+((sj2*x1389))+((x1385*x1386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1391.value)*(((((-1.0)*sj2*x1388))+((cj2*x1390))+((cj2*x1389))+((cj0*x1385))+((x1386*x1387)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*x1388))+(((-1.0)*cj0*x1387))+((sj2*x1390))+((sj2*x1389))+((x1385*x1386))))+IKsqr(((x1391.value)*(((((-1.0)*sj2*x1388))+((cj2*x1390))+((cj2*x1389))+((cj0*x1385))+((x1386*x1387))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj2*x1388))+(((-1.0)*cj0*x1387))+((sj2*x1390))+((sj2*x1389))+((x1385*x1386))), ((x1391.value)*(((((-1.0)*sj2*x1388))+((cj2*x1390))+((cj2*x1389))+((cj0*x1385))+((x1386*x1387))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1392=IKcos(j4);
IkReal x1393=IKsin(j4);
IkReal x1394=(cj0*px);
IkReal x1395=(sj0*sj1);
IkReal x1396=((0.0137)*sj3);
IkReal x1397=((0.278775)*cj3);
IkReal x1398=((1.0)*sj0);
IkReal x1399=((1.0)*cj1);
IkReal x1400=(cj0*r00);
IkReal x1401=(sj2*x1393);
IkReal x1402=((1.0)*x1392);
IkReal x1403=(cj2*x1393);
IkReal x1404=((0.05525)*sj3*x1392);
evalcond[0]=((((-1.0)*r00*x1398))+x1403+((cj0*r01))+(((-1.0)*sj2*sj3*x1402)));
evalcond[1]=((((-1.0)*cj1*r01*x1398))+(((-1.0)*x1399*x1400))+(((-1.0)*cj3*x1402))+((r02*sj1)));
evalcond[2]=((((-1.0)*x1401))+((cj1*r02))+((sj1*x1400))+((r01*x1395))+(((-1.0)*cj2*sj3*x1402)));
evalcond[3]=((((0.0137)*cj3))+(((-1.0)*cj1*py*x1398))+(((-1.0)*x1394*x1399))+(((-0.05525)*cj3*x1392))+((pz*sj1))+(((0.278775)*sj3)));
evalcond[4]=((0.00025116)+(((-0.224)*sj2))+((sj2*x1396))+(((-1.0)*px*x1398))+((cj0*py))+(((0.05525)*x1403))+(((-1.0)*sj2*x1397))+(((-1.0)*sj2*x1404)));
evalcond[5]=((-0.26630543)+((cj2*x1396))+(((-1.0)*cj2*x1404))+(((-0.05525)*x1401))+((py*x1395))+((cj1*pz))+((sj1*x1394))+(((-1.0)*cj2*x1397))+(((-0.224)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1405=sj2*sj2;
IkReal x1406=(sj0*sj2);
IkReal x1407=((0.05525)*cj1);
IkReal x1408=((1.0)*cj1);
IkReal x1409=(cj0*py*sj2);
IkReal x1410=(cj0*r01*sj2);
IkReal x1411=(((cj0*r00*x1407))+(((-0.05525)*r02*sj1))+(((-1.0)*cj0*px*x1408))+((r01*sj0*x1407))+(((-1.0)*py*sj0*x1408))+((pz*sj1)));
IkReal x1412=(x1405*x1411);
CheckValue<IkReal> x1413 = IKatan2WithCheck(IkReal(((((-30.277)*x1410))+(((11151.0)*x1412))+(((-548.0)*px*x1406))+(((548.0)*x1409))+(((30.277)*r00*x1406))+(((-122.752)*x1405))+(((0.13763568)*sj2)))),((((2497.824)*x1405))+(((616.09275)*x1410))+(((11151.0)*px*x1406))+(((548.0)*x1412))+(((-616.09275)*r00*x1406))+(((-11151.0)*x1409))+(((-2.80068516)*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x1413.valid){
continue;
}
CheckValue<IkReal> x1414=IKPowWithIntegerCheck(IKsign(x1405),-1);
if(!x1414.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1413.value)+(((-1.5707963267949)*(x1414.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1415=sj2*sj2;
IkReal x1416=IKsin(j3);
IkReal x1417=IKcos(j3);
IkReal x1418=cj2*cj2;
IkReal x1419=((0.05525)*r00);
IkReal x1420=(cj0*sj2);
IkReal x1421=(py*sj0);
IkReal x1422=(cj2*sj1);
IkReal x1423=((0.05525)*r02);
IkReal x1424=(cj1*cj2);
IkReal x1425=(sj0*sj2);
IkReal x1426=(cj0*cj1);
IkReal x1427=((1.0)*px);
IkReal x1428=(cj0*x1422);
IkReal x1429=((0.0137)*x1416);
IkReal x1430=((0.278775)*x1417);
IkReal x1431=((0.05525)*r01*sj0);
evalcond[0]=(((x1415*x1429))+(((-1.0)*x1425*x1427))+(((-0.224)*x1415))+(((-0.05525)*r01*x1420))+(((-1.0)*x1415*x1430))+((x1419*x1425))+((py*x1420))+(((0.00025116)*sj2)));
evalcond[1]=((((-1.0)*x1426*x1427))+(((0.278775)*x1416))+(((-1.0)*sj1*x1423))+((x1419*x1426))+(((-1.0)*cj1*x1421))+((pz*sj1))+(((0.0137)*x1417))+((cj1*x1431)));
evalcond[2]=((((-1.0)*x1422*x1431))+(((-1.0)*x1423*x1424))+(((-0.26630543)*cj2))+(((-0.224)*x1418))+(((-1.0)*x1419*x1428))+((x1418*x1429))+((px*x1428))+(((-1.0)*x1418*x1430))+((pz*x1424))+((x1421*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x1432=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r01*sj0*x1432))+(((-1.0)*cj0*r00*x1432))+((r02*sj1)));
evalcond[2]=((0.278775)+(((-1.0)*cj0*px*x1432))+((pz*sj1))+(((-1.0)*py*sj0*x1432)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1433=(r01*sj2);
IkReal x1434=(sj0*sj1);
IkReal x1435=(cj2*r01);
IkReal x1436=(r00*sj0);
IkReal x1437=(cj1*r02);
IkReal x1438=(cj0*r00*sj1);
if( IKabs((((x1433*x1434))+((sj2*x1437))+((sj2*x1438))+(((-1.0)*cj0*x1435))+((cj2*x1436)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*x1436))+((x1434*x1435))+((cj0*x1433))+((cj2*x1437))+((cj2*x1438)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1433*x1434))+((sj2*x1437))+((sj2*x1438))+(((-1.0)*cj0*x1435))+((cj2*x1436))))+IKsqr(((((-1.0)*sj2*x1436))+((x1434*x1435))+((cj0*x1433))+((cj2*x1437))+((cj2*x1438))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1433*x1434))+((sj2*x1437))+((sj2*x1438))+(((-1.0)*cj0*x1435))+((cj2*x1436))), ((((-1.0)*sj2*x1436))+((x1434*x1435))+((cj0*x1433))+((cj2*x1437))+((cj2*x1438))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1439=IKcos(j4);
IkReal x1440=IKsin(j4);
IkReal x1441=((1.0)*sj2);
IkReal x1442=(sj0*sj1);
IkReal x1443=(cj0*sj1);
IkReal x1444=((1.0)*sj0);
IkReal x1445=((0.05525)*x1439);
IkReal x1446=(cj2*x1440);
evalcond[0]=((((-1.0)*r00*x1444))+(((-1.0)*x1439*x1441))+x1446+((cj0*r01)));
evalcond[1]=(((cj1*r02))+(((-1.0)*cj2*x1439))+((r00*x1443))+((r01*x1442))+(((-1.0)*x1440*x1441)));
evalcond[2]=((0.00025116)+(((-1.0)*sj2*x1445))+(((-1.0)*px*x1444))+(((0.05525)*x1446))+(((-0.2103)*sj2))+((cj0*py)));
evalcond[3]=((-0.26630543)+(((-1.0)*cj2*x1445))+(((-0.2103)*cj2))+((cj1*pz))+((py*x1442))+((px*x1443))+(((-0.05525)*sj2*x1440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1447=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r02*sj1))+(((-1.0)*r01*sj0*x1447))+(((-1.0)*cj0*r00*x1447)));
evalcond[2]=((-0.278775)+(((-1.0)*py*sj0*x1447))+((pz*sj1))+(((-1.0)*cj0*px*x1447)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1448=((1.0)*cj2);
IkReal x1449=(r00*sj0);
IkReal x1450=(cj1*r02);
IkReal x1451=(cj0*sj2);
IkReal x1452=(r00*sj1);
IkReal x1453=(r01*sj0*sj1);
if( IKabs(((((-1.0)*cj0*r01*x1448))+((sj2*x1450))+((sj2*x1453))+((cj2*x1449))+((x1451*x1452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x1448*x1452))+(((-1.0)*x1448*x1450))+(((-1.0)*x1448*x1453))+(((-1.0)*r01*x1451))+((sj2*x1449)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r01*x1448))+((sj2*x1450))+((sj2*x1453))+((cj2*x1449))+((x1451*x1452))))+IKsqr(((((-1.0)*cj0*x1448*x1452))+(((-1.0)*x1448*x1450))+(((-1.0)*x1448*x1453))+(((-1.0)*r01*x1451))+((sj2*x1449))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*r01*x1448))+((sj2*x1450))+((sj2*x1453))+((cj2*x1449))+((x1451*x1452))), ((((-1.0)*cj0*x1448*x1452))+(((-1.0)*x1448*x1450))+(((-1.0)*x1448*x1453))+(((-1.0)*r01*x1451))+((sj2*x1449))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1454=IKcos(j4);
IkReal x1455=IKsin(j4);
IkReal x1456=(sj0*sj1);
IkReal x1457=(cj0*sj1);
IkReal x1458=((1.0)*sj0);
IkReal x1459=(sj2*x1455);
IkReal x1460=((0.05525)*x1454);
IkReal x1461=(cj2*x1455);
evalcond[0]=(((sj2*x1454))+(((-1.0)*r00*x1458))+x1461+((cj0*r01)));
evalcond[1]=((((-1.0)*x1459))+((cj1*r02))+((r01*x1456))+((cj2*x1454))+((r00*x1457)));
evalcond[2]=((0.00025116)+(((0.05525)*x1461))+((sj2*x1460))+(((-1.0)*px*x1458))+((cj0*py))+(((-0.2377)*sj2)));
evalcond[3]=((-0.26630543)+((cj2*x1460))+((py*x1456))+((px*x1457))+((cj1*pz))+(((-0.05525)*x1459))+(((-0.2377)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x1462=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r01*sj0*x1462))+(((-1.0)*cj0*r00*x1462))+((r02*sj1)));
evalcond[2]=((0.278775)+(((-1.0)*cj0*px*x1462))+((pz*sj1))+(((-1.0)*py*sj0*x1462)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), (((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1463=IKsin(j4);
IkReal x1464=IKcos(j4);
IkReal x1465=(sj0*sj1);
IkReal x1466=(cj0*sj1);
IkReal x1467=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x1467))+x1463+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x1463))+(((-1.0)*px*x1467))+((cj0*py)));
evalcond[2]=(((r01*x1465))+((cj1*r02))+((r00*x1466))+(((-1.0)*x1464)));
evalcond[3]=((-0.47660543)+((py*x1465))+(((-0.05525)*x1464))+((cj1*pz))+((px*x1466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1468=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r01*sj0*x1468))+(((-1.0)*cj0*r00*x1468))+((r02*sj1)));
evalcond[2]=((-0.278775)+(((-1.0)*cj0*px*x1468))+((pz*sj1))+(((-1.0)*py*sj0*x1468)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1469=((1.0)*sj1);
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj0*x1469))+(((-1.0)*cj0*r00*x1469))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr(((((-1.0)*r01*sj0*x1469))+(((-1.0)*cj0*r00*x1469))+(((-1.0)*cj1*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), ((((-1.0)*r01*sj0*x1469))+(((-1.0)*cj0*r00*x1469))+(((-1.0)*cj1*r02))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1470=IKsin(j4);
IkReal x1471=IKcos(j4);
IkReal x1472=(sj0*sj1);
IkReal x1473=(cj0*sj1);
IkReal x1474=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x1474))+x1470+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x1474))+(((0.05525)*x1470))+((cj0*py)));
evalcond[2]=(((cj1*r02))+x1471+((r01*x1472))+((r00*x1473)));
evalcond[3]=((-0.50400543)+((cj1*pz))+(((0.05525)*x1471))+((py*x1472))+((px*x1473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1475=(sj0*sj1);
IkReal x1476=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((cj1*r02))+((r01*x1475))+((r00*x1476)));
evalcond[2]=((-0.76908043)+((cj1*pz))+((py*x1475))+((px*x1476)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1477=((1.0)*cj0);
if( IKabs((((r00*sj0))+(((-1.0)*r01*x1477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*cj1*r00*x1477))+(((-1.0)*cj1*r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*r01*x1477))))+IKsqr((((r02*sj1))+(((-1.0)*cj1*r00*x1477))+(((-1.0)*cj1*r01*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*r01*x1477))), (((r02*sj1))+(((-1.0)*cj1*r00*x1477))+(((-1.0)*cj1*r01*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1478=IKsin(j4);
IkReal x1479=IKcos(j4);
IkReal x1480=((1.0)*cj1);
IkReal x1481=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x1481))+x1478+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x1481))+(((0.05525)*x1478))+((cj0*py)));
evalcond[2]=((((-1.0)*r01*sj0*x1480))+(((-1.0)*x1479))+((r02*sj1))+(((-1.0)*cj0*r00*x1480)));
evalcond[3]=((0.0137)+(((-1.0)*cj0*px*x1480))+(((-1.0)*py*sj0*x1480))+(((-0.05525)*x1479))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1482=(sj0*sj1);
IkReal x1483=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((r01*x1482))+((r00*x1483))+((cj1*r02)));
evalcond[2]=((-0.21153043)+((py*x1482))+((cj1*pz))+((px*x1483)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), (((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1484=IKsin(j4);
IkReal x1485=IKcos(j4);
IkReal x1486=((1.0)*cj1);
IkReal x1487=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x1487))+x1484+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x1484))+(((-1.0)*px*x1487))+((cj0*py)));
evalcond[2]=((((-1.0)*r01*sj0*x1486))+((r02*sj1))+x1485+(((-1.0)*cj0*r00*x1486)));
evalcond[3]=((-0.0137)+(((0.05525)*x1485))+(((-1.0)*cj0*px*x1486))+(((-1.0)*py*sj0*x1486))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1488=((1.0)*r01);
CheckValue<IkReal> x1489=IKPowWithIntegerCheck(cj3,-1);
if(!x1489.valid){
continue;
}
if( IKabs((((r00*sj0))+(((-1.0)*cj0*x1488)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1489.value)*(((((-1.0)*cj1*sj0*x1488))+(((-1.0)*cj0*cj1*r00))+((r02*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*x1488))))+IKsqr(((x1489.value)*(((((-1.0)*cj1*sj0*x1488))+(((-1.0)*cj0*cj1*r00))+((r02*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*x1488))), ((x1489.value)*(((((-1.0)*cj1*sj0*x1488))+(((-1.0)*cj0*cj1*r00))+((r02*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1490=IKsin(j4);
IkReal x1491=IKcos(j4);
IkReal x1492=(cj0*px);
IkReal x1493=(sj0*sj1);
IkReal x1494=((1.0)*cj1);
IkReal x1495=((1.0)*sj0);
IkReal x1496=(cj0*r00);
IkReal x1497=((1.0)*x1491);
IkReal x1498=((0.05525)*x1491);
evalcond[0]=((((-1.0)*r00*x1495))+x1490+((cj0*r01)));
evalcond[1]=((0.00025116)+(((0.05525)*x1490))+(((-1.0)*px*x1495))+((cj0*py)));
evalcond[2]=(((sj1*x1496))+((r01*x1493))+((cj1*r02))+(((-1.0)*sj3*x1497)));
evalcond[3]=((((-1.0)*cj3*x1497))+(((-1.0)*x1494*x1496))+(((-1.0)*r01*sj0*x1494))+((r02*sj1)));
evalcond[4]=((-0.49030543)+((sj1*x1492))+((py*x1493))+((cj1*pz))+(((-1.0)*sj3*x1498))+(((-0.278775)*cj3))+(((0.0137)*sj3)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*cj3*x1498))+(((-1.0)*x1492*x1494))+(((-1.0)*py*sj0*x1494))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1499=IKPowWithIntegerCheck(sj3,-1);
if(!x1499.valid){
continue;
}
if( IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1499.value)*((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))+IKsqr(((x1499.value)*((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r00*sj0))+(((-1.0)*cj0*r01))), ((x1499.value)*((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1500=IKsin(j4);
IkReal x1501=IKcos(j4);
IkReal x1502=(cj0*px);
IkReal x1503=(sj0*sj1);
IkReal x1504=((1.0)*cj1);
IkReal x1505=((1.0)*sj0);
IkReal x1506=(cj0*r00);
IkReal x1507=((1.0)*x1501);
IkReal x1508=((0.05525)*x1501);
evalcond[0]=((((-1.0)*r00*x1505))+x1500+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x1505))+(((0.05525)*x1500))+((cj0*py)));
evalcond[2]=((((-1.0)*sj3*x1507))+((cj1*r02))+((r01*x1503))+((sj1*x1506)));
evalcond[3]=((((-1.0)*r01*sj0*x1504))+(((-1.0)*x1504*x1506))+((r02*sj1))+(((-1.0)*cj3*x1507)));
evalcond[4]=((-0.49030543)+(((-1.0)*sj3*x1508))+((cj1*pz))+((sj1*x1502))+((py*x1503))+(((-0.278775)*cj3))+(((0.0137)*sj3)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*py*sj0*x1504))+(((-1.0)*cj3*x1508))+((pz*sj1))+(((-1.0)*x1502*x1504))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x1509=(sj0*sj1);
IkReal x1510=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((cj1*r02))+((r01*x1509))+((r00*x1510)));
evalcond[2]=((0.23646957)+((cj1*pz))+((py*x1509))+((px*x1510)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1511=((1.0)*cj1);
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj0*x1511))+((r02*sj1))+(((-1.0)*cj0*r00*x1511)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((((-1.0)*r01*sj0*x1511))+((r02*sj1))+(((-1.0)*cj0*r00*x1511))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((((-1.0)*r01*sj0*x1511))+((r02*sj1))+(((-1.0)*cj0*r00*x1511))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1512=IKsin(j4);
IkReal x1513=IKcos(j4);
IkReal x1514=((1.0)*cj1);
IkReal x1515=((1.0)*sj0);
evalcond[0]=((((-1.0)*x1512))+(((-1.0)*r00*x1515))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x1515))+((cj0*py))+(((-0.05525)*x1512)));
evalcond[2]=((((-1.0)*r01*sj0*x1514))+(((-1.0)*x1513))+((r02*sj1))+(((-1.0)*cj0*r00*x1514)));
evalcond[3]=((0.0137)+(((-1.0)*py*sj0*x1514))+(((-1.0)*cj0*px*x1514))+((pz*sj1))+(((-0.05525)*x1513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1516=(sj0*sj1);
IkReal x1517=(cj0*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj1*r02))+((r01*x1516))+((r00*x1517)));
evalcond[2]=((-0.32108043)+((cj1*pz))+((py*x1516))+((px*x1517)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), (((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1518=IKsin(j4);
IkReal x1519=IKcos(j4);
IkReal x1520=((1.0)*cj1);
IkReal x1521=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x1521))+(((-1.0)*x1518))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x1521))+((cj0*py))+(((-0.05525)*x1518)));
evalcond[2]=((((-1.0)*r01*sj0*x1520))+((r02*sj1))+x1519+(((-1.0)*cj0*r00*x1520)));
evalcond[3]=((-0.0137)+(((-1.0)*py*sj0*x1520))+(((-1.0)*cj0*px*x1520))+(((0.05525)*x1519))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1522=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r01*sj0*x1522))+((r02*sj1))+(((-1.0)*cj0*r00*x1522)));
evalcond[2]=((0.278775)+(((-1.0)*py*sj0*x1522))+(((-1.0)*cj0*px*x1522))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1523=((1.0)*sj1);
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj0*x1523))+(((-1.0)*cj1*r02))+(((-1.0)*cj0*r00*x1523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((((-1.0)*r01*sj0*x1523))+(((-1.0)*cj1*r02))+(((-1.0)*cj0*r00*x1523))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((((-1.0)*r01*sj0*x1523))+(((-1.0)*cj1*r02))+(((-1.0)*cj0*r00*x1523))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1524=IKsin(j4);
IkReal x1525=IKcos(j4);
IkReal x1526=(cj0*sj1);
IkReal x1527=(sj0*sj1);
IkReal x1528=((1.0)*sj0);
evalcond[0]=((((-1.0)*r00*x1528))+(((-1.0)*x1524))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-0.05525)*x1524))+(((-1.0)*px*x1528))+((cj0*py)));
evalcond[2]=(((r00*x1526))+((cj1*r02))+((r01*x1527))+x1525);
evalcond[3]=((-0.05600543)+((cj1*pz))+((px*x1526))+(((0.05525)*x1525))+((py*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1529=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r01*sj0*x1529))+((r02*sj1))+(((-1.0)*cj0*r00*x1529)));
evalcond[2]=((-0.278775)+(((-1.0)*py*sj0*x1529))+(((-1.0)*cj0*px*x1529))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), (((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1530=IKsin(j4);
IkReal x1531=IKcos(j4);
IkReal x1532=(cj0*sj1);
IkReal x1533=(sj0*sj1);
IkReal x1534=((1.0)*sj0);
evalcond[0]=((((-1.0)*x1530))+(((-1.0)*r00*x1534))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x1534))+(((-0.05525)*x1530))+((cj0*py)));
evalcond[2]=((((-1.0)*x1531))+((r01*x1533))+((cj1*r02))+((r00*x1532)));
evalcond[3]=((-0.02860543)+((cj1*pz))+((px*x1532))+(((-0.05525)*x1531))+((py*x1533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1535=((1.0)*sj1);
CheckValue<IkReal> x1536=IKPowWithIntegerCheck(sj3,-1);
if(!x1536.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1536.value)*(((((-1.0)*cj0*r00*x1535))+(((-1.0)*r01*sj0*x1535))+(((-1.0)*cj1*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((x1536.value)*(((((-1.0)*cj0*r00*x1535))+(((-1.0)*r01*sj0*x1535))+(((-1.0)*cj1*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((x1536.value)*(((((-1.0)*cj0*r00*x1535))+(((-1.0)*r01*sj0*x1535))+(((-1.0)*cj1*r02))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1537=IKsin(j4);
IkReal x1538=IKcos(j4);
IkReal x1539=(cj0*px);
IkReal x1540=(sj0*sj1);
IkReal x1541=((1.0)*cj1);
IkReal x1542=((1.0)*sj0);
IkReal x1543=(cj0*r00);
IkReal x1544=(cj3*x1538);
IkReal x1545=(sj3*x1538);
evalcond[0]=((((-1.0)*x1537))+(((-1.0)*r00*x1542))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x1542))+(((-0.05525)*x1537))+((cj0*py)));
evalcond[2]=(((cj1*r02))+x1545+((sj1*x1543))+((r01*x1540)));
evalcond[3]=((((-1.0)*x1544))+((r02*sj1))+(((-1.0)*r01*sj0*x1541))+(((-1.0)*x1541*x1543)));
evalcond[4]=((-0.04230543)+(((0.05525)*x1545))+(((0.278775)*cj3))+((sj1*x1539))+((cj1*pz))+(((-0.0137)*sj3))+((py*x1540)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*py*sj0*x1541))+(((-0.05525)*x1544))+(((-1.0)*x1539*x1541))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1546=((1.0)*cj1);
CheckValue<IkReal> x1547=IKPowWithIntegerCheck(cj3,-1);
if(!x1547.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1547.value)*(((((-1.0)*cj0*r00*x1546))+((r02*sj1))+(((-1.0)*r01*sj0*x1546)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((x1547.value)*(((((-1.0)*cj0*r00*x1546))+((r02*sj1))+(((-1.0)*r01*sj0*x1546))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((x1547.value)*(((((-1.0)*cj0*r00*x1546))+((r02*sj1))+(((-1.0)*r01*sj0*x1546))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1548=IKsin(j4);
IkReal x1549=IKcos(j4);
IkReal x1550=(cj0*px);
IkReal x1551=(sj0*sj1);
IkReal x1552=((1.0)*cj1);
IkReal x1553=((1.0)*sj0);
IkReal x1554=(cj0*r00);
IkReal x1555=(cj3*x1549);
IkReal x1556=(sj3*x1549);
evalcond[0]=((((-1.0)*x1548))+(((-1.0)*r00*x1553))+((cj0*r01)));
evalcond[1]=((0.00025116)+(((-1.0)*px*x1553))+(((-0.05525)*x1548))+((cj0*py)));
evalcond[2]=(((r01*x1551))+((cj1*r02))+x1556+((sj1*x1554)));
evalcond[3]=((((-1.0)*x1555))+(((-1.0)*x1552*x1554))+((r02*sj1))+(((-1.0)*r01*sj0*x1552)));
evalcond[4]=((-0.04230543)+(((0.278775)*cj3))+((cj1*pz))+((sj1*x1550))+((py*x1551))+(((-0.0137)*sj3))+(((0.05525)*x1556)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*py*sj0*x1552))+(((-1.0)*x1550*x1552))+(((-0.05525)*x1555))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x1557=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r02*sj1))+(((-1.0)*r01*sj0*x1557))+(((-1.0)*cj0*r00*x1557)));
evalcond[2]=((0.278775)+(((-1.0)*py*sj0*x1557))+(((-1.0)*cj0*px*x1557))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))+IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))), ((((-1.0)*r00*sj0))+((cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1558=IKcos(j4);
IkReal x1559=IKsin(j4);
IkReal x1560=(sj0*sj1);
IkReal x1561=(cj0*sj1);
IkReal x1562=((1.0)*sj0);
evalcond[0]=((((-1.0)*x1558))+(((-1.0)*r00*x1562))+((cj0*r01)));
evalcond[1]=((-0.21004884)+(((-1.0)*px*x1562))+(((-0.05525)*x1558))+((cj0*py)));
evalcond[2]=((((-1.0)*x1559))+((cj1*r02))+((r00*x1561))+((r01*x1560)));
evalcond[3]=((-0.26630543)+((cj1*pz))+((px*x1561))+(((-0.05525)*x1559))+((py*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1563=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r02*sj1))+(((-1.0)*r01*sj0*x1563))+(((-1.0)*cj0*r00*x1563)));
evalcond[2]=((-0.278775)+(((-1.0)*py*sj0*x1563))+(((-1.0)*cj0*px*x1563))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))+IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))), (((r00*sj0))+(((-1.0)*cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1564=IKcos(j4);
IkReal x1565=IKsin(j4);
IkReal x1566=(sj0*sj1);
IkReal x1567=(cj0*sj1);
IkReal x1568=((1.0)*sj0);
evalcond[0]=(x1564+(((-1.0)*r00*x1568))+((cj0*r01)));
evalcond[1]=((-0.23744884)+(((0.05525)*x1564))+(((-1.0)*px*x1568))+((cj0*py)));
evalcond[2]=(((cj1*r02))+((r00*x1567))+(((-1.0)*x1565))+((r01*x1566)));
evalcond[3]=((-0.26630543)+((cj1*pz))+(((-0.05525)*x1565))+((px*x1567))+((py*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1569=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x1569))+((cj0*r01)));
evalcond[2]=((-0.50252384)+(((-1.0)*px*x1569))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1570=((1.0)*cj1);
IkReal x1571=(cj0*r00);
IkReal x1572=(r01*sj0);
if( IKabs((((cj1*r02))+((sj1*x1571))+((sj1*x1572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1570*x1572))+(((-1.0)*x1570*x1571))+((r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x1571))+((sj1*x1572))))+IKsqr(((((-1.0)*x1570*x1572))+(((-1.0)*x1570*x1571))+((r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x1571))+((sj1*x1572))), ((((-1.0)*x1570*x1572))+(((-1.0)*x1570*x1571))+((r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1573=IKsin(j4);
IkReal x1574=IKcos(j4);
IkReal x1575=(sj0*sj1);
IkReal x1576=(cj0*sj1);
IkReal x1577=((1.0)*cj0*cj1);
IkReal x1578=((1.0)*cj1*sj0);
evalcond[0]=(((cj1*r02))+((r01*x1575))+((r00*x1576))+(((-1.0)*x1573)));
evalcond[1]=((-0.26630543)+((cj1*pz))+(((-0.05525)*x1573))+((px*x1576))+((py*x1575)));
evalcond[2]=(((r02*sj1))+(((-1.0)*r01*x1578))+(((-1.0)*r00*x1577))+(((-1.0)*x1574)));
evalcond[3]=((0.0137)+(((-1.0)*py*x1578))+(((-1.0)*px*x1577))+(((-0.05525)*x1574))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1579=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x1579))+((cj0*r01)));
evalcond[2]=((0.05502616)+(((-1.0)*px*x1579))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1580=(r01*sj0);
IkReal x1581=(cj0*r00);
if( IKabs((((cj1*r02))+((sj1*x1581))+((sj1*x1580)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1580))+((cj1*x1581))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x1581))+((sj1*x1580))))+IKsqr((((cj1*x1580))+((cj1*x1581))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x1581))+((sj1*x1580))), (((cj1*x1580))+((cj1*x1581))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1582=IKsin(j4);
IkReal x1583=IKcos(j4);
IkReal x1584=(cj0*r00);
IkReal x1585=(r01*sj0);
IkReal x1586=((1.0)*cj1);
IkReal x1587=(py*sj0);
IkReal x1588=(cj0*px);
evalcond[0]=((((-1.0)*x1585*x1586))+(((-1.0)*x1584*x1586))+((r02*sj1))+x1583);
evalcond[1]=(((cj1*r02))+((sj1*x1585))+((sj1*x1584))+(((-1.0)*x1582)));
evalcond[2]=((-0.26630543)+(((-0.05525)*x1582))+((cj1*pz))+((sj1*x1587))+((sj1*x1588)));
evalcond[3]=((-0.0137)+(((0.05525)*x1583))+((pz*sj1))+(((-1.0)*x1586*x1587))+(((-1.0)*x1586*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1589=((1.0)*cj1);
IkReal x1590=(cj0*r00);
IkReal x1591=(r01*sj0);
CheckValue<IkReal> x1592=IKPowWithIntegerCheck(cj3,-1);
if(!x1592.valid){
continue;
}
if( IKabs((((cj1*r02))+((sj1*x1590))+((sj1*x1591)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1592.value)*((((r02*sj1))+(((-1.0)*x1589*x1590))+(((-1.0)*x1589*x1591)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((sj1*x1590))+((sj1*x1591))))+IKsqr(((x1592.value)*((((r02*sj1))+(((-1.0)*x1589*x1590))+(((-1.0)*x1589*x1591))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((sj1*x1590))+((sj1*x1591))), ((x1592.value)*((((r02*sj1))+(((-1.0)*x1589*x1590))+(((-1.0)*x1589*x1591))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1593=IKsin(j4);
IkReal x1594=IKcos(j4);
IkReal x1595=(cj0*px);
IkReal x1596=(sj0*sj1);
IkReal x1597=((1.0)*cj1);
IkReal x1598=((1.0)*sj0);
IkReal x1599=(cj0*r00);
IkReal x1600=((1.0)*x1594);
IkReal x1601=((0.05525)*x1594);
evalcond[0]=((((-1.0)*r00*x1598))+(((-1.0)*sj3*x1600))+((cj0*r01)));
evalcond[1]=(((r01*x1596))+((cj1*r02))+((sj1*x1599))+(((-1.0)*x1593)));
evalcond[2]=((-0.26630543)+(((-0.05525)*x1593))+((cj1*pz))+((sj1*x1595))+((py*x1596)));
evalcond[3]=(((r02*sj1))+(((-1.0)*cj3*x1600))+(((-1.0)*x1597*x1599))+(((-1.0)*r01*sj0*x1597)));
evalcond[4]=((-0.22374884)+(((-1.0)*sj3*x1601))+(((-1.0)*px*x1598))+(((-0.278775)*cj3))+(((0.0137)*sj3))+((cj0*py)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*x1595*x1597))+(((-1.0)*py*sj0*x1597))+(((-1.0)*cj3*x1601))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1602=IKPowWithIntegerCheck(sj3,-1);
if(!x1602.valid){
continue;
}
if( IKabs((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1602.value)*(((((-1.0)*r00*sj0))+((cj0*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))))+IKsqr(((x1602.value)*(((((-1.0)*r00*sj0))+((cj0*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj1*r02))+((cj0*r00*sj1))+((r01*sj0*sj1))), ((x1602.value)*(((((-1.0)*r00*sj0))+((cj0*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1603=IKsin(j4);
IkReal x1604=IKcos(j4);
IkReal x1605=(cj0*px);
IkReal x1606=(sj0*sj1);
IkReal x1607=((1.0)*cj1);
IkReal x1608=((1.0)*sj0);
IkReal x1609=(cj0*r00);
IkReal x1610=((1.0)*x1604);
IkReal x1611=((0.05525)*x1604);
evalcond[0]=((((-1.0)*r00*x1608))+(((-1.0)*sj3*x1610))+((cj0*r01)));
evalcond[1]=((((-1.0)*x1603))+((cj1*r02))+((r01*x1606))+((sj1*x1609)));
evalcond[2]=((-0.26630543)+((py*x1606))+(((-0.05525)*x1603))+((sj1*x1605))+((cj1*pz)));
evalcond[3]=((((-1.0)*cj3*x1610))+(((-1.0)*x1607*x1609))+((r02*sj1))+(((-1.0)*r01*sj0*x1607)));
evalcond[4]=((-0.22374884)+(((-1.0)*px*x1608))+(((-0.278775)*cj3))+(((0.0137)*sj3))+((cj0*py))+(((-1.0)*sj3*x1611)));
evalcond[5]=((((-1.0)*cj3*x1611))+(((0.0137)*cj3))+(((-1.0)*py*sj0*x1607))+(((-1.0)*x1605*x1607))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x1612=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x1612))+((r02*sj1))+(((-1.0)*r01*sj0*x1612)));
evalcond[2]=((0.278775)+(((-1.0)*py*sj0*x1612))+(((-1.0)*cj0*px*x1612))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1613=((1.0)*sj1);
if( IKabs(((((-1.0)*cj0*r00*x1613))+(((-1.0)*r01*sj0*x1613))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj0))+(((-1.0)*cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r00*x1613))+(((-1.0)*r01*sj0*x1613))+(((-1.0)*cj1*r02))))+IKsqr((((r00*sj0))+(((-1.0)*cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*r00*x1613))+(((-1.0)*r01*sj0*x1613))+(((-1.0)*cj1*r02))), (((r00*sj0))+(((-1.0)*cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1614=IKcos(j4);
IkReal x1615=IKsin(j4);
IkReal x1616=(sj0*sj1);
IkReal x1617=(cj0*sj1);
IkReal x1618=((1.0)*sj0);
evalcond[0]=(x1614+(((-1.0)*r00*x1618))+((cj0*r01)));
evalcond[1]=((0.21055116)+(((0.05525)*x1614))+(((-1.0)*px*x1618))+((cj0*py)));
evalcond[2]=(((r01*x1616))+((r00*x1617))+x1615+((cj1*r02)));
evalcond[3]=((-0.26630543)+((py*x1616))+(((0.05525)*x1615))+((cj1*pz))+((px*x1617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1619=((1.0)*cj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj0*r00*x1619))+((r02*sj1))+(((-1.0)*r01*sj0*x1619)));
evalcond[2]=((-0.278775)+(((-1.0)*py*sj0*x1619))+(((-1.0)*cj0*px*x1619))+((pz*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1620=((1.0)*sj1);
if( IKabs(((((-1.0)*cj0*r00*x1620))+(((-1.0)*r01*sj0*x1620))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*r00*x1620))+(((-1.0)*r01*sj0*x1620))+(((-1.0)*cj1*r02))))+IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj0*r00*x1620))+(((-1.0)*r01*sj0*x1620))+(((-1.0)*cj1*r02))), ((((-1.0)*r00*sj0))+((cj0*r01))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1621=IKcos(j4);
IkReal x1622=IKsin(j4);
IkReal x1623=(sj0*sj1);
IkReal x1624=(cj0*sj1);
IkReal x1625=((1.0)*sj0);
evalcond[0]=((((-1.0)*x1621))+(((-1.0)*r00*x1625))+((cj0*r01)));
evalcond[1]=((0.23795116)+(((-0.05525)*x1621))+(((-1.0)*px*x1625))+((cj0*py)));
evalcond[2]=(((r00*x1624))+((r01*x1623))+x1622+((cj1*r02)));
evalcond[3]=((-0.26630543)+(((0.05525)*x1622))+((py*x1623))+((cj1*pz))+((px*x1624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1626=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x1626))+((cj0*r01)));
evalcond[2]=((0.50302616)+(((-1.0)*px*x1626))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1627=((1.0)*cj1);
IkReal x1628=(r01*sj0);
IkReal x1629=((1.0)*sj1);
IkReal x1630=(cj0*r00);
if( IKabs(((((-1.0)*r02*x1627))+(((-1.0)*x1628*x1629))+(((-1.0)*x1629*x1630)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*x1627*x1628))+(((-1.0)*x1627*x1630)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x1627))+(((-1.0)*x1628*x1629))+(((-1.0)*x1629*x1630))))+IKsqr((((r02*sj1))+(((-1.0)*x1627*x1628))+(((-1.0)*x1627*x1630))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r02*x1627))+(((-1.0)*x1628*x1629))+(((-1.0)*x1629*x1630))), (((r02*sj1))+(((-1.0)*x1627*x1628))+(((-1.0)*x1627*x1630))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1631=IKsin(j4);
IkReal x1632=IKcos(j4);
IkReal x1633=(r01*sj0);
IkReal x1634=(cj0*sj1);
IkReal x1635=((1.0)*cj1);
IkReal x1636=(py*sj0);
evalcond[0]=(((sj1*x1633))+x1631+((cj1*r02))+((r00*x1634)));
evalcond[1]=((-0.26630543)+((sj1*x1636))+((px*x1634))+((cj1*pz))+(((0.05525)*x1631)));
evalcond[2]=((((-1.0)*x1633*x1635))+((r02*sj1))+(((-1.0)*x1632))+(((-1.0)*cj0*r00*x1635)));
evalcond[3]=((0.0137)+(((-1.0)*x1635*x1636))+(((-1.0)*cj0*px*x1635))+(((-0.05525)*x1632))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1637=((1.0)*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r00*x1637))+((cj0*r01)));
evalcond[2]=((-0.05452384)+(((-1.0)*px*x1637))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1638=((1.0)*r02);
IkReal x1639=((1.0)*sj1);
IkReal x1640=(cj0*r00);
IkReal x1641=(r01*sj0);
if( IKabs(((((-1.0)*x1639*x1640))+(((-1.0)*x1639*x1641))+(((-1.0)*cj1*x1638)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x1638))+((cj1*x1640))+((cj1*x1641)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1639*x1640))+(((-1.0)*x1639*x1641))+(((-1.0)*cj1*x1638))))+IKsqr(((((-1.0)*sj1*x1638))+((cj1*x1640))+((cj1*x1641))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1639*x1640))+(((-1.0)*x1639*x1641))+(((-1.0)*cj1*x1638))), ((((-1.0)*sj1*x1638))+((cj1*x1640))+((cj1*x1641))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1642=IKsin(j4);
IkReal x1643=IKcos(j4);
IkReal x1644=((1.0)*cj1);
IkReal x1645=(cj0*r00);
IkReal x1646=(r01*sj0);
IkReal x1647=(py*sj0);
IkReal x1648=(cj0*px);
evalcond[0]=(((sj1*x1646))+((sj1*x1645))+x1642+((cj1*r02)));
evalcond[1]=((((-1.0)*x1644*x1646))+(((-1.0)*x1644*x1645))+x1643+((r02*sj1)));
evalcond[2]=((-0.26630543)+((sj1*x1648))+((sj1*x1647))+((cj1*pz))+(((0.05525)*x1642)));
evalcond[3]=((-0.0137)+(((-1.0)*x1644*x1648))+(((-1.0)*x1644*x1647))+(((0.05525)*x1643))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1649=((1.0)*cj1);
IkReal x1650=(r01*sj0);
IkReal x1651=((1.0)*sj1);
IkReal x1652=(cj0*r00);
CheckValue<IkReal> x1653=IKPowWithIntegerCheck(cj3,-1);
if(!x1653.valid){
continue;
}
if( IKabs(((((-1.0)*x1650*x1651))+(((-1.0)*x1651*x1652))+(((-1.0)*r02*x1649)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1653.value)*((((r02*sj1))+(((-1.0)*x1649*x1650))+(((-1.0)*x1649*x1652)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1650*x1651))+(((-1.0)*x1651*x1652))+(((-1.0)*r02*x1649))))+IKsqr(((x1653.value)*((((r02*sj1))+(((-1.0)*x1649*x1650))+(((-1.0)*x1649*x1652))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1650*x1651))+(((-1.0)*x1651*x1652))+(((-1.0)*r02*x1649))), ((x1653.value)*((((r02*sj1))+(((-1.0)*x1649*x1650))+(((-1.0)*x1649*x1652))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1654=IKsin(j4);
IkReal x1655=IKcos(j4);
IkReal x1656=(cj0*px);
IkReal x1657=(sj0*sj1);
IkReal x1658=((1.0)*cj1);
IkReal x1659=((1.0)*sj0);
IkReal x1660=(cj0*r00);
IkReal x1661=(cj3*x1655);
IkReal x1662=(sj3*x1655);
evalcond[0]=((((-1.0)*r00*x1659))+x1662+((cj0*r01)));
evalcond[1]=(((sj1*x1660))+x1654+((cj1*r02))+((r01*x1657)));
evalcond[2]=((-0.26630543)+((sj1*x1656))+((py*x1657))+((cj1*pz))+(((0.05525)*x1654)));
evalcond[3]=((((-1.0)*r01*sj0*x1658))+(((-1.0)*x1661))+((r02*sj1))+(((-1.0)*x1658*x1660)));
evalcond[4]=((0.22425116)+(((-1.0)*px*x1659))+(((0.278775)*cj3))+(((-0.0137)*sj3))+((cj0*py))+(((0.05525)*x1662)));
evalcond[5]=((((-1.0)*x1656*x1658))+(((0.0137)*cj3))+(((-0.05525)*x1661))+((pz*sj1))+(((-1.0)*py*sj0*x1658))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1663=((1.0)*cj0);
CheckValue<IkReal> x1664=IKPowWithIntegerCheck(sj3,-1);
if(!x1664.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj1*x1663))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1664.value)*((((r00*sj0))+(((-1.0)*r01*x1663)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj1*x1663))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02))))+IKsqr(((x1664.value)*((((r00*sj0))+(((-1.0)*r01*x1663))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*sj1*x1663))+(((-1.0)*r01*sj0*sj1))+(((-1.0)*cj1*r02))), ((x1664.value)*((((r00*sj0))+(((-1.0)*r01*x1663))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1665=IKsin(j4);
IkReal x1666=IKcos(j4);
IkReal x1667=(cj0*px);
IkReal x1668=(sj0*sj1);
IkReal x1669=((1.0)*cj1);
IkReal x1670=((1.0)*sj0);
IkReal x1671=(cj0*r00);
IkReal x1672=(cj3*x1666);
IkReal x1673=(sj3*x1666);
evalcond[0]=(x1673+(((-1.0)*r00*x1670))+((cj0*r01)));
evalcond[1]=(((sj1*x1671))+x1665+((cj1*r02))+((r01*x1668)));
evalcond[2]=((-0.26630543)+((sj1*x1667))+((py*x1668))+((cj1*pz))+(((0.05525)*x1665)));
evalcond[3]=((((-1.0)*r01*sj0*x1669))+(((-1.0)*x1669*x1671))+((r02*sj1))+(((-1.0)*x1672)));
evalcond[4]=((0.22425116)+(((-1.0)*px*x1670))+(((0.05525)*x1673))+(((0.278775)*cj3))+(((-0.0137)*sj3))+((cj0*py)));
evalcond[5]=((((0.0137)*cj3))+(((-1.0)*x1667*x1669))+(((-1.0)*py*sj0*x1669))+(((-0.05525)*x1672))+((pz*sj1))+(((0.278775)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1674=((1.0)*cj1);
IkReal x1675=(cj0*r00);
IkReal x1676=(r01*sj0);
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(sj2,-1);
if(!x1677.valid){
continue;
}
if( IKabs(((x1677.value)*((((sj1*x1676))+((sj1*x1675))+((cj1*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*x1674*x1675))+(((-1.0)*x1674*x1676)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1677.value)*((((sj1*x1676))+((sj1*x1675))+((cj1*r02))))))+IKsqr((((r02*sj1))+(((-1.0)*x1674*x1675))+(((-1.0)*x1674*x1676))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1677.value)*((((sj1*x1676))+((sj1*x1675))+((cj1*r02))))), (((r02*sj1))+(((-1.0)*x1674*x1675))+(((-1.0)*x1674*x1676))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1678=IKsin(j4);
IkReal x1679=IKcos(j4);
IkReal x1680=(cj0*px);
IkReal x1681=(sj0*sj1);
IkReal x1682=((1.0)*sj0);
IkReal x1683=((1.0)*cj1);
IkReal x1684=(cj0*r00);
IkReal x1685=(sj2*x1678);
IkReal x1686=(cj2*x1678);
evalcond[0]=(x1686+((cj0*r01))+(((-1.0)*r00*x1682)));
evalcond[1]=(((r01*x1681))+((sj1*x1684))+(((-1.0)*x1685))+((cj1*r02)));
evalcond[2]=((0.00025116)+(((-0.502775)*sj2))+((cj0*py))+(((-1.0)*px*x1682))+(((0.05525)*x1686)));
evalcond[3]=((((-1.0)*x1683*x1684))+((r02*sj1))+(((-1.0)*x1679))+(((-1.0)*cj1*r01*x1682)));
evalcond[4]=((0.0137)+(((-1.0)*cj1*py*x1682))+(((-1.0)*x1680*x1683))+(((-0.05525)*x1679))+((pz*sj1)));
evalcond[5]=((-0.26630543)+((sj1*x1680))+((cj1*pz))+((py*x1681))+(((-0.502775)*cj2))+(((-0.05525)*x1685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1687=((1.0)*r01);
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(cj2,-1);
if(!x1688.valid){
continue;
}
if( IKabs(((x1688.value)*((((r00*sj0))+(((-1.0)*cj0*x1687)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*cj1*r00))+((r02*sj1))+(((-1.0)*cj1*sj0*x1687)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1688.value)*((((r00*sj0))+(((-1.0)*cj0*x1687))))))+IKsqr(((((-1.0)*cj0*cj1*r00))+((r02*sj1))+(((-1.0)*cj1*sj0*x1687))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1688.value)*((((r00*sj0))+(((-1.0)*cj0*x1687))))), ((((-1.0)*cj0*cj1*r00))+((r02*sj1))+(((-1.0)*cj1*sj0*x1687))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1689=IKsin(j4);
IkReal x1690=IKcos(j4);
IkReal x1691=(cj0*px);
IkReal x1692=(sj0*sj1);
IkReal x1693=((1.0)*sj0);
IkReal x1694=((1.0)*cj1);
IkReal x1695=(cj0*r00);
IkReal x1696=(sj2*x1689);
IkReal x1697=(cj2*x1689);
evalcond[0]=(x1697+(((-1.0)*r00*x1693))+((cj0*r01)));
evalcond[1]=(((r01*x1692))+((sj1*x1695))+(((-1.0)*x1696))+((cj1*r02)));
evalcond[2]=((0.00025116)+(((0.05525)*x1697))+(((-0.502775)*sj2))+((cj0*py))+(((-1.0)*px*x1693)));
evalcond[3]=((((-1.0)*x1690))+(((-1.0)*x1694*x1695))+((r02*sj1))+(((-1.0)*cj1*r01*x1693)));
evalcond[4]=((0.0137)+(((-1.0)*x1691*x1694))+(((-1.0)*cj1*py*x1693))+((pz*sj1))+(((-0.05525)*x1690)));
evalcond[5]=((-0.26630543)+((sj1*x1691))+((cj1*pz))+(((-0.502775)*cj2))+((py*x1692))+(((-0.05525)*x1696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1698=(r01*sj0);
IkReal x1699=(cj0*r00);
CheckValue<IkReal> x1700=IKPowWithIntegerCheck(sj2,-1);
if(!x1700.valid){
continue;
}
if( IKabs(((x1700.value)*((((sj1*x1699))+((sj1*x1698))+((cj1*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*sj1))+((cj1*x1698))+((cj1*x1699)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1700.value)*((((sj1*x1699))+((sj1*x1698))+((cj1*r02))))))+IKsqr(((((-1.0)*r02*sj1))+((cj1*x1698))+((cj1*x1699))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1700.value)*((((sj1*x1699))+((sj1*x1698))+((cj1*r02))))), ((((-1.0)*r02*sj1))+((cj1*x1698))+((cj1*x1699))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1701=IKsin(j4);
IkReal x1702=IKcos(j4);
IkReal x1703=(cj0*px);
IkReal x1704=(sj0*sj1);
IkReal x1705=((1.0)*sj0);
IkReal x1706=((1.0)*cj1);
IkReal x1707=(cj0*r00);
IkReal x1708=(sj2*x1701);
IkReal x1709=(cj2*x1701);
evalcond[0]=(x1709+(((-1.0)*r00*x1705))+((cj0*r01)));
evalcond[1]=(x1702+((r02*sj1))+(((-1.0)*cj1*r01*x1705))+(((-1.0)*x1706*x1707)));
evalcond[2]=((((-1.0)*x1708))+((r01*x1704))+((cj1*r02))+((sj1*x1707)));
evalcond[3]=((0.00025116)+(((-1.0)*px*x1705))+(((0.05525)*x1709))+((cj0*py))+(((0.054775)*sj2)));
evalcond[4]=((-0.0137)+(((-1.0)*x1703*x1706))+(((0.05525)*x1702))+((pz*sj1))+(((-1.0)*cj1*py*x1705)));
evalcond[5]=((-0.26630543)+((cj1*pz))+(((-0.05525)*x1708))+((sj1*x1703))+((py*x1704))+(((0.054775)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1710=IKPowWithIntegerCheck(cj2,-1);
if(!x1710.valid){
continue;
}
if( IKabs(((x1710.value)*((((r00*sj0))+(((-1.0)*cj0*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1710.value)*((((r00*sj0))+(((-1.0)*cj0*r01))))))+IKsqr((((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1710.value)*((((r00*sj0))+(((-1.0)*cj0*r01))))), (((cj1*r01*sj0))+((cj0*cj1*r00))+(((-1.0)*r02*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1711=IKsin(j4);
IkReal x1712=IKcos(j4);
IkReal x1713=(cj0*px);
IkReal x1714=(sj0*sj1);
IkReal x1715=((1.0)*sj0);
IkReal x1716=((1.0)*cj1);
IkReal x1717=(cj0*r00);
IkReal x1718=(sj2*x1711);
IkReal x1719=(cj2*x1711);
evalcond[0]=((((-1.0)*r00*x1715))+x1719+((cj0*r01)));
evalcond[1]=(x1712+(((-1.0)*x1716*x1717))+((r02*sj1))+(((-1.0)*cj1*r01*x1715)));
evalcond[2]=(((cj1*r02))+(((-1.0)*x1718))+((r01*x1714))+((sj1*x1717)));
evalcond[3]=((0.00025116)+(((-1.0)*px*x1715))+(((0.05525)*x1719))+((cj0*py))+(((0.054775)*sj2)));
evalcond[4]=((-0.0137)+(((-1.0)*x1713*x1716))+(((0.05525)*x1712))+(((-1.0)*cj1*py*x1715))+((pz*sj1)));
evalcond[5]=((-0.26630543)+((cj1*pz))+(((-0.05525)*x1718))+((py*x1714))+((sj1*x1713))+(((0.054775)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1727=IKPowWithIntegerCheck(cj3,-1);
if(!x1727.valid){
continue;
}
IkReal x1720=x1727.value;
IkReal x1721=(r02*sj1);
IkReal x1722=(r01*sj0);
IkReal x1723=((1.0)*cj1);
IkReal x1724=(cj3*sj1);
IkReal x1725=(cj0*r00);
IkReal x1726=(cj1*cj2*sj3);
CheckValue<IkReal> x1728=IKPowWithIntegerCheck(sj2,-1);
if(!x1728.valid){
continue;
}
if( IKabs((x1720*(x1728.value)*((((x1722*x1726))+((x1722*x1724))+((x1724*x1725))+((x1725*x1726))+(((-1.0)*cj2*sj3*x1721))+((cj1*cj3*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1720*((x1721+(((-1.0)*x1722*x1723))+(((-1.0)*x1723*x1725)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1720*(x1728.value)*((((x1722*x1726))+((x1722*x1724))+((x1724*x1725))+((x1725*x1726))+(((-1.0)*cj2*sj3*x1721))+((cj1*cj3*r02))))))+IKsqr((x1720*((x1721+(((-1.0)*x1722*x1723))+(((-1.0)*x1723*x1725))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1720*(x1728.value)*((((x1722*x1726))+((x1722*x1724))+((x1724*x1725))+((x1725*x1726))+(((-1.0)*cj2*sj3*x1721))+((cj1*cj3*r02))))), (x1720*((x1721+(((-1.0)*x1722*x1723))+(((-1.0)*x1723*x1725))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1729=IKcos(j4);
IkReal x1730=IKsin(j4);
IkReal x1731=(cj0*px);
IkReal x1732=(sj0*sj1);
IkReal x1733=((0.0137)*sj3);
IkReal x1734=((0.278775)*cj3);
IkReal x1735=((1.0)*sj0);
IkReal x1736=((1.0)*cj1);
IkReal x1737=(cj0*r00);
IkReal x1738=(sj2*x1730);
IkReal x1739=((1.0)*x1729);
IkReal x1740=(cj2*x1730);
IkReal x1741=((0.05525)*sj3*x1729);
evalcond[0]=(x1740+(((-1.0)*sj2*sj3*x1739))+(((-1.0)*r00*x1735))+((cj0*r01)));
evalcond[1]=((((-1.0)*cj1*r01*x1735))+(((-1.0)*cj3*x1739))+((r02*sj1))+(((-1.0)*x1736*x1737)));
evalcond[2]=(((r01*x1732))+((cj1*r02))+((sj1*x1737))+(((-1.0)*cj2*sj3*x1739))+(((-1.0)*x1738)));
evalcond[3]=((((-1.0)*x1731*x1736))+(((-1.0)*cj1*py*x1735))+(((0.0137)*cj3))+(((-0.05525)*cj3*x1729))+((pz*sj1))+(((0.278775)*sj3)));
evalcond[4]=((0.00025116)+(((0.05525)*x1740))+(((-0.224)*sj2))+(((-1.0)*sj2*x1741))+(((-1.0)*px*x1735))+((cj0*py))+(((-1.0)*sj2*x1734))+((sj2*x1733)));
evalcond[5]=((-0.26630543)+(((-0.05525)*x1738))+((cj2*x1733))+((py*x1732))+(((-1.0)*cj2*x1734))+((sj1*x1731))+((cj1*pz))+(((-0.224)*cj2))+(((-1.0)*cj2*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1748=IKPowWithIntegerCheck(cj3,-1);
if(!x1748.valid){
continue;
}
IkReal x1742=x1748.value;
IkReal x1743=((1.0)*cj1);
IkReal x1744=(cj0*r00);
IkReal x1745=(r02*sj1);
IkReal x1746=(sj2*sj3);
IkReal x1747=(r01*sj0);
CheckValue<IkReal> x1749=IKPowWithIntegerCheck(cj2,-1);
if(!x1749.valid){
continue;
}
if( IKabs((x1742*(x1749.value)*(((((-1.0)*cj0*cj3*r01))+(((-1.0)*x1743*x1744*x1746))+((x1745*x1746))+((cj3*r00*sj0))+(((-1.0)*x1743*x1746*x1747)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1742*((x1745+(((-1.0)*x1743*x1744))+(((-1.0)*x1743*x1747)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1742*(x1749.value)*(((((-1.0)*cj0*cj3*r01))+(((-1.0)*x1743*x1744*x1746))+((x1745*x1746))+((cj3*r00*sj0))+(((-1.0)*x1743*x1746*x1747))))))+IKsqr((x1742*((x1745+(((-1.0)*x1743*x1744))+(((-1.0)*x1743*x1747))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1742*(x1749.value)*(((((-1.0)*cj0*cj3*r01))+(((-1.0)*x1743*x1744*x1746))+((x1745*x1746))+((cj3*r00*sj0))+(((-1.0)*x1743*x1746*x1747))))), (x1742*((x1745+(((-1.0)*x1743*x1744))+(((-1.0)*x1743*x1747))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1750=IKcos(j4);
IkReal x1751=IKsin(j4);
IkReal x1752=(cj0*px);
IkReal x1753=(sj0*sj1);
IkReal x1754=((0.0137)*sj3);
IkReal x1755=((0.278775)*cj3);
IkReal x1756=((1.0)*sj0);
IkReal x1757=((1.0)*cj1);
IkReal x1758=(cj0*r00);
IkReal x1759=(sj2*x1751);
IkReal x1760=((1.0)*x1750);
IkReal x1761=(cj2*x1751);
IkReal x1762=((0.05525)*sj3*x1750);
evalcond[0]=(x1761+(((-1.0)*sj2*sj3*x1760))+(((-1.0)*r00*x1756))+((cj0*r01)));
evalcond[1]=((((-1.0)*cj3*x1760))+(((-1.0)*x1757*x1758))+((r02*sj1))+(((-1.0)*cj1*r01*x1756)));
evalcond[2]=((((-1.0)*cj2*sj3*x1760))+((cj1*r02))+(((-1.0)*x1759))+((sj1*x1758))+((r01*x1753)));
evalcond[3]=((((0.0137)*cj3))+(((-0.05525)*cj3*x1750))+(((-1.0)*x1752*x1757))+((pz*sj1))+(((-1.0)*cj1*py*x1756))+(((0.278775)*sj3)));
evalcond[4]=((0.00025116)+(((-1.0)*sj2*x1762))+(((-0.224)*sj2))+(((-1.0)*sj2*x1755))+(((0.05525)*x1761))+(((-1.0)*px*x1756))+((sj2*x1754))+((cj0*py)));
evalcond[5]=((-0.26630543)+(((-1.0)*cj2*x1762))+((cj2*x1754))+((cj1*pz))+(((-0.224)*cj2))+(((-1.0)*cj2*x1755))+((sj1*x1752))+(((-0.05525)*x1759))+((py*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1763=(r01*sj2);
IkReal x1764=(sj0*sj1);
IkReal x1765=(cj2*r01);
IkReal x1766=(r00*sj0);
IkReal x1767=(cj1*r02);
IkReal x1768=(cj0*r00*sj1);
CheckValue<IkReal> x1769=IKPowWithIntegerCheck(sj3,-1);
if(!x1769.valid){
continue;
}
if( IKabs((((sj2*x1768))+((sj2*x1767))+(((-1.0)*cj0*x1765))+((cj2*x1766))+((x1763*x1764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1769.value)*((((cj0*x1763))+((x1764*x1765))+(((-1.0)*sj2*x1766))+((cj2*x1768))+((cj2*x1767)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x1768))+((sj2*x1767))+(((-1.0)*cj0*x1765))+((cj2*x1766))+((x1763*x1764))))+IKsqr(((x1769.value)*((((cj0*x1763))+((x1764*x1765))+(((-1.0)*sj2*x1766))+((cj2*x1768))+((cj2*x1767))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj2*x1768))+((sj2*x1767))+(((-1.0)*cj0*x1765))+((cj2*x1766))+((x1763*x1764))), ((x1769.value)*((((cj0*x1763))+((x1764*x1765))+(((-1.0)*sj2*x1766))+((cj2*x1768))+((cj2*x1767))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1770=IKcos(j4);
IkReal x1771=IKsin(j4);
IkReal x1772=(cj0*px);
IkReal x1773=(sj0*sj1);
IkReal x1774=((0.0137)*sj3);
IkReal x1775=((0.278775)*cj3);
IkReal x1776=((1.0)*sj0);
IkReal x1777=((1.0)*cj1);
IkReal x1778=(cj0*r00);
IkReal x1779=(sj2*x1771);
IkReal x1780=((1.0)*x1770);
IkReal x1781=(cj2*x1771);
IkReal x1782=((0.05525)*sj3*x1770);
evalcond[0]=((((-1.0)*sj2*sj3*x1780))+x1781+(((-1.0)*r00*x1776))+((cj0*r01)));
evalcond[1]=(((r02*sj1))+(((-1.0)*cj3*x1780))+(((-1.0)*cj1*r01*x1776))+(((-1.0)*x1777*x1778)));
evalcond[2]=((((-1.0)*x1779))+((cj1*r02))+((r01*x1773))+(((-1.0)*cj2*sj3*x1780))+((sj1*x1778)));
evalcond[3]=((((0.0137)*cj3))+(((-1.0)*x1772*x1777))+(((-0.05525)*cj3*x1770))+(((-1.0)*cj1*py*x1776))+((pz*sj1))+(((0.278775)*sj3)));
evalcond[4]=((0.00025116)+(((0.05525)*x1781))+(((-0.224)*sj2))+(((-1.0)*px*x1776))+(((-1.0)*sj2*x1775))+((sj2*x1774))+((cj0*py))+(((-1.0)*sj2*x1782)));
evalcond[5]=((-0.26630543)+(((-1.0)*cj2*x1775))+(((-0.05525)*x1779))+((cj1*pz))+(((-1.0)*cj2*x1782))+(((-0.224)*cj2))+((sj1*x1772))+((cj2*x1774))+((py*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - komodo_arm (e83948d1b482a8c168aaa0bbfa0644c4)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
